<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大卫和小王的博客园</title>
  
  <subtitle>Welcome!</subtitle>
  <link href="http://david-luge.cn/atom.xml" rel="self"/>
  
  <link href="http://david-luge.cn/"/>
  <updated>2023-03-29T02:54:39.000Z</updated>
  <id>http://david-luge.cn/</id>
  
  <author>
    <name>DavidGu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HLS入门简述</title>
    <link href="http://david-luge.cn/2023/03/29/FPGA/HLS%E5%85%A5%E9%97%A8%E7%AE%80%E8%BF%B0/"/>
    <id>http://david-luge.cn/2023/03/29/FPGA/HLS%E5%85%A5%E9%97%A8%E7%AE%80%E8%BF%B0/</id>
    <published>2023-03-29T02:54:39.000Z</published>
    <updated>2023-03-29T02:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What‘s-HLS？"><a href="#What‘s-HLS？" class="headerlink" title="What‘s HLS？"></a>What‘s HLS？</h2><p>HLS（High-Level Synthesis）高层次综合。何谓高层次？意味着我们可以使用高层次的语言来对设计进行描述，如C，C++，System C等；那何谓综合呢？HLS在其中起了重要的<strong>转换</strong>作用，将高层次的抽象语言转换为寄存器传输级语言（register transfer level，RTL），这样我们可以将其映射到FPGA的器件中，进行硬件实现，此谓综合。</p><p>简单来说，我们通过HLS工具，可以将C，C++等高级语言描述的算法转换为可以进行硬件部署的代码，缩短我们的开发时间。那有同学就兴奋了：“硬件开发真简单，把算法思路拿C语言验证一下，再用HLS工具转换一下代码就ok了，我上我也行。”这种说法对，也不对。开发的流程是对的，先用高级语言对算法进行验证，再进行硬件实现，不对的地方在于没那么简单（手动狗头），或者说想要高效的硬件实现没那么简单。</p><h2 id="Why-HLS？"><a href="#Why-HLS？" class="headerlink" title="Why HLS？"></a>Why HLS？</h2><p>讲完What就该讲Why了，说到Why其实就是说说HLS有哪些优势值得我们选择呢？在这里我搬运一下Xilinx官方文档里面“自夸”的部分：</p><blockquote><p>High-level synthesis bridges hardware and software domains, providing the following primary benefits:</p><p>Improved productivity for hardware designers：Hardware designers can work at a higher level of abstraction while creating<br>high-performance hardware.</p><p>Improved system performance for software designers：Software developers can accelerate the computationally intensive parts of their algorithms on a new compilation target, the FPGA.</p><p>Using a high-level synthesis design methodology allows you to:</p><p>Develop algorithms at the C-level：Work at a level that is abstract from the implementation details, which consume development time.</p><p>Verify at the C-level：Validate the functional correctness of the design more quickly than with traditional hardware description languages.</p><p>Control the C synthesis process through optimization directives：Create specific high-performance hardware  implementations.</p><p>Create multiple implementations from the C source code using optimization directives：Explore the design space, which increases the likelihood of finding an optimal implementation.</p><p>Create readable and portable C source code：Retarget the C source into different devices as well as incorporate the C source into new projects.</p></blockquote><p>我来给大家省流一下，HLS工具对硬件开发者的抽象程度更高，对于软件开发者而言，更方便把算法放FPGA上进行加速了。也就是硬件开发软件化，降低了软件工作者使用FPGA平台进行算法加速的门槛。</p><p>那HLS的设计方法有哪些过人之处呢？1、设计的层次更高，不用过多关注设计细节；2、在C-Level就可以进行设计的验证工作；3、使用一些HLS的优化约束语句就可以控制综合结果的性能；4、基于同一套C Code，使用不同组合的优化约束可以生成性能不同的综合结果，来探索设计空间；5、同一套C Code可以映射到不同的硬件平台中，重塑性强。</p><p>说了那么多，那HLS用起来方便不，又是C代码，又是约束的。我们看一下官方文档里对HLS输入输出的说明：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303250915611.png" alt="1"></p><p>输入主要包括：用C、C++、SystemC编写的函数；设计约束，包括时钟频率、时钟不确定度、目标平台等信息；优化指示，来引导HLS工具做综合方面的优化，如面积优先or速度优先；C语言的testbench以及相关的测试文件；</p><p>输出主要包括：使用HDL描述的设计；报告文件；</p><p>其实各方向的知识基本都符合二八定律，即掌握20%的知识就可以解决80%的问题，其余80%的知识主要用来fix各种corner的情况，本文希望能把20%最重要的东西讲明白，让大家能对HLS有个初步印象，那我们开始吧。</p><h2 id="Optimizing-the-Design"><a href="#Optimizing-the-Design" class="headerlink" title="Optimizing the Design"></a>Optimizing the Design</h2><p>本章主要介绍一些优化技巧，来指导HLS进行综合。通过了解如何对设计进行优化，来提升大家对HLS工具的兴趣。</p><blockquote><p>NOTE：后续所述知识需要同学具有如下基础：了解FPGA基本组成结构，了解 BRAM 资源特性，了解 真双口&#x2F;伪双口 RAM 的区别，有一定的 C 语言基础，了解指针等基础概念。</p></blockquote><h3 id="时钟、复位和RTL输出"><a href="#时钟、复位和RTL输出" class="headerlink" title="时钟、复位和RTL输出"></a>时钟、复位和RTL输出</h3><h4 id="指定时钟频率"><a href="#指定时钟频率" class="headerlink" title="指定时钟频率"></a>指定时钟频率</h4><p><u>对于 C 和 C++ 设计，仅支持单一时钟。</u>对设计中的所有函数将应用同一个时钟。</p><p>对于 SystemC 语言设计，每个 SC_MODULE 都必须使用不同时钟来指定。要在 SystemC 语言设计中指定多个时钟，需要使用 create_clock 命令的 -name 选项来创建多个指定时钟，并使用 CLOCK 指令或编译指示来指定哪个函数包含将以指定时钟进行综合的 SC_MODULE。</p><p>时钟周期（以 ns 为单位）在“Solutions” → “Solutions Setting”中设置。Vivado HLS 使用时钟不确定性概念来提供用户定义的时序裕度。通过使用时钟频率和器件目标信息，Vivado HLS 可估算设计中的操作时序，但无法确定最终组件布局和信号线布线：这些操作由输出 RTL 的逻辑综合来执行。</p><p>为计算用于综合的时钟周期，Vivado HLS 会从时钟周期减去时钟不确定性，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251114447.png" alt="image-20230325111459414"></p><p>这样可为用户提供指定裕度以确保下游进程（例如，逻辑综合与布局布线）具有足够的时序裕度来完成其操作。如果FPGA 器件利用率过高，那么单元的布局以及用于连接单元的信号线的布线可能无法达成理想状态，并且可能导致设计的时序延迟大于期望值。对于此类情况，增加时序裕度可避免 Vivado HLS 所创建的设计在每个时钟周期内综合过多的逻辑运算，并在布局布线选项不太理想的情况下使 RTL 综合仍能满足时序。默认时钟不确定性为周期时间的 12.5%，设计者可以在时钟周期设置的旁边显式指定该值。</p><blockquote><p>NOTE：综合后复查约束的报告至关重要：实际上虽然 Vivado HLS 可生成输出设计，但并不能保证设计满足所有性能约束。请复查设计报告的“性能估算 (Performance Estimates)”部分。</p></blockquote><h4 id="指定复位"><a href="#指定复位" class="headerlink" title="指定复位"></a>指定复位</h4><p>通常 RTL 配置中最重要的操作即选择复位行为。对于复位行为，重要的是理解初始化与复位之间的差异。</p><p>初始化行为，指在 C 中，以静态限定符定义的变量，以及全局作用域中定义的变量默认都初始化为 0。对于这些变量，可赋予特定初始值。对于这两种类型的变量，C 语言代码中的初始值在编译时（时序为 0 时）进行赋值，并且不再进行赋值。上述两种情况下，在 RTL 中实现的初始值相同。</p><ul><li>在 RTL 仿真期间，为这些变量设置的初始值与 C 语言代码中相同。</li><li>在用于对 FPGA 进行编程的比特流中同样会对这些变量进行初始化。当器件上电时，变量将以其初始状态启动。</li></ul><p>变量启动时的初始状态与 C 语言代码中相同，<u>但无法强制返回此初始状态</u>。要返回初始状态，必须通过复位来实现。</p><p>那么我们如何控制复位行为呢？复位端口在 FPGA 中用于在应用复位信号时，立即将连接到复位端口的寄存器和 BRAM 还原为初始值。config_rtl 配置可用于控制 RTL 复位端口是否存在及其行为，如下图所示。要访问此配置，请选择“Solution” → “Solution Settings” → “General” → “Add” → “config_rtl”。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251121143.png" alt="image-20230325112128090"></p><p>复位设置包含设置复位极性以及使用同步复位还是异步复位的功能，但更重要的是，它可通过“reset”选项来控制应用复位信号时要复位的寄存器。“reset”选项包含 4 项设置：</p><ul><li>“none”：不向设计添加任何复位。</li><li>“control”：这是默认设置，用于确保将所有控制寄存器复位。控制寄存器即状态机中使用的寄存器，用于生成 I&#x2F;O 协议信号。此设置可确保设计可立即启动其操作状态。</li><li>“state”：该选项可为控制寄存器添加复位（与“control”设置相同），并且还可为衍生自 C 语言代码中的静态变量和全局变量的任意寄存器或memory添加复位。此设置可确保应用复位后，C 语言代码中初始化的<strong>静态变量和全局变量</strong>均复位为其初始值。</li><li>“all”：为设计中的所有寄存器和memory添加复位。</li></ul><p>通过 RESET 指令可提供更精细的复位控制。对于静态变量或全局变量，RESET 指令可用于为其显式添加复位，或者可将该变量从使用 RESET 指令的 off 选项复位的变量中移除。当设计中存在静态数组或全局数组时，该选项非常实用。</p><blockquote><p>NOTE：当在设计上使用 AXI4 接口时，复位极性会自动更改为低电平有效，而与 config_rtl 配置中的设置无关。这与 AXI4 标准的要求有关。</p></blockquote><p>对数组而言，其通常定义为静态变量，这表明所有元素都将初始化为 0，且数组通常使用 BRAM 来实现。使用复位选项 state 或 all 时，会强制将用 BRAM 实现的所有数组在复位后都返回初始化状态。这可能导致 RTL 设计中出现不好的现象：</p><ul><li>不同于上电初始化，显式复位要求 RTL 设计对 BRAM 中的每个地址进行迭代以设置值：如果 N 较大，这可能导致复位所需的时钟周期数量显著增加，并增加资源占用。</li><li>设计中的每个数组中都有复位信号。</li></ul><p>为防止在此类 BRAM 上都放置复位逻辑，并避免因复位 BRAM 中的所有元素而产生的周期开销，建议执行以下操作：</p><ul><li>使用默认 control 复位模式，并使用 RESET 指令来指定要复位的每个静态变量或全局变量。</li><li>或者，使用 state 复位模式，并使用 RESET 指令的 off 选项从特定静态变量或全局变量中移除复位。</li></ul><h4 id="RTL输出"><a href="#RTL输出" class="headerlink" title="RTL输出"></a>RTL输出</h4><p>可使用 config_rtl 配置来控制 Vivado HLS 的各种 RTL 输出特性：</p><ul><li>指定 RTL 状态机中使用的 FSM 编码类型。</li><li>使用 -header 选项可向所有 RTL 文件添加任意注释字符串（例如，版权声明）。</li><li>使用 prefix 选项可指定要添加到所有 RTL 输出文件名的唯一名称。</li><li>强制 RTL 端口使用小写名称。</li></ul><p>默认 FSM 编码样式为 onehot。其它可用选项包括 auto、binary 和 gray。如果选择 auto，Vivado HLS 可使用onehot 默认设置来实现编码样式，但 Vivado Design Suite 可在逻辑综合期间提取并重新实现 FSM 样式。</p><h3 id="最优化设计的吞吐量"><a href="#最优化设计的吞吐量" class="headerlink" title="最优化设计的吞吐量"></a>最优化设计的吞吐量</h3><p>使用以下约束来提高吞吐量，或降低函数的启动时间间隔。首先对于函数和循环，可以进行流水线设计，提高数据的吞吐率；其次对于内存读写端口受限的场景，设计者通过对数组进行合适的分区，来将其分布到不同的 BRAM 中，解决读写端口受限的问题；然后对于数据依赖的问题，要仔细分析是否为假性的数据依赖；最后对循环进行适当的展开以改善流水线性能，并在任务级别进行并行化处理。</p><h4 id="函数与循环流水线化"><a href="#函数与循环流水线化" class="headerlink" title="函数与循环流水线化"></a>函数与循环流水线化</h4><p>流水线化允许并行执行操作：每个执行步骤无需等待完成所有操作后再开始下一项操作。流水线化适用于函数和循环。下图显示了通过函数流水线化实现的吞吐量提升。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251131428.png" alt="image-20230325113130389"></p><p>如果不使用流水线化，上述示例中的函数将每隔 3 个时钟周期读取一次输入，并在 2 个时钟周期后输出值。该函数启动时间间隔 (Initiation Interval，II) 为 3，时延为 3。使用流水线化后，对于此示例，每个周期都会读取 1 次新输入 (II&#x3D;1)，且不更改输出时延。</p><p>循环流水线化支持以重叠方式来实现循环中的操作。在下图中，(A) 显示了默认顺序操作，每次输入读操作间存在 3 个时钟周期 (II&#x3D;3)，需要经过 8 个时钟周期才会执行最后一次输出写操作。</p><p>在 (B) 所示的循环的流水线版本中，每个周期都会读取一次新输入样本 (II&#x3D;1)，仅需 4 个时钟周期后即可写入最终输出，在使用相同硬件资源的前提下显著改善 II 和时延。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251133878.png" alt="image-20230325113338843"></p><p>函数或循环使用 PIPELINE 指令来实现流水线化。该指令需要在函数或循环主体区域中进行指定。启动时间间隔如果不指定，则默认为 1，但也可设置为其它值。</p><p>流水线化仅应用于指定区域，而不应用于下层层级。但<strong>下层层级内所有循环都会自动展开</strong>。指定函数的下层层级内的所有子函数都必须单独流水线化。如果将子函数流水线化，其上层的已流水线化的函数即可充分发挥流水线性能。反之，<u>已流水线化的顶层函数下层的任意子函数如果不采用流水线化，则可能限制流水线性能。</u></p><p>已流水线化的函数与已流水线化的循环之间行为存在差异。对于函数，流水线将永久运行，永不终止。对于循环，流水线将持续执行直至循环的所有迭代完成为止。在下图中总结了行为差异。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251136380.png" alt="image-20230325113606339"></p><p>行为差异会影响流水线输入和输出的处理方式。如上图所示，已流水线化的函数将持续读取新输入和写入新输出。相比之下，由于循环必须首先完成循环中的所有操作，然后才能启动下一次循环，已流水线化的循环会导致数据流传输中出现“气泡”；即，当循环完成最终迭代后不读取任何输入数据的时间点，以及当开始新循环迭代时没有输出数据的时间点。</p><h5 id="Rewind已流水线化的循环以保障性能"><a href="#Rewind已流水线化的循环以保障性能" class="headerlink" title="Rewind已流水线化的循环以保障性能"></a>Rewind已流水线化的循环以保障性能</h5><p>为避免前图中所示的问题，PIPELINE 编译指示具有可选 rewind 命令。此命令支持将后续调用的迭代进行重叠执行，前提是此循环为数据流进程顶层函数的最外层的构造（并且多次调用数据流区域）。</p><p>下图显示了对循环进行流水线化时使用 rewind 选项的操作。循环迭代计数结束时，循环将开始重新执行。虽然一般情况下它立即重新执行，但也可能出现延迟。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303251139601.png" alt="image-20230325113921563"></p><blockquote><p>NOTE：如果在 DATAFLOW 区域周围使用循环，Vivado HLS 会自动将其实现以允许后续迭代进行重叠。</p></blockquote><h5 id="自动循环流水线化"><a href="#自动循环流水线化" class="headerlink" title="自动循环流水线化"></a>自动循环流水线化</h5><p>config_compile 配置支持根据迭代计数对循环进行自动流水线化。此配置可通过菜单“Solution” → “Solution Setting” → “General” → “Add” → “config_compile”访问。</p><p>pipeline_loops 选项可用于设置循环边界的限制。低于此限制的单一迭代计数内的所有循环都将自动流水线化。默认值为0：不执行自动循环流水线化。</p><p>给定以下示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">480</span>; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">640</span>; x++) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="comment">// do something 5 times</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 pipeline_loops 选项设置为 6，那么以上代码片段中最内层的 for 循环将自动流水线化。这等同于以下代码片段：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; <span class="number">480</span>; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; <span class="number">640</span>; x++) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE II=1</span></span><br><span class="line"><span class="comment">// do something 5 times</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设计中有部分无需使用自动流水线化的循环，请对此类循环应用含 off 选项的 PIPELINE 指令。off 选项可阻止自动循环流水线化。</p><blockquote><p>NOTE：Vivado HLS 会在执行所有用户指定的指令后应用 config_compile pipeline_loops 选项。例如，如果 Vivado HLS 向循环应用用户指定的 UNROLL 指令，那么将首先展开该循环，但无法应用自动循环流水线化。</p></blockquote><h5 id="流水线化失败的问题"><a href="#流水线化失败的问题" class="headerlink" title="流水线化失败的问题"></a>流水线化失败的问题</h5><p>将函数流水线化时，下层层级内所有循环都会自动展开。这是继续执行流水线化的前提。如果循环的边界是一个变量，则无法展开。这将导致无法对函数进行流水线化。</p><p>其次是数据依赖的问题，静态变量用于在循环迭代间保留数据，这通常在导致最终实现时生成寄存器。如果在用流水线实现的函数中遇到此变量，vivado_hls 可能无法对设计进行充分最优化，这可能导致启动时间间隔超过所需的时间。下面给出代码示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function_foo()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> change = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> (condition_xyz)&#123;</span><br><span class="line">change = x; <span class="comment">// store</span></span><br><span class="line">&#125;</span><br><span class="line">y = change; <span class="comment">// load</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 vivado_hls 无法最优化此代码，则存储操作需要 1 个周期，加载操作也需要 1 个周期。如果此函数包含在流水线中，那么流水线必须以最小启动时间间隔 2 来实现，因为数据间存在依赖关系。</p><p>用户可通过重写代码来避免此问题，如下例所示。它可确保在循环的每次迭代中仅存在读操作或写操作，这样即可以II&#x3D;1 来调度设计。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function_readstream()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">bool</span> change = <span class="number">0</span></span><br><span class="line">    <span class="type">bool</span> change_temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (condition_xyz)</span><br><span class="line">    &#123;</span><br><span class="line">        change = x; <span class="comment">// store</span></span><br><span class="line">        change_temp = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    change_temp = change; <span class="comment">// load</span></span><br><span class="line">    &#125;</span><br><span class="line">    y = change_temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过数组分区来改善流水线化"><a href="#通过数组分区来改善流水线化" class="headerlink" title="通过数组分区来改善流水线化"></a>通过数组分区来改善流水线化</h4><p>以下消息显示了对函数进行流水线化时常见的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INFO: [SCHED <span class="number">204</span><span class="number">-61</span>] Pipelining loop <span class="string">&#x27;SUM_LOOP&#x27;</span>.</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-69</span>] Unable to schedule <span class="string">&#x27;load&#x27;</span> operation (<span class="string">&#x27;mem_load_2&#x27;</span>,bottleneck.c:<span class="number">62</span>) on <span class="built_in">array</span> <span class="string">&#x27;mem&#x27;</span> due to limited memory ports.</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-69</span>] The resource limit of core:RAM:mem:p0 is <span class="number">1</span>, current assignments:</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-69</span>] <span class="string">&#x27;load&#x27;</span> operation (<span class="string">&#x27;mem_load&#x27;</span>, bottleneck.c:<span class="number">62</span>) on <span class="built_in">array</span> <span class="string">&#x27;mem&#x27;</span>,</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-69</span>] The resource limit of core:RAM:mem:p1 is <span class="number">1</span>, current assignments:</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-69</span>] <span class="string">&#x27;load&#x27;</span> operation (<span class="string">&#x27;mem_load_1&#x27;</span>, bottleneck.c:<span class="number">62</span>) on <span class="built_in">array</span> <span class="string">&#x27;mem&#x27;</span>,</span><br><span class="line">INFO: [SCHED <span class="number">204</span><span class="number">-61</span>] Pipelining result: Target II: <span class="number">1</span>, Final II: <span class="number">2</span>, Depth: <span class="number">3.</span></span><br></pre></td></tr></table></figure><p>在此示例中，Vivado HLS 声明它无法达成指定的初始时间间隔 (II) 值 1，因为<u>它受内存端口所限</u>，无法在内存上调度 load（读取）操作 (mem_load_2)。以上消息指出了第 62 行上的 mem_load 操作所使用的“core:RAM:mem:p0 is 1”的资源限制。BRAM 的第 2 个端口同样仅含 1 项资源，该资源同样供 mem_load_1 操作使用。由于存在此内存端口争用，Vivado HLS 报告的最终 II 为 2，而不是所期望的值 1。</p><p>此问题通常是由数组所导致的。数组作为最多只含有 2 个数据端口的 BRAM 来实现。这可能限制读写（或加载&#x2F;存储）密集型算法的吞吐量。通过将该数组（单一 BRAM 资源）拆分为多个更小的数组（多个 BRAM）从而有效增加端口数量，即可改善带宽。</p><p>数组可使用 ARRAY_PARTITION 指令来进行分区。Vivado HLS 可提供 3 种类型的数组分区，如下图所示。这 3 种分区样式分别是：</p><ul><li>block：原始数组分割为原始数组的连续元素块（大小相同）。</li><li>cyclic：原始数组分割多个大小相同的块，这些块交织成原始数组的元素。</li><li>complete：默认操作是将数组按其独立元素进行拆分。这对应于将内存解析为寄存器。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281438234.png" alt="image-20230328143809185"></p><p>对于 block 和 cyclic 分区，factor 选项可指定要创建的数组数量。在前图中，使用因子 2，即将数组分割为 2 个更小的数字。如果数组的元素数量并非该因子的整数倍，那么最后一个数组所含元素数量较少。</p><p>对多维数组进行分区时，dimension 选项可用于指定对哪个维度进行分区。下图显示了使用 dimension 选项对以下代码示例进行分区的方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    <span class="type">int</span> my_array[<span class="number">10</span>][<span class="number">6</span>][<span class="number">4</span>];</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此图中的示例演示了如何通过对 dimension 3 进行分区来生成 4 个独立数组，以及如何对 dimension 1 进行分组以生成 10 个独立分区。如果针对 dimension 指定 0，则将对所有维度进行分区。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281440335.png" alt="image-20230328144017300"></p><h5 id="自动数组分区"><a href="#自动数组分区" class="headerlink" title="自动数组分区"></a>自动数组分区</h5><p>config_array_partition 配置可根据元素数量判定数组的自动分区方式。此配置可通过菜单“Solution” →“Solution Settings” → “General” → “Add” → “config_array_partition”访问。</p><p>通过 throughput_driven 选项可对分区阈值进行调整，并且可完全实现自动分区。选中 throughput_driven 选项时，<u>Vivado HLS 会自动对数组进行分区以实现指定的吞吐量。</u></p><h4 id="与Vivado-HLS之间的依赖关系"><a href="#与Vivado-HLS之间的依赖关系" class="headerlink" title="与Vivado HLS之间的依赖关系"></a>与Vivado HLS之间的依赖关系</h4><p>Vivado HLS 会构造对应于 C 语言源代码的硬件数据路径。</p><p>如果没有流水线指令，将按顺序执行，并且不考虑任何依赖关系。但对设计进行流水线时，该工具仍需对 Vivado HLS生成的硬件的处理器架构中发现的依赖关系进行处理。</p><p>数据依赖关系或内存依赖关系的典型用例是在完成上一次读操作或写操作后再次发生读操作或写操作。</p><ul><li><p>先写后读 (RAW) 操作也称为真性依赖关系，它表示指令（及其读取&#x2F;使用的数据）从属于前一次操作的结果。</p><ul><li>I1: t &#x3D; a * b;</li><li>I2: c &#x3D; t + 1;</li></ul><p>语句 I2 中的读操作取决于语句 I1 中的 t 的写操作。如果对指令进行重新排序，它会使用 t 的前一个值，导致结果错误。</p></li><li><p>先读后写 (WAR) 操作也称为反依赖关系，它表示当前一条指令完成数据读取后，下一条指令才能更新寄存器或内存（通过写操作）。</p><ul><li>I1: b &#x3D; t + a;</li><li>I2: t &#x3D; 3;</li></ul><p>语句 I2 中的写操作无法在语句 I1 之前执行，否则 b 的结果无效。</p></li><li><p>先写后写 (WAW) 依赖关系表示必须按特定顺序写入寄存器或内存，否则可能破坏其它指令。</p><ul><li>I1: t &#x3D; a * b;</li><li>I2: c &#x3D; t + 1;</li><li>I3: t &#x3D; 1;</li></ul><p>语句 I3 中的写操作必须晚于语句 I1 中的写操作。否则，语句 I2 结果将出错。</p></li><li><p>先读后读不含任何依赖关系，因为只要变量未声明为volatile，即可随意对指令进行重新排序。如果变量声明为volatile，则必须保留指令顺序不变。</p></li></ul><p>例如，生成流水线时，工具需确保后续阶段读取的寄存器或内存位置没有被之前的写操作修改。这属于真性依赖关系或先写后读 (RAW) 依赖关系。具体示例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">top</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> t,c;</span><br><span class="line">    I1: t = a * b;</span><br><span class="line">    I2: c = t + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在语句 I1 完成前，无法对语句 I2 求值，因为与 t 变量之间存在依赖关系。在硬件中，如果乘法需耗时 3 个时钟周期，那么 I2 将发生等同于此时间量的延迟。如果对以上函数进行流水线化，那么 HLS 会将其检测为真性依赖关系，并对操作进行相应调度，因此函数可按 II &#x3D;1 来运行，但Latency无法进行优化。</p><p>当此示例应用于数组而不仅是变量时，就会出现内存依赖关系。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">top</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">1</span>,rnext,m,i,out;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> mem[<span class="number">256</span>];</span><br><span class="line">    L1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">254</span>;i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE II=1</span></span><br><span class="line">        I1: m = r * a; mem[i+<span class="number">1</span>] = m; <span class="comment">// line 7</span></span><br><span class="line">        I2: rnext = mem[i]; r = rnext; <span class="comment">// line 8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上示例中，L1 循环的调度导致出现调度警告消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WARNING: [SCHED 204-68] Unable to enforce a carried dependency constraint (II = 1, distance = 1) between &#x27;store&#x27; operation (top.cpp:7) of variable &#x27;m&#x27;, top.cpp:7 on array &#x27;mem&#x27; and &#x27;load&#x27; operation (&#x27;rnext&#x27;, top.cpp:8) on array &#x27;mem&#x27;.</span><br><span class="line">INFO: [SCHED 204-61] Pipelining result: Target II: 1, Final II: 2, Depth: 3.</span><br></pre></td></tr></table></figure><p>只要写入的索引不同于读取的索引，那么循环的同一次迭代内就不会发生任何问题。而 2 条指令可同时并行执行。但请观测多次迭代中的读写操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Iteration for i=0</span></span><br><span class="line">I1: m = r * a; mem[<span class="number">1</span>] = m; <span class="comment">// line 7</span></span><br><span class="line">I2: rnext = mem[<span class="number">0</span>]; r = rnext; <span class="comment">// line 8</span></span><br><span class="line"><span class="comment">// Iteration for i=1</span></span><br><span class="line">I1: m = r * a; mem[<span class="number">2</span>] = m; <span class="comment">// line 7</span></span><br><span class="line">I2: rnext = mem[<span class="number">1</span>]; r = rnext; <span class="comment">// line 8</span></span><br><span class="line"><span class="comment">// Iteration for i=2</span></span><br><span class="line">I1: m = r * a; mem[<span class="number">3</span>] = m; <span class="comment">// line 7</span></span><br><span class="line">I2: rnext = mem[<span class="number">2</span>]; r = rnext; <span class="comment">// line 8</span></span><br></pre></td></tr></table></figure><p>当考虑到 2 次连续迭代时，来自 I1 语句的乘法结果 m（时延 &#x3D; 2）将写入某一位置，而循环的下一次迭代的 I2 语句将把位于该位置的结果读取到 rnext 中。在此情况下，存在 RAW 依赖关系，因为上一次计算的写操作完成后，下一次循环迭代才能开始读取 mem[i]。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281459662.png" alt="image-20230328145952611"></p><p>请注意，如果增大时钟频率，那么乘法器将需要更多流水线阶段，从而导致时延增加。这也将迫使 II 增大。</p><p>请注意以下代码，其中操作已发生交换，导致功能发生更改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">top</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r,m,i;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> mem[<span class="number">256</span>];</span><br><span class="line">    L1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">254</span>;i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE II=1</span></span><br><span class="line">        I1: r = mem[i]; <span class="comment">// line 7</span></span><br><span class="line">        I2: m = r * a , mem[i+<span class="number">1</span>]=m; <span class="comment">// line 8</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调度警告为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO: [SCHED <span class="number">204</span><span class="number">-61</span>] Pipelining loop <span class="string">&#x27;L1&#x27;</span>.</span><br><span class="line">WARNING: [SCHED <span class="number">204</span><span class="number">-68</span>] Unable to enforce a carried dependency <span class="title function_">constraint</span> <span class="params">(II = <span class="number">1</span>, distance = <span class="number">1</span>)</span> between &#x27;store&#x27; <span class="title function_">operation</span> <span class="params">(top.cpp:<span class="number">8</span>)</span> of variable &#x27;m&#x27;, top.cpp:8 on <span class="built_in">array</span> &#x27;mem&#x27; and &#x27;load&#x27; <span class="title function_">operation</span> <span class="params">(<span class="string">&#x27;r&#x27;</span>, top.cpp:<span class="number">7</span>)</span> on <span class="built_in">array</span> &#x27;mem&#x27;.</span><br><span class="line">WARNING: [SCHED 204-68] Unable to enforce a carried dependency <span class="title function_">constraint</span> <span class="params">(II = <span class="number">2</span>, distance = <span class="number">1</span>)</span> between &#x27;store&#x27; <span class="title function_">operation</span> <span class="params">(top.cpp:<span class="number">8</span>)</span> of variable &#x27;m&#x27;, top.cpp:8 on <span class="built_in">array</span> &#x27;mem&#x27; and &#x27;load&#x27; <span class="title function_">operation</span> <span class="params">(<span class="string">&#x27;r&#x27;</span>, top.cpp:<span class="number">7</span>)</span> on <span class="built_in">array</span> &#x27;mem&#x27;.</span><br><span class="line">WARNING: [SCHED 204-68] Unable to enforce a carried dependency <span class="title function_">constraint</span> <span class="params">(II = <span class="number">3</span>, distance = <span class="number">1</span>)</span> between &#x27;store&#x27; <span class="title function_">operation</span> <span class="params">(top.cpp:<span class="number">8</span>)</span> of variable &#x27;m&#x27;, top.cpp:8 on <span class="built_in">array</span> &#x27;mem&#x27; and &#x27;load&#x27; <span class="title function_">operation</span> <span class="params">(<span class="string">&#x27;r&#x27;</span>, top.cpp:<span class="number">7</span>)</span> on <span class="built_in">array</span> &#x27;mem&#x27;.</span><br><span class="line">INFO: [SCHED 204-61] Pipelining result: Target II: 1, Final II: 4, Depth: 4.</span><br></pre></td></tr></table></figure><p>请观测多次迭代中的连续读写操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Iteration with i=<span class="number">0</span></span><br><span class="line">I1: r = mem[<span class="number">0</span>]; <span class="comment">// line 7</span></span><br><span class="line">I2: m = r * a , mem[<span class="number">1</span>]=m; <span class="comment">// line 8</span></span><br><span class="line">Iteration with i=<span class="number">1</span></span><br><span class="line">I1: r = mem[<span class="number">1</span>]; <span class="comment">// line 7</span></span><br><span class="line">I2: m = r * a , mem[<span class="number">2</span>]=m; <span class="comment">// line 8</span></span><br><span class="line">Iteration with i=<span class="number">2</span></span><br><span class="line">I1: r = mem[<span class="number">2</span>]; <span class="comment">// line 7</span></span><br><span class="line">I2: m = r * a , mem[<span class="number">3</span>]=m; <span class="comment">// line 8</span></span><br></pre></td></tr></table></figure><p>所需 II 延长，因为存在如下 RAW 依赖关系，从 mem[i] 读取 r、执行乘法并写入 mem[i+1]。</p><h4 id="移除假性依赖关系以改善循环流水线化"><a href="#移除假性依赖关系以改善循环流水线化" class="headerlink" title="移除假性依赖关系以改善循环流水线化"></a>移除假性依赖关系以改善循环流水线化</h4><p>假性依赖关系，即编译器过于保守时出现的依赖关系。这些依赖关系在真实代码中并不存在，但无法由编译器来判定。这些依赖关系可能阻碍循环流水线化。</p><p>假性依赖关系如下示例所示。在此示例中，针对相同循环迭代内的 2 个不同地址执行读写访问。这 2 个地址均依赖于输入数据，可指向 hist 数组中的任一元素。有鉴于此，Vivado HLS 假定这 2 个地址可访问同一个位置。因此，它安排按交替周期对数组执行读写操作，导致循环 II 为 2。<u>但代码显示 hist[old] 和 hist[val] 永远无法访问相同地址，因为这两者包含在 if(old &#x3D;&#x3D; val) 条件的 else 分支中。</u></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">histogram</span><span class="params">(<span class="type">int</span> in[INPUT SIZE], <span class="type">int</span> hist[VALUE SIZE])</span> f</span><br><span class="line">    <span class="type">int</span> acc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, val;</span><br><span class="line">    <span class="type">int</span> old = in[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; INPUT SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE II=1</span></span><br><span class="line">        val = in[i];</span><br><span class="line">        <span class="keyword">if</span>(old == val)</span><br><span class="line">        &#123;</span><br><span class="line">        acc = acc + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            hist[old] = acc;</span><br><span class="line">            acc = hist[val] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        old = val;</span><br><span class="line">    &#125;</span><br><span class="line">    hist[old] = acc;</span><br></pre></td></tr></table></figure><p>为克服这一缺陷，我们可以使用 DEPENDENCE 指令，为 Vivado HLS 提供这些依赖关系的附加信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">histogram</span><span class="params">(<span class="type">int</span> in[INPUT SIZE], <span class="type">int</span> hist[VALUE SIZE])</span> &#123;</span><br><span class="line">    <span class="type">int</span> acc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, val;</span><br><span class="line">    <span class="type">int</span> old = in[<span class="number">0</span>];</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS DEPENDENCE variable=hist intra RAW false</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; INPUT SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE II=1</span></span><br><span class="line">        val = in[i];</span><br><span class="line">        <span class="keyword">if</span>(old == val)</span><br><span class="line">        &#123;</span><br><span class="line">        acc = acc + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            hist[old] = acc;</span><br><span class="line">            acc = hist[val] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        old = val;</span><br><span class="line">    &#125;</span><br><span class="line">    hist[old] = acc;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE：在实际上依赖关系并非 FALSE 的情况下指定 FALSE 依赖关系可能导致硬件错误。指定依赖关系前，请确认它是否正确（TRUE 或 FALSE）。</p></blockquote><p>指定依赖关系时，有 2 种主要类型：</p><ul><li><p>Inter：指定相同循环的不同迭代之间的依赖关系。</p><p>如指定为 FALSE，则当循环已流水线化、已展开或已部分展开时，允许 Vivado HLS 并行执行运算，指定为 TRUE 时则阻止此类并行运算。</p></li><li><p>Intra：指定循环的相同迭代内的依赖关系，例如，在相同迭代开始和结束时访问的数组。</p><p>当 intra 依赖关系指定为 FALSE 时，Vivado HLS 可在循环内自由移动运算、提升运算移动性，从而可能改善性能或面积。当此依赖关系指定为 TRUE 时，必须按指定顺序执行运算。</p></li></ul><h4 id="标量依赖关系"><a href="#标量依赖关系" class="headerlink" title="标量依赖关系"></a>标量依赖关系</h4><p>部分标量依赖关系较难以解析，且通常需要更改源代码。标量数据依赖关系如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) a -= b;</span><br><span class="line">    <span class="keyword">else</span> b -= a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此循环的当前迭代完成 a 和 b 的更新值计算后才能启动下一次迭代，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281509897.png" alt="image-20230328150950867"></p><p>如果必须得到上一次循环迭代结果后才能开始当前迭代，则无法进行循环流水线化。如果 Vivado HLS 无法以指定的启动时间间隔进行流水线化，那么它会增加启动时间间隔。如果完全无法流水线化，则它会停止流水线化并继续输出非流水线化设计。</p><h4 id="最优化循环展开以改善流水线"><a href="#最优化循环展开以改善流水线" class="headerlink" title="最优化循环展开以改善流水线"></a>最优化循环展开以改善流水线</h4><p>默认情况下，在 Vivado HLS 中循环保持处于收起状态。这些收起的循环会生成硬件资源，供循环的每次迭代使用。虽然这样可以节省硬件资源，但有时可能导致性能瓶颈。</p><p>Vivado HLS 可提供使用 UNROLL 指令来展开或部分展开 for 循环的功能。</p><p>下图显示了循环展开的优势以及展开循环时必须考量的影响。此示例假定 a[i]、b[i] 和 c[i] 数组已映射到 BRAM 。此示例显示只需直接应用UNROLL约束即可同时创建大批不同的实现方式。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281515036.png" alt="image-20230328151501979"></p><ul><li>循环未展开：当循环未展开时，每次迭代都在单独的时钟周期内执行。此实现需耗时 4 个时钟周期，只需 1 个乘法器并且每个 BRAM 均可为单端口 BRAM。</li><li>循环部分展开：在此示例中，循环已按因子 2 进行展开。此实现需 2 个乘法器和双端口 RAM ，以支持在同一个时钟周期内读取或写入每个 RAM。但此实现只需 2 个时钟周期即可完成：相比于循环未展开的版本，启动时间间隔和时延均减半。</li><li>循环全部展开：在完全展开的版本中，可在单一时钟周期内执行所有循环操作。但此实现需 4 个乘法器。更重要的是，此实现需在同一个时钟周期内执行 4 次读操作和 4 次写操作的功能。由于 BRAM 最多仅有 2 个端口，因此该实现方式需对数组进行分区。</li></ul><p>要执行循环展开，可向设计中的每个循环应用 UNROLL 指令。或者，可向函数应用 UNROLL 指令，以展开函数作用域内的所有循环。</p><p>如果循环已完全展开，那么只要数据依赖关系和资源允许，即可并行执行所有操作。<u>如果某一循环迭代中的操作需要上一次循环的结果，则这两次迭代无法并行执行，但一旦数据可用即可立即执行。</u></p><p>以下示例演示了如何使用循环展开来创建最优化的设计。在此示例中，数据作为交织式通道存储在数组中。如果按 II&#x3D;1 来对循环进行流水线化，则每经过 8 个时钟周期才会对<u>每个通道</u>执行依次读取和写入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array Order : 0 1 2 3 4 5 6 7 8 9 10 etc. 16</span></span><br><span class="line">etc...</span><br><span class="line"><span class="comment">// Sample Order: A0 B0 C0 D0 E0 F0 G0 H0 A1 B1 C1 etc. A2</span></span><br><span class="line">etc...</span><br><span class="line"><span class="comment">// Output Order: A0 B0 C0 D0 E0 F0 G0 H0 A0+A1 B0+B1 C0+C1 etc. A0+A1+A2</span></span><br><span class="line">etc...</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHANNELS 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAMPLES 400</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N CHANNELS * SAMPLES</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(<span class="type">dout_t</span> d_out[N], <span class="type">din_t</span> d_in[N])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, rem;</span><br><span class="line">    <span class="comment">// Store accumulated data</span></span><br><span class="line">    <span class="type">static</span> <span class="type">dacc_t</span> acc[CHANNELS];</span><br><span class="line">    <span class="comment">// Accumulate each channel</span></span><br><span class="line">    For_Loop: <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        rem=i%CHANNELS;</span><br><span class="line">        acc[rem] = acc[rem] + d_in[i];</span><br><span class="line">        d_out[i] = acc[rem];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按 factor 为 8 来对循环进行部分展开将允许并行处理每个通道（每 8 个样本为一组），前提是输入数组和输出数组同样按 cyclic 方式进行分区，以便在每个时钟周期内进行多次访问。如果此循环同时采用 rewind 选项来进行流水线化，<u>那么此设计将持续并行处理全部 8 个通道</u>，前提是要以流水线方式（即在顶层或者在数据流区域中）调用这些通道。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(<span class="type">dout_t</span> d_out[N], <span class="type">din_t</span> d_in[N])</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_PARTITION variable=d_i cyclic factor=8 dim=1 partition</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_PARTITION variable=d_o cyclic factor=8 dim=1 partition</span></span><br><span class="line"><span class="type">int</span> i, rem;</span><br><span class="line">    <span class="comment">// Store accumulated data</span></span><br><span class="line">    <span class="type">static</span> <span class="type">dacc_t</span> acc[CHANNELS];</span><br><span class="line">    <span class="comment">// Accumulate each channel</span></span><br><span class="line">    For_Loop: <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> HLS PIPELINE rewind</span></span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> HLS UNROLL factor=8</span></span><br><span class="line">        rem=i%CHANNELS;</span><br><span class="line">        acc[rem] = acc[rem] + d_in[i];</span><br><span class="line">        d_out[i] = acc[rem];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分循环展开不要求展开因子为最大迭代计数的整数倍。Vivado HLS 会添加出口检查以确保部分展开的循环的功能与原始循环相同。例如，给定以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    a[i] = b[i] + c[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按因子 2 展开的循环可将代码有效变换为如下示例所示形式，其中 break 构造器用于确保功能保持不变：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">    a[i] = b[i] + c[i];</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span> &gt;= N) <span class="keyword">break</span>;</span><br><span class="line">    a[i+<span class="number">1</span>] = b[i+<span class="number">1</span>] + c[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 N 为变量，Vivado HLS 可能无法判定其最大值（它可能受输入端口驱动）。<u>如果展开因子（在此例中为 2）是最大迭代计数 N 的整数因子，那么 skip_exit_check 选项会移除出口检查和关联的逻辑。</u>展开的效果现在可表示为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">    a[i] = b[i] + c[i];</span><br><span class="line">    a[i+<span class="number">1</span>] = b[i+<span class="number">1</span>] + c[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这有助于最大限度降低面积并简化控制逻辑。</p><h4 id="利用任务级别并行化：数据流最优化"><a href="#利用任务级别并行化：数据流最优化" class="headerlink" title="利用任务级别并行化：数据流最优化"></a>利用任务级别并行化：数据流最优化</h4><p>数据流最优化对于一系列顺序任务（例如，函数或循环）很实用，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281531566.png" alt="image-20230328153113527"></p><p>上图显示了连续 3 个任务的特定情况，但通信结构比所示情况可能更复杂。</p><p>通过使用这一系列顺序任务，数据流最优化可以创建并发进程架构，如下所示。数据流最优化是可用于改进设计吞吐量和时延的强大方法。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281531888.png" alt="image-20230328153145851"></p><p>下图显示了数据流最优化允许重叠执行任务的方式，由此可提升总体设计吞吐量并降低时延。</p><p>在以下图示和示例中，(A) 表示无数据流最优化的情况。实现需经历 8 个周期后，func_A 才能处理新输入，还需要 8 个周期后 func_C 才能写入输出。</p><p>对于同样的示例，(B) 表示应用数据流最优化的情况。func_A 每隔 3 个时钟周期即可开始处理新输入（启动时间间隔更低），只需 5 个时钟即可输出最终值（时延更短）。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281532126.png" alt="image-20230328153243077"></p><p>这种类型的并行化势必伴随着硬件开销。将某个特定区域（例如，函数主体或循环主体）识别为要应用数据流最优化的区域时，Vivado HLS 会分析此函数主体或循环主体，并创建独立通道以对数据流进行建模，用于将每项任务的结果存储在数据流区域中。这些通道对于标量变量而言可能只是简单的 FIFO，而对于数组之类非标量变量，则可能是乒乓缓存。其中每个通道还都包含用于指示 FIFO 或乒乓缓存已满或已空的信号。这些信号表示完全数据驱动的握手接口。通过采用独立 FIFO 和&#x2F;或乒乓缓存，Vivado HLS 可使每项任务按其自己的步调执行，吞吐量仅受输入和输出缓存的可用性限制。由此实现的任务执行交织比正常流水线化实现更好，但导致增加 FIFO 或 BRAM 寄存器（用于乒乓缓存）成本。前图所示的数据流区域实现的结构与下图中相同示例所示结构相同。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281535923.png" alt="image-20230328153521883"></p><p>数据流最优化的性能可能比静态流水线化解决方案的性能更好。它将严格集中控制的流水线停滞理念替换为更灵活的分布式握手架构，后者使用 FIFO 或乒乓缓存。</p><h3 id="时延最优化"><a href="#时延最优化" class="headerlink" title="时延最优化"></a>时延最优化</h3><p>主要思路如下：首先使用时延约束指明HLS工具的优化方向，然后针对循环进行优化，是否可以对循环进行合并以减少时延，是否可以将嵌套的循环扁平化，避免进出循环的时延。</p><h4 id="使用时延约束"><a href="#使用时延约束" class="headerlink" title="使用时延约束"></a>使用时延约束</h4><p>Vivado HLS 支持对任意作用域使用时延约束。时延约束是使用 LATENCY 指令来指定的。</p><p>对作用域施加最大和&#x2F;或最小 LATENCY 约束时，Vivado HLS 会尝试确保函数内的所有运算都在指定的时钟周期范围内完成。</p><p>应用于循环的时延指令可指定单次循环迭代所需的时延：它指定循环主体的时延，如以下示例所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loop_A: <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS latency max=10</span></span><br><span class="line">    ..Loop Body...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要限制所有循环迭代的总时延，应将时延指令应用于包含整个循环的区域，如以下示例所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Region_All_Loop_A: &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS latency max=10</span></span><br><span class="line">    Loop_A: <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ..Loop Body...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此情况下，即使展开循环，时延指令仍会对所有循环操作设置最大限制。</p><p>如果 Vivado HLS 无法满足最大时延约束，它会放宽时延约束，并尝试尽可能实现最佳结果。</p><p>如果设置最小时延约束，并且 Vivado HLS 生成的设计时延低于所需的最小值，它会插入虚拟时钟周期以满足最小时延（笔者理解这边就是强行打拍）。</p><h4 id="合并顺序循环以减少时延"><a href="#合并顺序循环以减少时延" class="headerlink" title="合并顺序循环以减少时延"></a>合并顺序循环以减少时延</h4><p>所有收起的循环都在设计 FSM 中指明并创建至少一种状态。当存在多个顺序循环时，它可能会创建其它不必要的时钟周期，并阻止进一步的最优化。</p><p>下图显示了一个简单的示例，其中看似直观的编码样式对 RTL 设计的性能产生了负面影响。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281542447.png" alt="image-20230328154214397"></p><p>在上图中，(A) 显示了默认情况下设计中的每个收起的循环如何在 FSM 中创建至少一种状态。在这些状态之间移动需耗费多个时钟周期：假设每个循环迭代需要 1 个时钟周期，则执行两个循环总共需要 11 个周期：</p><ul><li>需要 1 个时钟周期进入 ADD 循环。</li><li>需要 4 个时钟周期执行加法循环。</li><li>需要 1 个时钟周期退出 ADD 并进入 SUB。</li><li>需要 4 个时钟周期执行 SUB 循环。</li><li>需要 1 个时钟周期退出 SUB 循环。</li><li>总共 11 个时钟周期。</li></ul><p>在这个简单的示例中，很明显，ADD 循环中的 else 分支也可以解决该问题，但是在更复杂的示例中，它可能不那么明显，更直观的编码方式可能具有更大的优势。</p><p>LOOP_MERGE 最优化指令用于自动合并循环。LOOP_MERGE 指令将尝试合并应用范围内的所有循环。在上面的示例中，合并循环将创建类似于上图 (B) 所示的控制结构，完成它只需要 6 个时钟周期。</p><p>合并循环允许将循环内的逻辑组合在一起进行最优化。在上面的示例中，使用真双口 BRAM 可以并行执行加减运算。</p><p>当前在 Vivado HLS 中合并循环具有以下限制：</p><ul><li>如果循环边界都是变量，则它们必须具有相同的值。</li><li>如果循环边界为常量，那么最大常量值用作为合并循环的边界。</li><li>具有变量边界和常量边界的循环无法合并。</li><li>要合并的循环之间的代码不得产生不同结果：多次执行此代码应生成相同的结果（允许使用 a &#x3D; b，不允许使用 a &#x3D; a + 1）。</li><li>包含 FIFO 访问的循环无法合并：合并将更改 FIFO 上的读写顺序：这些循环必须始终按顺序进行。</li></ul><h4 id="将嵌套循环扁平化以改善时延"><a href="#将嵌套循环扁平化以改善时延" class="headerlink" title="将嵌套循环扁平化以改善时延"></a>将嵌套循环扁平化以改善时延</h4><p>已展开的嵌套循环之间的移动需要额外的时钟周期，这与前述章节中所述的连续循环间移动方式相似。从外层循环移至内层循环需要一个时钟周期，从内层循环移至外层循环同样如此。</p><p>在此处所示小型示例中，这暗示执行 Outer 循环需 200 个额外时钟周期。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> foo_top &#123; a, b, c, d&#125; &#123;</span><br><span class="line">    ...</span><br><span class="line">    Outer: <span class="keyword">while</span>(j&lt;<span class="number">100</span>)&#123;</span><br><span class="line">        Inner: <span class="keyword">while</span>(i&lt;<span class="number">6</span>)&#123; <span class="comment">// 1 cycle to enter inner</span></span><br><span class="line">            ...</span><br><span class="line">            LOOP_BODY</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="comment">// 1 cycle to exit inner</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vivado HLS 提供的 set_directive_loop_flatten 命令允许将已标记为完美和半完美的嵌套循环扁平化，这样就无需重新编码来提升硬件性能，并且还可减少执行循环中的运算所需的周期数。</p><ul><li>完美循环嵌套：仅限最内层的循环才有循环主体内容，逻辑语句之间未指定任何逻辑，所有循环边界均为常量。</li><li>半完美循环嵌套：仅限最内层的循环才有循环主体内容，逻辑语句之间未指定任何逻辑，<u>除最外层循环外</u>所有循环边界均为常量。</li></ul><p>对于非完美循环嵌套，即内层循环具有变量边界或者循环主体未完全包含在内层循环内，设计人员应尝试重构代码或者将循环主体中的循环展开以创建完美循环嵌套。</p><p>将该指令应用于一组嵌套循环时，应将其应用于最内层循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_directive_loop_flatten top/Inner</span><br></pre></td></tr></table></figure><p>循环扁平化还可使用 GUI 中的“Vivado HLS Directive Editor”选项执行，可将其单独应用于各循环，或者通过在函数级别应用该指令来将其应用于函数中的所有循环。</p><h3 id="面积最优化"><a href="#面积最优化" class="headerlink" title="面积最优化"></a>面积最优化</h3><p>主要可以从下面几个角度考虑：更精准地对数据的类型和位宽进行设置，避免资源的浪费；通过函数的内联来复用模块；通过对函数进行精准的例化来减少函数的通用性，降低资源占用；对于数组而言，首先考虑数据的存取需求，在满足吞吐率的情况下考虑是否可以对数据进行合并，节省存储的 BRAM 资源；此外，对一些复杂运算而言，通过显式制定硬件核可以节省较多的片上逻辑资源，并改善性能。</p><h4 id="数据类型和位宽"><a href="#数据类型和位宽" class="headerlink" title="数据类型和位宽"></a>数据类型和位宽</h4><p>C 语言函数中的变量位宽会直接影响 RTL 实现中使用的存储元素和运算符。如果变量只需 12 位但指定为整数类型（32 位），这会导致HLS使用更大且运算更慢的 32 位运算符，从而减少一个时钟周期内可执行的运算数量，并可能增大启动时间间隔和时延。为此请特别注意如下几点：</p><ul><li>使用适合数据类型的相应精度。</li><li>确认要使用 RAM 还是寄存器来实现数组。任何过大的元素都会影响面积，从而导致硬件资源浪费。</li><li>请特别注意乘法、除法、取模或其它复杂算术运算。如果这些变量过大，则会对面积和性能都产生负面影响。</li></ul><h4 id="函数内联"><a href="#函数内联" class="headerlink" title="函数内联"></a>函数内联</h4><p>函数内联会移除函数层级。函数可使用 INLINE 指令进行内联。内联函数可以支持函数中的逻辑共享，以更高效的方式调用函数中的逻辑，从而改善面积。Vivado HLS 也会自动执行此类型的函数内联。小型函数可自动内联。</p><p>内联支持对函数共享进行更有效的控制。对于要共享的函数，必须在相同层级内使用。在此代码示例中，foo_top 函数会对 foo 进行 2 次调用，并调用 foo_sub 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foo_sub (p, q) &#123;</span><br><span class="line">    <span class="type">int</span> q1 = q + <span class="number">10</span>;</span><br><span class="line">    foo(p1,q); <span class="comment">// foo_3</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> foo_top &#123; a, b, c, d&#125; &#123;</span><br><span class="line">    ...</span><br><span class="line">    foo(a,b); <span class="comment">//foo_1</span></span><br><span class="line">    foo(a,c); <span class="comment">//foo_2</span></span><br><span class="line">    foo_sub(a,d);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数 foo_sub 内联并使用 ALLOCATION 指令指定仅使用 foo 函数的 1 个实例，这样生成的设计仅含 1 个 foo 函数的实例：面积为以上示例的三分之一。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo_sub (p, q) &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS INLINE</span></span><br><span class="line">    <span class="type">int</span> q1 = q + <span class="number">10</span>;</span><br><span class="line">    foo(p1,q); <span class="comment">// foo_3</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> foo_top &#123; a, b, c, d&#125; &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ALLOCATION instances=foo limit=1 function</span></span><br><span class="line">    ...</span><br><span class="line">    foo(a,b); <span class="comment">//foo_1</span></span><br><span class="line">    foo(a,c); <span class="comment">//foo_2</span></span><br><span class="line">    foo_sub(a,d);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>INLINE 指令可选择使用 recursive 选项来<u>允许位于指定函数下层的所有函数以递归方式进行内联</u>。如果对顶层函数使用 recursive 选项，那么将移除设计中的所有函数层级。</p><p>可选择对函数应用 INLINE off 选项以阻止对这些函数进行内联。该选项可用于阻止 Vivado HLS 自动进行函数内联。</p><p>INLINE 指令是大幅修改代码结构而不对源代码执行任何实际修改的强大方法，并可提供强大的架构探索方法。</p><h4 id="将大量数组映射到单一大型数组"><a href="#将大量数组映射到单一大型数组" class="headerlink" title="将大量数组映射到单一大型数组"></a>将大量数组映射到单一大型数组</h4><p>当 C 语言代码中存在大量小型数组时，将其映射到单一大型数组通常可减少所需的 BRAM 数量。</p><p>受器件支持的前提下，每个数组都映射到 1 个块 RAM 或 UltraRAM。任一 FPGA 中提供的基本块 RAM 单元为 18K。如有大量小型数组且占用资源不足 18K，那么为了更有效地利用 BRAM 资源，可将大量小型数组映射到单一大型数组。如果 BRAM 大于 18K，则会自动将其映射到多个 18K 单元。在综合报告中，请复查“Utilization Report” →“Details” → “Memory”，以便详细了解设计中 BRAM 的使用情况。</p><p>ARRAY_MAP 指令支持通过 2 种方式将多个小型数组映射到单一大型数组：</p><ul><li>水平映射：从数组的深度方向进行合并，通过并置原始数组来创建新阵列。实际上，这作为含更多元素的单一数组来实现。</li><li>垂直映射：从数组的位宽方向进行合并，通过并置数组中的字词来创建新阵列。实际上，这作为含较大位宽的单一数组来实现。</li></ul><h5 id="水平数组映射"><a href="#水平数组映射" class="headerlink" title="水平数组映射"></a>水平数组映射</h5><p>以下代码示例包含 2 个数组，这些数组将生成 2 个 RAM 组件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    int8 array1[M];</span><br><span class="line">    int12 array2[N];</span><br><span class="line">    ...</span><br><span class="line">    loop_1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">        array1[i] = ...;</span><br><span class="line">        array2[i] = ...;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组 array1 和 array2 可组合为单一数组，在以下示例中指定为 array3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    int8 array1[M];</span><br><span class="line">    int12 array2[N];</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array1 instance=array3 horizontal</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array2 instance=array3 horizontal</span></span><br><span class="line">    ...</span><br><span class="line">    loop_1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">        array1[i] = ...;</span><br><span class="line">        array2[i] = ...;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中，ARRAY_MAP 指令按下图所示方式对数组进行变换。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281609395.png" alt="image-20230328160927354"></p><p>使用水平映射时，多个较小的数组将映射到单一较大的数组。映射从较大的数组中的位置 0 开始，并遵循指定命令的顺序执行映射。</p><p>使用下图所示的水平映射时，BRAM 中的实现如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281610573.png" alt="image-20230328161038533"></p><p>ARRAY_MAP 指令的 offset 选项用于指定使用 horizontal 选项时后续数组添加到的位置。重复先前示例，但反转命令顺序（先指定 array2，然后指定 array1）并添加 offset，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    int8 array1[M];</span><br><span class="line">    int12 array2[N];</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array2 instance=array3 horizontal</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array1 instance=array3 horizontal offset=2</span></span><br><span class="line">...</span><br><span class="line">loop_1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">    array1[i] = ...;</span><br><span class="line">    array2[i] = ...;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这将导致如下图所示的变换。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281613028.png" alt="image-20230328161332982"></p><p>映射后，新构成的数组（即以上示例中的 array3）可通过向映射到新实例的任意变量应用 RESOURCE 指令来定向到特定 BRAM 或 UltraRAM。</p><p>虽然水平映射可能导致使用的块 RAM 组件数量减少从而改善面积，但<u>它确实会影响吞吐量和性能</u>，因为当前 BRAM端口数量有所减少。为克服此限制，Vivado HLS 还提供了垂直映射。</p><h5 id="映射垂直数组"><a href="#映射垂直数组" class="headerlink" title="映射垂直数组"></a>映射垂直数组</h5><p>在垂直映射中，通过并置多个数组来生成位宽更高的单个数组。下图显示了应用垂直映射模式时，前述示例所发生的变化。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    int8 array1[M];</span><br><span class="line">    int12 array2[N];</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array2 instance=array3 vertical</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_MAP variable=array1 instance=array3 vertical</span></span><br><span class="line">    ...</span><br><span class="line">    loop_1: <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">        array1[i] = ...;</span><br><span class="line">        array2[i] = ...;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281615357.png" alt="image-20230328161554312"></p><p>在垂直映射中，按命令指定顺序并置各数组，指定的数组排序顺序为从 LSB 开始到 MSB 结束。完成垂直映射后，新组成的数组将在单一BRAM 组件内实现，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281616450.png" alt="image-20230328161631412"></p><h4 id="数组映射以及注意事项"><a href="#数组映射以及注意事项" class="headerlink" title="数组映射以及注意事项"></a>数组映射以及注意事项</h4><blockquote><p>NOTE：数组变换的优化指令在代码中放置的位置必须先于其它任何与数组相关的优化指令。</p></blockquote><p>要将元素从已分区的数组映射到含 horizontal 映射的单一数组中，必须在 ARRAY_MAP 指令中指定数组的每个要分区的元素。例如，以下 Tcl 命令用于对 accum 数组进行分区，并将生成的元素重新映射到一起。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_partition variable=m_accum cyclic factor=2 dim=1</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_partition variable=v_accum cyclic factor=2 dim=1</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_map variable=m_accum[0] instance=mv_accum horizontal</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_map variable=v_accum[0] instance=mv_accum horizontal</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_map variable=m_accum[1] instance=mv_accum_1 horizontal</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS array_map variable=v_accum[1] instance=mv_accum_1 horizontal</span></span><br></pre></td></tr></table></figure><p>可对全局数组进行映射。但生成的数组实例为全局实例，映射到该数组实例的任何局部数组都会变为全局数组。当不同函数的局部数组映射到同一目标数组时，目标数组实例就会变为全局实例。</p><h4 id="数组重塑"><a href="#数组重塑" class="headerlink" title="数组重塑"></a>数组重塑</h4><p>ARRAY_RESHAPE 指令将 ARRAY_PARTITIONING 与 ARRAY_MAP 的垂直模式相结合，用于减少 BRAM 数量，同时仍支持分区的有利特性：并行访问数据。</p><p>给定以下示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(...)</span> &#123;</span><br><span class="line">    <span class="type">int</span> array1[N];</span><br><span class="line">    <span class="type">int</span> array2[N];</span><br><span class="line">    <span class="type">int</span> array3[N];</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_RESHAPE variable=array1 block factor=2 dim=1</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_RESHAPE variable=array2 cycle factor=2 dim=1</span></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS ARRAY_RESHAPE variable=array3 complete dim=1</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ARRAY_RESHAPE 指令可将数组转换为下图所示形式。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281624025.png" alt="image-20230328162456971"></p><p>ARRAY_RESHAPE 指令支持在单一时钟周期内访问更多数据。只要能在单一时钟周期内访问更多数据，Vivado HLS 即可自动展开使用此数据的所有循环，前提是这样有助于提升吞吐量。循环可全部或部分展开以提高数据的吞吐率。此功能可使用 config_unroll 命令和 tripcount_threshold 选项来加以控制。在以下示例中，循环次数小于 16 的任何循环都将自动展开（前提是可提高吞吐量）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_unroll -tripcount_threshold <span class="number">16</span></span><br></pre></td></tr></table></figure><h4 id="函数例化"><a href="#函数例化" class="headerlink" title="函数例化"></a>函数例化</h4><p>函数例化是一种最优化技巧，不仅具有维持函数层级的面积优势，还可提供另一个强大的选项：在函数的特定实例上执行针对性局部最优化。这样可以简化围绕函数调用的控制逻辑，也可能改进时延和吞吐量。</p><p>鉴于调用函数时部分函数输入可能是常量，FUNCTION_INSTANTIATE 指令可借此简化周围控制结构，并生成进一步优化的、更小的函数块。这可通过示例来细化解释。</p><p>给定如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo_sub</span><span class="params">(<span class="type">bool</span> mode)</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS FUNCTION_INSTANTIATE variable=mode</span></span><br><span class="line">    <span class="keyword">if</span> (mode) &#123;</span><br><span class="line">    <span class="comment">// code segment 1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// code segment 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> foo()&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS FUNCTION_INSTANTIATE variable=select</span></span><br><span class="line">    foo_sub(<span class="literal">true</span>);</span><br><span class="line">    foo_sub(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，函数 foo_sub 的功能为执行单一重复性运算（根据 mode 是否为 true）。函数 foo_sub 的每个实例均以相同方式实现：这非常适合函数复用和面积最优化，但也意味着函数内部的控制逻辑必须更加复杂。</p><p>FUNCTION_INSTANTIATE 最优化允许对每个实例进行独立最优化，从而减少功能和面积。完成FUNCTION_INSTANTIATE 最优化后，以上代码可有效转换为 2 个独立函数，每个函数都针对模式的不同可能值来完成最优化，如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo_sub1</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// code segment 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">foo_sub2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// code segment 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">    foo_sub1();</span><br><span class="line">    foo_sub2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不进行大幅内联或代码修改的情况下，在不同层级使用该函数会导致函数难以共享，那么函数例化约束可提供改进面积的最佳方法：大量小型局部最优化的函数副本比大量无法共享的大型函数副本更有效。</p><h4 id="控制硬件资源"><a href="#控制硬件资源" class="headerlink" title="控制硬件资源"></a>控制硬件资源</h4><p>综合期间，Vivado HLS 会执行以下基本任务：</p><ul><li><p>首先，将 C、C++ 或 SystemC 语言源代码细化为包含运算符的内部数据库。</p><p>运算符表示 C 语言代码中的运算，如加法、乘法、数组读取和写入等。</p></li><li><p>然后，将运算符映射到实现硬件操作的核上。</p></li></ul><p>​核为用于创建设计的特定硬件组件（例如，加法器、乘法器、流水线化的乘法器和 BRAM）。</p><p>作为设计者，我们可以控制其中每个步骤，从而对硬件实现进行精细化的控制。</p><h5 id="限制运算符数量"><a href="#限制运算符数量" class="headerlink" title="限制运算符数量"></a>限制运算符数量</h5><p>显式限制运算符的数量以减小某些情况下所需的面积：Vivado HLS 的默认操作是首先最大限度提升性能。限制设计中的运算符数量是一项减小面积的实用技巧：<u>它通过强制共享运算来减小面积。</u></p><p>ALLOCATION 指令允许设计者限制设计中使用的运算符、核或函数数量。例如，名为 foo 的设计包含 317 次乘法，但FPGA 仅有 256 项乘法器资源 (DSP48)。以下所示 ALLOCATION 指令可指示 Vivado HLS 创建含最多 256 个乘法 (mul) 运算符的设计：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">dout_t</span> <span class="title function_">array_arith</span> <span class="params">(<span class="type">dio_t</span> d[<span class="number">317</span>])</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> acc;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS ALLOCATION instances=mul limit=256 operation</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">317</span>;i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS UNROLL</span></span><br><span class="line">        acc += acc * d[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NOTE：如果指定的 ALLOCATION 限制超出所需数量，Vivado HLS 会尝试使用此项限制指定的资源数量，导致减少共享量。</p></blockquote><p>设计者可使用 type 选项来指定 ALLOCATION 指令是否限制运算、核和函数数量。下表列出了可使用 ALLOCATION 指令控制的所有运算。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281638870.png" alt="image-20230328163850809"></p><h5 id="全局最大限度减少运算符"><a href="#全局最大限度减少运算符" class="headerlink" title="全局最大限度减少运算符"></a>全局最大限度减少运算符</h5><p>ALLOCATION 指令与所有其它指令一样，都是在某一作用域内指定的：函数、循环或区域。config_bind 配置允许在整个设计中最大限度减少运算符。</p><p>在设计中要最大限度减少运算符，可执行 config_bind 配置中的 min_op 选项。前表中列出的任意运算符均可按此方式加以限制。</p><p>应用配置后，它将应用于解决方案中执行的所有综合操作：如果关闭再重新打开解决方案，那么指定的配置仍适用于所有新综合运算。</p><p>随 config_bind 配置一起应用的任意配置均可使用 reset 选项来移除，或者使用 open_solution -reset 以打开解决方案。</p><h5 id="控制硬件核"><a href="#控制硬件核" class="headerlink" title="控制硬件核"></a>控制硬件核</h5><p>执行综合时，Vivado HLS 会使用由时钟指定的时序约束、由目标器件指定的延迟以及由您指定的任意指令来判定使用哪个核来实现运算符。例如，要实现乘法运算，Vivado HLS 可使用组合乘法器核或使用流水线乘法器核。</p><p>综合期间映射到运算符的核可采用与运算符相同的方式来加以限制。您无需限制乘法运算总数，而可改为选择限制组合乘法器核的数量以强制使用流水线化乘法器来执行所有剩余乘法（或反之亦然）。这是通过将 ALLOCATION 指令 type 选项指定为 core 来实现的。</p><p>RESOURCE 指令用于显式指定要用于特定操作的核。在以下示例中指定使用 2 阶流水线化乘法器以实现变量的乘法运算。以下命令会告知 Vivado HLS 针对变量 c 使用 2 阶流水线化乘法器。由 Vivado HLS 判定用于变量 d 的核。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">foo</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> c, d;</span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> HLS RESOURCE variable=c latency=2</span></span><br><span class="line">    c = a*b;</span><br><span class="line">    d = a*c;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以下示例中，RESOURCE 指令指定变量 temp 的加法运算，并使用 AddSub_DSP 核来实现。这样可确保在最终设计中使用 DSP48 原语来实现此运算 - 默认情况下加法运算是使用 LUT 来实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">apint_arith</span><span class="params">(dinA_t inA, dinB_t inB, <span class="type">dout1_t</span> *out1)</span> &#123;</span><br><span class="line">    <span class="type">dout2_t</span> temp;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS RESOURCE variable=temp core=AddSub_DSP</span></span><br><span class="line">    temp = inB + inA;</span><br><span class="line">    *out1 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>list_core 命令用于获取有关库中可用的核的详细信息。list_core 只能在 Tcl 命令界面中使用，并且必须使用set_part 命令指定器件。如果未选中器件，此命令将无效。list_core 命令的 -operation 选项列出了库中可通过指定运算实现的所有核。下表列出了用于实现标准 RTL 逻辑运算（例如，加法、乘法和比较）的核。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281643899.png" alt="image-20230328164345838"></p><p>除标准核外，当运算使用浮点类型时还可使用以下浮点核。请参阅每个器件的文档以判定在器件中是否支持浮点核。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281645137.png" alt="image-20230328164551072"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281646688.png" alt="image-20230328164610631"></p><p>下表列出了用于实现存储元素的核。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281646677.png" alt="image-20230328164649608"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281647149.png" alt="image-20230328164703103"></p><p>RESOURCE 指令使用已赋值的变量作为资源目标。给定代码的情况下，RESOURCE 指令可指定 out1 的乘法使用 3 阶流水线化乘法器来实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(...)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS RESOURCE variable=out1 latency=3</span></span><br><span class="line">    <span class="comment">// Basic arithmetic operations</span></span><br><span class="line">    *out1 = inA * inB;</span><br><span class="line">    *out2 = inB + inA;</span><br><span class="line">    *out3 = inC / inA;</span><br><span class="line">    *out4 = inD % inA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果赋值指定多个相同的运算符，则必须修改此代码以<u>确保针对要控制的每个运算符都存在单一变量</u>。例如，此示例中，如果仅使用流水线化乘法器来实现首个乘法 (inA * inB)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*out1 = inA * inB * inC;</span><br></pre></td></tr></table></figure><p>那么应使用 Result_tmp 变量上指定的指令来将代码更改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> HLS RESOURCE variable=Result_tmp latency=3</span></span><br><span class="line">Result_tmp = inA * inB;</span><br><span class="line">*out1 = Result_tmp * inC;</span><br></pre></td></tr></table></figure><h5 id="全局最优化硬件核"><a href="#全局最优化硬件核" class="headerlink" title="全局最优化硬件核"></a>全局最优化硬件核</h5><p>config_bind 配置项使开发者能改变将核与运算符绑定时所需的工作量。默认情况下，Vivado HLS 会选择能在时序与面积间实现最佳平衡的核。config_bind 能影响所使用的运算符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_bind -effort [low | medium | high] -min_op &lt;<span class="built_in">list</span>&gt;</span><br></pre></td></tr></table></figure><p>config_bind 命令只能在处于活动状态的解决方案内发出。绑定运算的默认运行策略是 medium。</p><ul><li>low 工作量：减少共享时间，运行时间更短，但最终 RTL 占用的资源可能更大。适用案例为设计人员已知几乎不可能存在运算共享或者几乎没有符合期望的运算共享，并且不希望将 CPU 周期浪费在探寻运算共享可能性上。</li><li>medium 工作量：默认设置，Vivado HLS 会尝试共享运算，但尽力在合理时间内完成运算。</li><li>high 工作量：尝试最大限度共享运算，不限制运行时间。Vivado HLS 不断尝试直至完成所有可能的运算共享组合为止。</li></ul><h3 id="最优化逻辑"><a href="#最优化逻辑" class="headerlink" title="最优化逻辑"></a>最优化逻辑</h3><p>主要考虑运算符的流水线以及是否可以进行表达式平衡的工作。</p><h4 id="控制运算符流水线化"><a href="#控制运算符流水线化" class="headerlink" title="控制运算符流水线化"></a>控制运算符流水线化</h4><p>Vivado HLS 会自动判定用于内部运算的流水线化级别。设计者可将 RESOURCE 指令与 -latency 选项配合使用，以显式指定流水线阶段的数量，并覆盖由 Vivado HLS 判定的数量。</p><p>RTL 综合可使用多个额外流水线寄存器来帮助改善布局布线后可能导致的时序问题。在模块的输出信号中添加寄存器通常有助于改善输出数据路径中的时序。在模块的输入信号中添加寄存器通常有助于改善输入数据路径和来自 FSM 的控制逻辑中的时序。</p><p>添加这些额外的流水线阶段的规则是：</p><ul><li>如果指定的时延比由 Vivado HLS 判定的时延多 1 个周期，Vivado HLS 会向运算输出添加新的输出寄存器。</li><li>如果指定的时延比由 Vivado HLS 判定的时延多 2 个周期，Vivado HLS 会向运算输出以及运算的输入侧添加寄存器。</li><li>如果指定的时延比由 Vivado HLS 判定的时延多 3 个或 3 个以上周期，Vivado HLS 会向运算的输出以及运算的输入侧添加寄存器。Vivado HLS 会自动判定任何附加的寄存器的位置。</li></ul><p>您可使用 config_core 配置对设计中特定核的具有相同流水线深度的所有实例进行流水线化。要设置此配置，请执行以下操作：</p><ol><li><p>选择“Solutions” → “Solution Settings”。</p></li><li><p>在“解决方案设置 (Solution Settings)”对话框中，选择“General”类别，然后单击“Add”。</p></li><li><p>在“添加命令 (Add Command)”对话框中，选择 config_core 命令，并指定参数。</p><p>例如，以下配置指定使用 DSP48 核实现的所有运算均采用流水线化，且时延设置为 3，这是该核允许的最大时延：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_core DSP48 -latency <span class="number">3</span></span><br></pre></td></tr></table></figure><p>以下配置指定随 RAM_1P_BRAM 核实现的所有 BRAM 均采用流水线化，且时延设置为 3：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config_core RAM_1P_BRAM -latency <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>NOTE：Vivado HLS 仅将此核配置应用于含显式 RESOURCE 指令的 BRAM，该指令可指定用于实现数组的核。如果使用默认核来实现数组，那么核配置不影响 BRAM。</p></blockquote></li></ol><h4 id="最优化逻辑表达式"><a href="#最优化逻辑表达式" class="headerlink" title="最优化逻辑表达式"></a>最优化逻辑表达式</h4><p>在综合期间会执行多次最优化（例如，强度折减和位宽最小化）。在自动最优化列表中也包括表达式平衡。</p><blockquote><p>NOTE：强度折减个人理解是用简单的算子来实现复杂的算子。下面把维基百科的解释搬运一下：</p><p>In compiler construction, <strong>strength reduction</strong> is a compiler optimization where expensive operations are replaced with equivalent but less expensive operations. The classic example of strength reduction converts “strong” multiplications inside a loop into “weaker” additions – something that frequently occurs in array addressing. </p><p>Examples of strength reduction include:</p><ul><li>replacing a multiplication within a loop with an addition</li><li>replacing an exponentiation within a loop with a multiplication</li></ul></blockquote><p>表达式平衡会重新排列运算符以构造平衡的树结构并降低时延。</p><ul><li>对于整数运算，默认情况下表达式平衡处于开启状态，但可将其禁用。</li><li>对于浮点运算，默认情况下表达式平衡处于关闭状态，但可将其启用。</li></ul><p>对于使用如下示例所示的 +&#x3D; 和 *&#x3D; 之类的赋值运算符的高度循序代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">data_t</span> <span class="title function_">foo_top</span> <span class="params">(<span class="type">data_t</span> a, <span class="type">data_t</span> b, <span class="type">data_t</span> c, <span class="type">data_t</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">data_t</span> sum;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    sum += a;</span><br><span class="line">    sum += b;</span><br><span class="line">    sum += c;</span><br><span class="line">    sum += d;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用表达式平衡并且假定每个加法都需要 1 个时钟周期，那么完整计算 sum 需要 4 个时钟周期，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281706060.png" alt="image-20230328170612023"></p><p>但加法 a+b 和 c+d 可并行执行以缩减时延。经过平衡后，计算可在 2 个时钟周期内完成，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281706887.png" alt="image-20230328170642852"></p><p>对于整数，您可使用 EXPRESSION_BALANCE 最优化指令配合 off 选项来禁用表达式平衡。默认情况下，Vivado HLS 对于 float 类型或 double 类型的运算不执行 EXPRESSION_BALANCE 最优化。对 float 和 double 类型进行综合时，Vivado HLS 会保留 C 语言代码中执行的运算顺序，以确保结果与 C 语言仿真相同。例如，在以下代码示例中，所有变量类型均为 float 或 double。O1 和 O2 即使看似执行相同的基本操作，其值也并不同。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281708041.png" alt="image-20230328170804005"></p><p>该行为是 C 语言标准中执行 float 或 double 类型的运算时饱和和舍入所导致的结果。因此，存在类型为 float 或 double 的函数时，Vivado HLS 始终保留运算顺序不变，并且默认不执行表达式平衡。</p><p>您可使用 config_compile 配置选项对 float 和 double 类型启用表达式平衡，如下所示：</p><ol><li>选择“Solution” → “Solution Settings”。</li><li>在“解决方案设置 (Solution Settings)”对话框中，单击“General”类别，然后单击“Add”。</li><li>在“添加命令 (Add Command)”对话框中，选择“config_compile”，并启用“unsafe_math_operations”。</li></ol><p>启用此设置后，Vivado HLS 即可更改运算顺序，以生成更优化的设计。但 C&#x2F;RTL 协同仿真的结果可能与 C 语言仿真不同。</p><p>unsafe_math_operations 功能还支持 no_signed_zeros 最优化。no_signed_zeros 最优化可确保以下表达式配合浮点类型和双精度类型使用时结果完全相同：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x - <span class="number">0.0</span> = x;</span><br><span class="line">x + <span class="number">0.0</span> = x;</span><br><span class="line"><span class="number">0.0</span> - x = -x;</span><br><span class="line">x - x = <span class="number">0.0</span>;</span><br><span class="line">x*<span class="number">0.0</span> = <span class="number">0.0</span>;</span><br></pre></td></tr></table></figure><p>如果不使用 no_signed_zeros 最优化，由于舍入，以上表达式结果将不同。通过在 config_compile 配置中仅选中该选项，即可选择在不使用表达式平衡的情况下执行此最优化。</p><blockquote><p>NOTE：使用 unsafe_math_operations 和 no_signed_zero 最优化时，RTL 实现结果将不同于 C 语言仿真。测试激励文件应可忽略结果中的轻微差异：检查范围，不执行精确比对。</p></blockquote><h2 id="Managing-Interfaces"><a href="#Managing-Interfaces" class="headerlink" title="Managing Interfaces"></a>Managing Interfaces</h2><p>在基于 C 语言的设计中，通过函数实参即可立即执行所有输入和输出操作。在 RTL 设计中，同样这些输入和输出操作必须通过设计接口中的端口来执行，并且通常使用特定 I&#x2F;O（输入&#x2F;输出）协议来进行操作。</p><p>Vivado HLS 支持使用以下解决方案来指定要使用的 I&#x2F;O 协议类型：</p><ul><li>接口综合，其中端口接口基于高效的业界标准接口来创建。</li></ul><h3 id="接口综合"><a href="#接口综合" class="headerlink" title="接口综合"></a>接口综合</h3><p>对顶层函数进行综合时，函数的实参（或参数）将综合到 RTL 端口中。此流程称为“接口综合 (interface synthesis)”。</p><h4 id="接口综合概述"><a href="#接口综合概述" class="headerlink" title="接口综合概述"></a>接口综合概述</h4><p>以下代码提供了接口综合的完整概述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sum_io.h&quot;</span></span></span><br><span class="line"><span class="type">dout_t</span> <span class="title function_">sum_io</span><span class="params">(<span class="type">din_t</span> in1, <span class="type">din_t</span> in2, <span class="type">dio_t</span> *sum)</span> &#123;</span><br><span class="line">    <span class="type">dout_t</span> temp;</span><br><span class="line">    *sum = in1 + in2 + *sum;</span><br><span class="line">    temp = in1 + in2;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码示例包括：</p><ul><li>2 个输入：in1 和 in2。</li><li>可供读取和写入的指针 sum。</li><li>return 函数，值为 temp。</li></ul><p>通过默认接口综合设置，设计将综合到含端口的 RTL 块中，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281739415.png" alt="image-20230328173920377"></p><p>Vivado HLS 会在 RTL 设计上创建 3 种类型的端口：</p><ul><li>时钟和复位端口：ap_clk 和 ap_rst。</li><li>块级接口协议。在前图中已显示并展开这些端口：ap_start、ap_done、ap_ready 和 ap_idle。</li><li>端口级接口协议。这些端口是针对顶层函数和函数返回（如果函数有返回值）中的每个实参创建的。在此示例中，这些端口包括：in1、in2、sum_i、sum_o、sum_o_ap_vld 和 ap_return。</li></ul><p><strong>时钟和复位端口</strong></p><p>如果设计耗时超过 1 个周期才能完成操作，则会引入时钟与复位端口。</p><p>（可选）可使用“Solution” → “Solution Settings” → “General”和 config_interface 配置将芯片使能端口添加到整个块中。</p><p>复位操作由 config_rtl 配置控制。</p><p><strong>块级接口协议</strong></p><p>默认情况下，块级接口协议会添加到设计中。这些信号用于控制模块，与任意端口级 I&#x2F;O 协议无关。这些端口用于控制模块开始处理数据的时间 (ap_start)、指示它是否已准备好开始接受新输入 (ap_ready) 以及指示设计是处于空闲状态(ap_idle) 还是已完成操作 (ap_done)。</p><p><strong>端口级接口协议</strong></p><p>最后一组信号是数据端口。创建的 I&#x2F;O 协议取决于 C 语言实参的类型和默认值。使用块级协议启动块操作后，端口级 I&#x2F;O 协议用于对进出模块的数据进行排序。</p><p>默认情况下，输入按值传递 (pass-by-value) 实参和指针作为简单的线型端口来实现，无需关联的握手信号。因此在以上示例中，实现的输入端口不含 I&#x2F;O 协议，仅为数据端口。如果此端口不含默认或按设计指定的 I&#x2F;O 协议，那么输入数据必须保持稳定直至读取为止。</p><p>默认输出指针实现时含关联的输出有效信号，用于指示何时输出数据有效。在上述示例中，输出端口实现时含关联的输出有效端口 (sum_o_ap_vld) 以指示何时端口上的数据有效并且可供读取。如果不存在与输出端口关联的 I&#x2F;O 协议，那么将难以确定何时读取数据。最好始终在输出上使用 I&#x2F;O 协议。</p><p>同时支持读取和写入的函数实参将拆分为独立的输入端口和输出端口。在以上示例中，sum 作为输出端口 sum_i 和输出端口 sum_o 来实现，并具有关联的 I&#x2F;O 协议端口 sum_o_ap_vld。</p><p>如果函数具有返回值，则实现输出端口 ap_return 以提供返回值。当设计完成 1 项传输事务时（等同于执行 1 次 C 语言函数），块级协议会以 ap_done 信号来表明函数已完成。这也表示 ap_return 端口上的数据有效且可读。</p><!--返回顶层函数的值不能为指针。--><p>对于所示的示例代码，时序行为如下图所示（假定目标技术和时钟频率允许每个时钟周期执行一次加法）。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281743233.png" alt="image-20230328174332182"></p><ul><li>当 ap_start 断言为 High 时，即模块开始工作。</li><li>ap_idle 信号断言为 Low 以表示设计正在运行。</li><li>输入数据可在首个周期后的任意时钟内读取。Vivado HLS 会调度读取发生的时间。读取所有输入后，ap_ready信号即断言为高位有效 (high)。</li><li>计算输出 sum 时，关联的输出握手 (sum_o_ap_vld) 表示数据有效。</li><li>当函数完成时，即断言 ap_done 有效。这也表示 ap_return 上的数据有效。</li><li>端口 ap_idle 断言为 High 以表示设计正在等待再次启动。</li></ul><h4 id="接口综合I-x2F-O协议"><a href="#接口综合I-x2F-O协议" class="headerlink" title="接口综合I&#x2F;O协议"></a>接口综合I&#x2F;O协议</h4><p>由接口综合所创建的接口类型取决于 C 语言实参的类型、默认接口模式以及 INTERFACE 最优化指令。下图显示了设计者可在每一种 C 语言实参类型上指定的接口协议模式。此图使用以下首字母缩略词：</p><ul><li><p>D：每一种类型的默认接口模式。</p><!--如果指定非法接口，Vivado HLS 会发出 1 条消息，并实现默认接口模式。--></li><li><p>I：输入实参（只读）。</p></li><li><p>O：输出实参（只写）。</p></li><li><p>I&#x2F;O：输入&#x2F;输出实参（可读写）。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281749345.png" alt="image-20230328174916295"></p><p>在接口综合参考章节中包含有关接口协议的完整信息（包括波形图），下面提供每个接口模式的概述。</p><h5 id="块级接口协议"><a href="#块级接口协议" class="headerlink" title="块级接口协议"></a>块级接口协议</h5><p>块级接口协议包括 ap_ctrl_none、ap_ctrl_hs 和 ap_ctrl_chain。这些协议只能在函数或函数返回值处指定。在 GUI 中指定该指令时，会将这些协议应用于函数返回值。即使函数没有返回值，也可在函数返回值处指定块级协议。</p><p>前述示例中所述的 ap_ctrl_hs 模式是默认协议。ap_ctrl_chain 协议类似于 ap_ctrl_hs，但具有额外的输入端口 ap_continue 以提供数据回压功能。如果函数完成时 ap_continue 端口为逻辑 0，此模块将停止操作，并且不会继续执行下一项传输事务。仅当 ap_continue 断言为逻辑 1 时，才会继续执行下一项传输事务。</p><p>ap_ctrl_none 模式用于实现不含任何块级 I&#x2F;O 协议的设计。</p><p>如果函数返回值同时指定为 AXI4-Lite 接口 (s_axilite)，<u>那么块级接口中的所有端口都将分组到此 AXI4-Lite 接口中。</u>我们在使用其它器件（如 CPU）来配置和控制模块的开始和停止操作时间时，常用此方法。</p><h5 id="端口级接口协议：AXI4协议"><a href="#端口级接口协议：AXI4协议" class="headerlink" title="端口级接口协议：AXI4协议"></a>端口级接口协议：AXI4协议</h5><p>Vivado HLS 支持的 AXI4 接口包括 AXI4-Stream 接口 (axis)、AXI4-Lite 从接口 (s_axilite) 和 AXI4 主接口 (m_axi)，这些接口可按以下方式指定：</p><ul><li>AXI4-Stream 接口：仅在input实参或output实参上指定，而不在inout实参上指定。</li><li>AXI4-Lite 接口，在任何类型的实参上指定，但是array类型除外。设计者可以将多个实参分组到同一 AXI4-Lite 接口中。</li><li>AXI4 主接口：仅在数组和指针（以及 C++ 中的引用）上指定。设计者可以将多个实参分组到同一 AXI4 接口中。</li></ul><h5 id="端口级接口协议：无I-x2F-O协议"><a href="#端口级接口协议：无I-x2F-O协议" class="headerlink" title="端口级接口协议：无I&#x2F;O协议"></a>端口级接口协议：无I&#x2F;O协议</h5><p>ap_none 和 ap_stable 模式可指定不向端口添加任何 I&#x2F;O 协议。指定这些模式时，实参作为不含任何其它关联信号的数据端口来实现。ap_none 模式是标量输入的默认模式。<u>ap_stable 模式用于仅当器件处于复位模式时才可更改的配置输入。</u></p><h5 id="端口级接口协议：握手协议"><a href="#端口级接口协议：握手协议" class="headerlink" title="端口级接口协议：握手协议"></a>端口级接口协议：握手协议</h5><p>接口模式 ap_hs 包含与数据端口的双向握手信号。此握手属于业界标准的有效和确认握手。ap_vld 模式同样如此，但仅含有效端口，ap_ack 仅含确认端口。</p><p>ap_ovld 模式用于inout参数。将inout数据类型拆分为独立输入端口和输出端口时，ap_none 模式适用于其中的输入端口，ap_vld 适用于其中的输出端口。这是支持读写的指针实参的默认类型。</p><p>ap_hs 模式<u>可应用于按顺序读写的数组。</u>如果 Vivado HLS 可判定读访问或写访问为无序访问，它将停止综合并报错。如果无法判定访问顺序，Vivado HLS 将发出警告。</p><h5 id="端口级接口协议：内存接口"><a href="#端口级接口协议：内存接口" class="headerlink" title="端口级接口协议：内存接口"></a>端口级接口协议：内存接口</h5><p>默认情况下，数组实参作为 ap_memory 接口来实现。这是含数据、地址、芯片使能和写使能端口的标准 BRAM 接口。</p><p>ap_memory 接口可作为单端口接口或双端口接口来实现。如果 Vivado HLS 可判定使用双端口接口可以缩短启动时间间隔，那么它将自动实现双端口接口。RESOURCE 指令用于指定内存资源，如果在含单端口 BRAM 的数组上指定该指令，那么将实现单端口接口。相反，如果使用 RESOURCE 指令指定双端口接口，并且 Vivado HLS 判定此接口并无益处，那么它将自动实现单端口接口。</p><p>bram 接口模式的运作方式与 ap_memory 接口相同。唯一差异是在 Vivado IP integrator 中使用设计时，端口的实现方式。</p><ul><li>ap_memory 接口显示为多个独立端口。</li><li>bram 接口显示为单个组合端口，可使用单一点对点连接来连接到赛灵思 BRAM。</li></ul><p>如果按顺序访问数组，可使用 ap_fifo 接口。就像 ap_hs 接口一样，如果 Vivado HLS 判定未按顺序进行数据访问，那么它将停止；如果无法判定是否采用顺序访问，则将发出警告；如果判定已采用顺序方式访问，则不发出任何消息。ap_fifo 接口只能用于读取或写入，不能用于同时读写。</p><p>ap_bus 接口可与总线网桥进行通信。此接口不遵循任何特定总线标准，但鉴于其泛用性，可配合总线网桥一起使用，从而与系统总线进行仲裁。<u>总线网桥必须能够将所有突发写操作进行缓存。</u></p><h4 id="接口综合和多次访问指针"><a href="#接口综合和多次访问指针" class="headerlink" title="接口综合和多次访问指针"></a>接口综合和多次访问指针</h4><p>使用多次访问的指针可能会在综合后引发意外行为。在以下示例中，对指针 d_i 执行了 4 次读取，对指针 d_o 执行了 2 次写入：指针执行了多次访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pointer_stream_bad.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pointer_stream_bad</span> <span class="params">( <span class="type">dout_t</span> *d_o, <span class="type">din_t</span> *d_i)</span> &#123;</span><br><span class="line"><span class="type">din_t</span> acc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    acc += *d_i;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    *d_o = acc;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    *d_o = acc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综合后，此代码产生的 RTL 设计将读取 1 次输入端口，写入 1 次输出端口。与任何标准 C 语言编译器一样，Vivado HLS 将优化掉多余的指针访问。要按“预期”实现上述代码，即对 d_i 读取 4 次，对 d_o 写入 2 次，必须将指针指定为 volatile，如以下示例所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pointer_stream_better.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pointer_stream_better</span> <span class="params">( <span class="keyword">volatile</span> <span class="type">dout_t</span> *d_o, <span class="keyword">volatile</span> <span class="type">din_t</span> *d_i)</span> &#123;</span><br><span class="line"><span class="type">din_t</span> acc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    acc += *d_i;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    *d_o = acc;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    acc += *d_i;</span><br><span class="line">    *d_o = acc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使此段 C 语言代码也有问题。实际上，在测试激励文件上，除了为 d_i 提供一个值之外，无法执行任何其它操作，或者除了最终写入之外，也不能验证任何对 d_o 的写入。尽管支持多次访问指针，但Xilinx官方还是强烈建议使用 hls::stream 类实现所需的行为。</p><h4 id="指定接口"><a href="#指定接口" class="headerlink" title="指定接口"></a>指定接口</h4><p>接口综合可通过 INTERFACE 指令或使用配置设置来加以控制。要在端口上指定接口模式，请在 GUI 的“Directives”选项卡中选择端口，右键单击并选择“Insert Directive”以打开“Vivado HLS Directive Editor”，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303291045565.png" alt="image-20230329104527503"></p><p>在“Vivado HLS Directives Editor”中，设置以下选项：</p><ul><li><p>“mode”</p><p>从下拉菜单中选择接口模式。</p></li><li><p>“register”</p><p>如果选择该选项，对输入数据会使用register进行暂存，对于输出端口，“register”选项可保证对输出进行寄存。设计者可将“register”选项应用于设计中的任意函数。对于内存、FIFO 和 AXI4 接口，“register”选项无效。</p></li><li><p>“depth”</p><p>该选项用于指定测试激励文件向设计提供的样本数量以及测试激励文件必须存储的输出值数量。以更大的数值为准。（与综合无关）</p><!--：对于在单一传输事务内多次读取或写入的指针，需选中 “depth” 选项才能执行 C/RTL 协同仿真。对于数组而言或者使用 hls::stream 构造时，“depth”选项并不是必需的。 仅当在接口上使用指针时，才需选中该选项。--><p>如果“depth”选项设置过小，那么 C&#x2F;RTL 协同仿真可能出现死锁，如下所示：</p><ol><li>读取输入数据的操作可能停滞并等待数据，而测试激励文件无法提供这些数据。</li><li>在尝试写出输出数据时可能停滞，因为存储空间已满。</li></ol></li><li><p>“port”</p><p>该选项为必需，指明约束的目标。默认情况下，Vivado HLS 不对端口进行寄存。</p><!--要指定块级 I/O 协议，请在 Vivado HLS GUI 中选择顶层函数，并指定函数返回的端口。--></li><li><p>“offset”</p><p>该选项适用于 AXI4 接口，指明地址偏移量。</p></li></ul><p>要设置接口配置，请选择“Solution” → “Solution Settings” → “General” → “config_interface”。您可使用配置设置来执行如下操作：</p><ul><li>向 RTL 设计添加全局时钟使能。</li><li>移除无关联的端口，例如，由设计中不使用的元素所创建的端口。</li><li>为任意全局变量创建 RTL 端口。</li></ul><p>任何 C 语言函数均可使用全局变量：即定义的作用域超出任意函数作用域的变量。默认情况下，全局变量不会导致创建 RTL 端口：Vivado HLS 假定全局变量位于最终设计内。config_interface 配置设置 expose_global 会指示Vivado HLS 为全局变量创建端口。</p><h3 id="使用AXI接口"><a href="#使用AXI接口" class="headerlink" title="使用AXI接口"></a>使用AXI接口</h3><p>这边就不展开说了，AMBA AXI可以单独写一篇文章来细说了。需要的同学可以自行去ARM官网查阅AXI的协议，并结合UG902查看各配置项的含义。</p><h2 id="Interface-Synthesis-Reference"><a href="#Interface-Synthesis-Reference" class="headerlink" title="Interface Synthesis Reference"></a>Interface Synthesis Reference</h2><p>此参考部分对每一种 Vivado HLS 接口模式进行了解释。</p><h3 id="块级I-x2F-O协议"><a href="#块级I-x2F-O协议" class="headerlink" title="块级I&#x2F;O协议"></a>块级I&#x2F;O协议</h3><p>Vivado HLS 使用接口类型 ap_ctrl_none、ap_ctrl_hs 和 ap_ctrl_chain 来指定是否使用块级握手信号实现RTL。块级握手信号可指定：</p><ul><li>设计何时开始执行操作</li><li>操作何时终止</li><li>设计何时处于空闲状态以及何时准备好处理新输入</li></ul><p>设计者可在函数上或函数返回时指定块级 I&#x2F;O 协议。如果 C 语言代码不返回值，您仍可在函数返回时指定块级 I&#x2F;O 协议。如果 C 语言代码使用函数返回，那么 Vivado HLS 会为返回值创建 ap_return 输出端口。</p><p>在块级 I&#x2F;O 协议中 ap_ctrl_hs (handshake) 为默认协议。下图显示了 Vivado HLS 对函数实现 ap_ctrl_hs 时生成的 RTL 端口和行为。在此示例中，函数使用 return 语句返回值，Vivado HLS 在 RTL 设计中创建 ap_return 输出端口。如果在 C 语言代码中不包含函数 return 语句，则不会创建此端口。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281759879.png" alt="image-20230328175917838"></p><p>ap_ctrl_chain 接口模式类似于 ap_ctrl_hs，但可提供额外的 ap_continue 输入信号以应用反压。赛灵思建议使用 ap_ctrl_chain 块级 I&#x2F;O 协议将 Vivado HLS IP链接在一起。</p><h4 id="ap-ctrl-none"><a href="#ap-ctrl-none" class="headerlink" title="ap_ctrl_none"></a>ap_ctrl_none</h4><p>如果指定 ap_ctrl_none 块级 I&#x2F;O 协议，则不创建块级 I&#x2F;O 协议中所示的握手信号端口（ap_start、ap_idle、ap_ready 和 ap_done）。如果在设计上不指定块级 I&#x2F;O 协议，那么使用 C&#x2F;RTL 协同仿真来验证 RTL 设计时，必须遵守接口综合要求中所述条件。</p><h4 id="ap-ctrl-hs"><a href="#ap-ctrl-hs" class="headerlink" title="ap_ctrl_hs"></a>ap_ctrl_hs</h4><p>下图显示了由 ap_ctrl_hs I&#x2F;O 协议为非流水线化设计创建的块级握手信号的行为。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303281801678.png" alt="image-20230328180122623"></p><p>复位后，将执行以下操作：</p><ol><li><p>此模块会等待 ap_start 达到高电平，然后再开始操作。</p></li><li><p>ap_idle 输出会立即变为低电平，以指示设计不再处于空闲状态。</p></li><li><p>ap_start 信号必须保持处于高电平状态，直至 ap_ready 达到高电平状态。当 ap_ready 达到高电平状态后：</p><ul><li>如果 ap_start 保持高电平，设计将启动下一项传输事务。</li><li>如果 ap_start 变为低电平，设计将完成当前传输事务，然后停止操作。</li></ul></li><li><p>可读取输入端口上的数据。</p><!--输入端口可使用独立于此块级 I/O 协议的端口级 I/O 协议。--></li><li><p>可将数据写入输出端口。</p><!--输出端口可使用独立于此块级 I/O 协议的端口级 I/O 协议。--></li><li><p>当模块完成操作后，ap_done 输出会变为高电平状态。</p><!--如果存在 ap_return 端口，那么当 ap_done 处于高电平状态时，此端口上的数据将变为有效。因此，ap_done 信号还用于指示 ap_return 输出上的数据有效。--></li><li><p>当模块准备好接受新输入后，ap_ready 信号会变为高电平状态。以下是有关 ap_ready 信号的其它信息：</p><ul><li>ap_ready 信号处于不活动状态，直至模块开始操作为止。</li><li>在非流水线化设计中，ap_ready 信号与 ap_done 同时断言有效。</li><li>在流水线化设计中，当 ap_start 采样结果为高电平后，ap_ready 信号可能在任意周期变为高电平状态。这取决于设计流水线化的启动间隔。</li><li>如果 ap_start 信号为低电平状态，而 ap_ready 为高电平状态，那么设计将持续执行操作，直至 ap_done变为高电平状态后停止操作。</li><li>如果 ap_start 信号为高电平状态，且 ap_ready 为高电平状态，那么下一项传输事务将立即启动，且模块将继续操作。</li></ul></li><li><p>ap_idle 信号可用于指示设计何时处于空闲且不执行操作状态。以下是有关 ap_idle 信号的其它信息：</p><ul><li>如果 ap_start 信号为低电平状态，而 ap_ready 为高电平状态，那么设计将停止操作，而 ap_idle 信号将在达成 ap_done 后，再经过 1 个周期后变为高电平状态。</li><li>如果 ap_start 信号为高电平状态，且 ap_ready 为高电平状态，那么设计将继续操作，且 ap_idle 信号保持处于低电平状态。</li></ul></li></ol><h4 id="ap-ctrl-chain"><a href="#ap-ctrl-chain" class="headerlink" title="ap_ctrl_chain"></a>ap_ctrl_chain</h4><p>下面介绍 ap_ctrl_chain 的接口协议。该块级 I&#x2F;O 协议类似于 ap_ctrl_hs 协议，<u>但可提供 1 个额外输入端口</u>，名为 ap_continue。处于高电平有效状态的 ap_continue 信号，可指示使用输出数据的下游块已准备好处理新的数据输入。如果下游块无法使用新数据输入，那么 ap_continue 信号处于低电平状态，这将阻止上游块生成更多数据。</p><p>下游块的 ap_ready 端口可直接驱动 ap_continue 端口。以下是有关 ap_continue 端口的其它信息：</p><ul><li>如果 ap_continue 信号为高电平状态，且 ap_done 为高电平状态，那么设计将继续操作。其它块级 I&#x2F;O 信号的行为与 ap_ctrl_hs 块级 I&#x2F;O 协议中描述的行为相同。</li><li>如果 ap_continue 信号为低电平状态，而 ap_done 为高电平状态，那么设计将停止操作，ap_done 信号将保持高电平状态，并且如果存在 ap_return 端口，那么 ap_return 端口上的数据将保持有效。</li></ul><p>在下图中，第 1 项传输事务已完成，第 2 项传输事务立即启动，因为 ap_continue 为高电平状态，且 ap_done 为高电平状态。但设计在第 2 项传输事务结束后将暂停，直至 ap_continue 断言为高电平有效为止。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282210604.png" alt="image-20230328221037464"></p><h3 id="端口级I-x2F-O协议"><a href="#端口级I-x2F-O协议" class="headerlink" title="端口级I&#x2F;O协议"></a>端口级I&#x2F;O协议</h3><h4 id="ap-none"><a href="#ap-none" class="headerlink" title="ap_none"></a>ap_none</h4><p>ap_none 端口级 I&#x2F;O 协议是最简单的接口类型，没有与之关联的其它信号。输入和输出数据信号都没有关联的控制端口以指示何时读取或写入数据。RTL 设计中仅有的端口是源代码中指定的端口。</p><p>ap_none 接口无需额外硬件开销。但是，ap_none 接口需满足以下条件：</p><ul><li>生产者模块执行以下操作之一：<ul><li>在正确的时间向输入端口提供数据</li><li>在执行传输事务期间保留数据，直到设计完成</li></ul></li><li>使用者模块在正确的时间读取输出端口</li></ul><!--ap_none 接口不能与数组实参一起使用。--><h4 id="ap-stable"><a href="#ap-stable" class="headerlink" title="ap_stable"></a>ap_stable</h4><p>与 ap_none 一样，ap_stable 端口级 I&#x2F;O 协议不会向设计添加任何接口控制端口。<u>ap_stable 类型通常用于可更改但在正常操作期间保持稳定的数据</u>，例如提供配置数据的端口。ap_stable 类型向 Vivado HLS 发送下列通知：</p><ul><li>应用于端口的数据在正常操作期间应保持稳定，但不是可以被优化掉的常量值。</li><li>此端口的扇出无需寄存。</li></ul><!--ap_stable 类型只能应用于输入端口。当应用于输入输出 (inout) 端口时，仅端口的输入被视为稳定。--><h4 id="ap-hs（ap-ack、ap-vld和ap-ovld）"><a href="#ap-hs（ap-ack、ap-vld和ap-ovld）" class="headerlink" title="ap_hs（ap_ack、ap_vld和ap_ovld）"></a>ap_hs（ap_ack、ap_vld和ap_ovld）</h4><p>ap_hs 端口级 I&#x2F;O 协议在开发过程中提供了最大的灵活性，允许采用自下而上和自上而下的设计流程。双向握手可安全执行所有模块间通信，无需人为干预或假设即可正确执行。ap_hs 端口级 I&#x2F;O 协议提供以下信号：</p><ul><li>数据端口</li><li>用于指示何时使用数据的确认信号</li><li>用于指示何时读取数据的 valid 信号</li></ul><p>下图显示了 ap_hs 接口对应输入和输出端口的行为。在此示例中，输入端口名为 in，输出端口名为 out。</p><!--控制信号名称基于原始端口名称。例如，用于数据输入 in 的 valid 端口名为 in_vld。--><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282220319.png" alt="image-20230328222020173"></p><p>对于输入，将执行以下操作：</p><ul><li><p>应用 start 后，该模块开始正常操作。</p></li><li><p>如果设计已准备好输入数据，但输入 valid 处于低电平状态，则设计将停滞并等待断言输入 valid 有效以指示存在新的输入值。</p><!--上图显示了此行为。在此示例中，设计已准备好在时钟周期 4 上读取数据输入 in、停滞并等待输入valid，然后再读取数据。--></li><li><p>当输入 valid 断言为高电平有效 (High) 时，in_ack 将断言为高电平有效 (High)，表明已读取数据。</p></li></ul><p>对于输出，将执行以下操作：</p><ul><li>应用 start 后，该模块开始正常操作。</li><li>写入输出端口时，将同时断言其关联的输出 valid 信号有效，以指示端口上存在 valid 数据。</li><li>如果关联的 out_ack 为低电平，则设计将停滞并等待断言 out_ack 有效。</li><li>当 out_ack 确认有效后，将在下一个时钟沿断言 out_valid 无效。</li></ul><h4 id="ap-ack"><a href="#ap-ack" class="headerlink" title="ap_ack"></a>ap_ack</h4><p>ap_ack 端口级 I&#x2F;O 协议是 ap_hs 接口类型的<strong>子集</strong>。ap_ack 端口级 I&#x2F;O 协议提供以下信号：</p><ul><li><p>数据端口</p></li><li><p>用于指示何时使用数据的ack信号（删去了ap_hs中的in_vld和out_vld信号，仅保留input和output端口的ack信号）</p><ul><li><p>对于输入实参，设计会在读取输入的周期中生成高电平ack信号进行确认。</p></li><li><p>对于输出实参，Vivado HLS 会实现ack端口来确认已读取输出。</p><!--写入操作之后，设计将停滞并等待，直到输入确认断言为高电平有效为止，这表明使用者块已读取输出。但是，不存在可用于指示何时可以使用数据的关联输出端口。--></li></ul></li></ul><h4 id="ap-vld"><a href="#ap-vld" class="headerlink" title="ap_vld"></a>ap_vld</h4><p>ap_vld 是 ap_hs 接口类型的子集。ap_vld 端口级 I&#x2F;O 协议提供以下信号：</p><ul><li>数据端口</li><li>用于指示何时读取数据的 valid 信号（删去了ap_hs中的ack信号，仅保留vld信号）<ul><li>对于输入实参，模块在 valid 端口有效后立即读取数据端口。即使模块尚未准备好读取新数据，也会对数据端口进行采样并在内部保留数据，直到需要时为止。</li><li>对于输出实参，Vivado HLS 会实现输出 valid 端口以指示输出端口上的数据何时为 valid。</li></ul></li></ul><h4 id="ap-ovld"><a href="#ap-ovld" class="headerlink" title="ap_ovld"></a>ap_ovld</h4><p>ap_ovld 是 ap_hs 接口类型的子集。ap_ovld 端口级 I&#x2F;O 协议提供以下信号：</p><ul><li>数据端口</li><li>用于指示何时读取数据的 valid 信号<ul><li>对于输入实参和inout类型参数中的输入部分，设计默认为 ap_none 类型。</li><li>对于输出实参和inout类型参数中的输出部分，设计实现 ap_vld 类型。</li></ul></li></ul><h4 id="ap-memory-bram"><a href="#ap-memory-bram" class="headerlink" title="ap_memory, bram"></a>ap_memory, bram</h4><p>ap_memory 和 bram 接口端口级 I&#x2F;O 协议用于<u>实现数组实参</u>。当实现要求随机访问内存地址位置时，这种类型的端口级 I&#x2F;O 协议可以与内存元件（例如，RAM 和 ROM）通信。</p><!--如果只需顺序访问内存元件，请改用 ap_fifo 接口。ap_fifo 接口可以减少硬件开销，因为不执行地址生成。--><p>ap_memory 和 bram 接口端口级 I&#x2F;O 协议相同。唯一的区别是 Vivado IP integrator 显示模块的方式：</p><ul><li>ap_memory 接口显示为离散端口。</li><li>bram 接口显示为单一端口（已组合）。在 IP integrator 中，可使用单一连接来创建到所有端口的连接。</li></ul><p>使用 ap_memory 接口时，请使用 RESOURCE 指令指定数组目标。如果没有为数组指定目标，则 Vivado HLS 会决定是使用单端口还是双端口 RAM 接口。</p><!--运行综合前，请使用 RESOURCE 指令确保将数组实参定向到正确的内存类型。使用更正后的内存进行重新综合可能会导致生成的 RTL 不同。--><p>下图显示了一个名为 d 的数组，该数组指定为单端口 BRAM。端口名称基于 C 语言函数实参。例如，如果 C 语言实参为 d，则根据 BRAM 的 output&#x2F;q 端口，芯片使能为 d_ce，输入数据为 d_q0。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282305814.png" alt="image-20230328230531655"></p><p>复位后，将执行以下操作：</p><ul><li><p>断言 ap_start 后，该模块开始正常操作。</p></li><li><p>通过在断言输出信号 d_ce 有效的同时在输出地址端口上应用地址来执行读取。</p><!--对于默认的 BRAM，设计期望在下一个时钟周期中，输入数据 d_q0 可用。您可以使用 RESOURCE 指令来指示 RAM 具有更长的读取时延。--></li><li><p>通过断言输出端口 d_ce 和 d_we 有效并同时应用地址和输出数据 d_d0 来执行写操作。</p></li></ul><h4 id="ap-fifo"><a href="#ap-fifo" class="headerlink" title="ap_fifo"></a>ap_fifo</h4><p>写入输出端口时，当设计需要访问内存元件<u>并且访问始终以顺序方式执行时</u>，即不需要随机访问，则ap_fifo接口是最节省资源的方法。ap_fifo 端口级 I&#x2F;O 协议支持以下操作：</p><ul><li>允许端口连接到 FIFO</li><li>启用完整的双向 empty-full 通信</li><li>适用于数组、指针和按引用传递实参类型</li></ul><p>在下图示例中，in1 是一个指针，该指针访问当前地址，然后访问当前地址上面的两个地址，最后访问下面的一个地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span>* in1, ...)</span> &#123;</span><br><span class="line">    <span class="type">int</span> data1, data2, data3;</span><br><span class="line">    ...</span><br><span class="line">    data1= *in1;</span><br><span class="line">    data2= *(in1+<span class="number">2</span>);</span><br><span class="line">    data3= *(in1<span class="number">-1</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将 in1 指定为 ap_fifo 接口，则 Vivado HLS 会检查访问、判定访问并非按顺序进行，随即发出错误消息并中止。要从非顺序地址读取，请使用 ap_memory 或 bram 接口。</p><p><u>不能在同时支持读取和写入的实参上指定 ap_fifo 接口</u>。您只能在输入或输出实参上指定 ap_fifo 接口。含输入实参 in 和输出实参 out（指定为 ap_fifo 接口）的设计的行为如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282311023.png" alt="image-20230328231130875"></p><p>对于输入，将执行以下操作：</p><ul><li>断言 ap_start 后，该模块开始正常操作。</li><li>如果输入端口已准备好读取，但输入端口 in_empty_n 处于低电平状态，指示 FIFO 为空，则设计将停滞并等待数据可用。</li><li>当输入端口 in_empty_n 处于高电平状态，指示 FIFO 包含数据时，将断言输出确认 in_read 为高电平有效以指示当前周期中已读取数据。</li></ul><p>对于输出，将执行以下操作：</p><ul><li><p>断言 ap_start 后，该模块开始正常操作。</p></li><li><p>如果输出端口已准备好写入，但 out_full_n 处于低电平状态，指示 FIFO 已满，则数据将置于输出端口上，但设计将停滞并等待 FIFO 中的空间可用。</p></li><li><p>当 out_full_n 处于高电平状态，指示 FIFO 中有可用空间时，将断言输出确认信号 out_write 有效以指示输出数据为 valid。</p></li><li><p>如果顶层函数或顶层循环已使用 -rewind 选项进行流水线化，则 Vivado HLS 将创建另一个后缀为 lwr 的输出端口。当最后一次写入 FIFO 接口完成时，lwr 端口将变为高电平有效。</p></li></ul><h4 id="ap-bus"><a href="#ap-bus" class="headerlink" title="ap_bus"></a>ap_bus</h4><p>ap_bus 接口可以与总线桥通信。由于 ap_bus 接口未遵循特定的总线标准，因此可将此接口用于与系统总线进行通信的总线桥。<u>总线桥必须能够对所有突发写入进行高速缓存。</u></p><p>设计者可以通过以下方式使用 ap_bus 接口：</p><ul><li><p>标准模式：此模式执行单独的读操作和写操作，并为每项操作指定地址。</p></li><li><p>突发模式：如果在 C 语言源代码中使用了 C 语言函数 memcpy，则此模式将执行数据传输。在突发模式下，该接口指示基址和传输大小。然后以连续的周期传输数据样本。</p><!--memcpy 函数访问的数组不能partitioned到寄存器中。--></li></ul><p>以下示例显示了将 ap_bus 接口应用于实参 d 时，标准模式下的读写操作的行为。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span> <span class="params">(<span class="type">int</span> *d)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> acc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">        acc += d[i+<span class="number">1</span>];</span><br><span class="line">        d[i] = acc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下示例显示了使用 C memcpy 函数和突发模式时的行为。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bus</span> <span class="params">(<span class="type">int</span> *d)</span> &#123;</span><br><span class="line">    <span class="type">int</span> buf1[<span class="number">4</span>], buf2[<span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">memcpy</span>(buf1,d,<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">    buf2[i] += buf1[<span class="number">1</span>+i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">memcpy</span>(d,buf2,<span class="number">4</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ap_bus标准读取和写入的时序图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282323381.png" alt="image-20230328232306226"></p><p>对于ap_bus的标准读过程，在复位后将执行下列操作：</p><ul><li><p>断言 ap_start 后，该模块开始正常操作。</p></li><li><p>如果执行读取时 d_rsp_empty_n 为低电平，指示总线桥 FIFO 中没有数据，则会执行以下操作：</p><ul><li>断言输出端口 d_write_req 有效，并断言端口 r_req_in 无效，以指示读取操作。</li><li>输出地址。</li><li>设计停滞并等待数据可用。</li></ul></li><li><p>当数据可用于读取输出信号时，立即断言 d_rsp_read 有效并在下一个时钟沿读取数据。</p></li><li><p>如果执行读取时 d_rsp_empty_n 为高电平，指示总线桥 FIFO 中有可用数据，则会执行以下操作：</p><ul><li><p>断言输出端口 d_write_req 有效，并断言端口 r_req_in 无效，以指示读取操作。</p></li><li><p>输出地址。</p></li><li><p>在下一个时钟周期断言输出信号 d_rsp_read 有效，并在下一个时钟沿读取数据。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282323936.png" alt="image-20230328232317782"></p></li></ul></li></ul><p>对于ap_bus的标准写过程，在复位后将执行下列操作：</p><ul><li>断言 ap_start 后，该模块开始正常操作。</li><li>如果执行写入时 d_req_full_n 为低电平，指示总线桥 FIFO 中没有空间可用，则会执行以下操作：<ul><li>输出地址和数据。</li><li>设计停滞并等待空间可用。</li></ul></li><li>当有空间可用于写入时，将执行以下操作：<ul><li>断言输出端口 req_write 和 d_req_din 有效，以指示写操作。</li><li>立即断言输出信号 d_req_din 有效以指示该数据在下一个时钟沿有效。</li></ul></li><li>如果执行写入时d_req_full_n 为高电平，指示总线桥 FIFO 中有可用空间，则会执行以下操作：<ul><li>断言输出端口 req_write 和 d_req_din 有效，以指示写操作。</li><li>输出地址和数据。</li><li>断言输出信号 d_req_din 有效以指示该数据在下一时钟沿有效。</li></ul></li></ul><p>ap_bus突发读取和写入的时序图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282333994.png" alt="image-20230328233347839"></p><p>对于ap_bus的突发读过程，在复位后将执行下列操作：</p><ul><li>断言 ap_start 后，该模块开始正常操作。</li><li>如果执行读取时 d_rsp_empty_n 为低电平，指示总线桥 FIFO 中没有数据，则会执行以下操作：<ul><li>断言输出端口 d_req_write 有效，并断言端口 d_req_din 无效，以指示读取操作。</li><li>输出传输的基地址和传输长度。</li><li>设计停滞并等待数据可用。</li></ul></li><li>当数据可用于读取输出信号时，立即断言 d_rsp_read 有效，并在接下来的 N 个时钟沿读取数据，其中 N 是d_size的值。</li><li>如果总线桥 FIFO 的值已清空，数据传输将立即停止，并等待数据可用后再继续。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303282337164.png" alt="image-20230328233703018"></p><p>对于ap_bus的突发写过程，在复位后将执行下列操作：</p><ul><li>断言 ap_start 后，该模块开始正常操作。</li><li>如果执行写入时d_req_full_n 为低电平，指示总线桥 FIFO 中没有空间可用，则会执行以下操作：<ul><li>输出基址、传输大小和数据。</li><li>设计停滞并等待空间可用。</li></ul></li><li>当有空间可用于写入时，将执行以下操作：<ul><li>断言输出端口 d_req_write 和 d_req_din 有效，以指示写操作。</li><li>立即断言输出信号 d_req_din 有效以指示该数据在下一个时钟沿有效。</li><li>如果 FIFO 已满，则会立即断言输出信号 d_req_din 无效，并在空间可用时重新断言。</li><li>传输于完成 N 个数据值后停止，其中 N 是d_size的值。</li></ul></li><li>如果执行写入时 d_rsp_full_n 为高电平，指示总线桥 FIFO 中有可用空间，则传输开始，设计停滞并等待直到 FIFO 已满。</li></ul><h4 id="axi-s"><a href="#axi-s" class="headerlink" title="axi_s"></a>axi_s</h4><p>axis 模式指定 AXI4-Stream I&#x2F;O 协议。</p><h4 id="s-axilite"><a href="#s-axilite" class="headerlink" title="s_axilite"></a>s_axilite</h4><p>s_axilite 模式指定 AXI4-Lite <strong>从接口</strong> I&#x2F;O 协议。</p><h4 id="m-axi"><a href="#m-axi" class="headerlink" title="m_axi"></a>m_axi</h4><p>m_axi 模式指定 AXI4 <strong>主接口</strong> I&#x2F;O 协议。</p><h2 id="How-to-use-HLS"><a href="#How-to-use-HLS" class="headerlink" title="How to use HLS?"></a>How to use HLS?</h2><p>这边本文不展开说了，本文主要目的是带大家熟悉HLS中基本的约束情况。工具的详细使用教程请大家参考官方例程文档<a href="https://docs.xilinx.com/v/u/en-US/ug871-vivado-high-level-synthesis-tutorial">UG871</a>，跟着教程做完实验基本就可以熟悉HLS的设计、验证以及后续导出RTL设计的流程了，其中与结果分析相关的实验需要好好学习，在后续实际使用中遇到问题时才有调试的思路。</p><h2 id="What’s-more"><a href="#What’s-more" class="headerlink" title="What’s more?"></a>What’s more?</h2><p>虽然我们思考问题尽量要从源头出发，但解决问题时如果有一些前人的成果可以参考的话那就再好不过了，本章简要介绍一下HLS中自带的各种算法库，其中有些笔者使用过，有些并没有用过。只能对着官方文档”省流”一波，更多细节的内容大家可以去UG902自行查阅。</p><p>1、Arbitrary Precision Data Types Library：顾名思义，扩展了数据的类型。Then，Why？原生的基于C的数据类型都是字节对齐的，如8,16,32,64bits。但RTL的数据类型是支持任意宽度的，所以HLS需要设计一种机制来满足任意位宽的数据的声明，而不能像C语言一样有Byte对齐的要求。假设如果没有该库，我们需要用HLS实现一个17bit的乘法器，那么HLS会将其强制实现为32bit的乘法器。总而言之，该库可以让我们更高效地利用硬件资源，以bit为单位给数据设置位宽。</p><p>2、HLS Stream Library：Stream是一种数据类型，Stream中的数据都是依序采样后发送，没有地址的概念，可以借助FIFO的概念来辅助理解。在C语言中对Stream类型的数据进行建模比较困难，C中一般是基于指针对数据进行存取，因此使用HLS Stream Lib对构建Stream数据类型的设计与仿真贡献较大。</p><p>3、HLS Math Library：顾名思义，可以实现一些高效的数学运算，如指数、对数、三角、幂函数、取整、乘除、比较等等函数。</p><p>4、其余的笔者目前没怎么用到过，还有HLS Video Library，HLS IP Libraries，HLS Linear Algebra Library，HLS DSP Library等，大家需要的话可以自行查阅原文档。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://docs.xilinx.com/v/u/en-US/ug902-vivado-high-level-synthesis">UG902-Vivado Design Suite User Guide: High-Level Synthesis</a></p><p><a href="https://docs.xilinx.com/v/u/en-US/ug871-vivado-high-level-synthesis-tutorial">UG871-Vivado Design Suite Tutorial: High-Level Synthesis</a></p><p><a href="https://www.xilinx.com/content/dam/xilinx/support/documents/sw_manuals/ug1197-vivado-high-level-productivity.pdf">UG1197-UltraFast Vivado HLS Methodology Guide</a></p></blockquote>]]></content>
    
    
    <summary type="html">简要介绍了HLS工具及其使用方法</summary>
    
    
    
    <category term="FPGA" scheme="http://david-luge.cn/categories/FPGA/"/>
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/categories/FPGA/FPGA-Tools/"/>
    
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/tags/FPGA-Tools/"/>
    
  </entry>
  
  <entry>
    <title>低功耗设计简述</title>
    <link href="http://david-luge.cn/2023/03/24/IC/Basic/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1/"/>
    <id>http://david-luge.cn/2023/03/24/IC/Basic/%E4%BD%8E%E5%8A%9F%E8%80%97%E8%AE%BE%E8%AE%A1/</id>
    <published>2023-03-24T07:38:39.000Z</published>
    <updated>2023-03-24T07:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="低功耗设计"><a href="#低功耗设计" class="headerlink" title="低功耗设计"></a>低功耗设计</h1><p>芯片的整体功耗从根本上可以分为静态功耗和动态功耗；</p><p>静态功耗，又称漏电流功耗，是器件特性，和晶体管的阈值电压及其自身特性有关；</p><p>动态功耗，主要是芯片中的寄生RC电路的充放电引起的。换言之，当芯片中的电路出现任何信号翻转，都会产生动态功耗，其中所占最大比例的是时钟信号的翻转。</p><p>动态功耗还可以分为翻转功耗和短路功耗。翻转功耗和电压、翻转率和负载电容有关，所以降翻转功耗的措施就是降压、降翻转率和减负载电容；</p><p>短路功耗是指在晶体管翻转时，nMOS和pMOS会存在同时导通的情况，这时候产生的功耗称为短路功耗。</p><p>现代SoC的功耗主要集中在：时钟树功耗(40%)、CPU、GPU、存储器等；<br>功耗的整体计算公式为：</p><p>$$P&#x3D;(C{\times}V^2{\times}f)+(t{\times}V{\times}I{\times}f)$$</p><p>前面的部分是翻转功耗，后面的部分是短路功耗；</p><h2 id="静态低功耗技术"><a href="#静态低功耗技术" class="headerlink" title="静态低功耗技术"></a>静态低功耗技术</h2><p><strong>电源门控</strong>是直接切断电源来减少漏电流；</p><p>而<strong>多阈值工艺</strong>和<strong>体偏置</strong>则是通过改变CMOS管的阈值电压来减少静态功耗；</p><h3 id="电源门控"><a href="#电源门控" class="headerlink" title="电源门控"></a>电源门控</h3><p>指直接关掉某一不用模块的电源，这样可以直接关闭动态和静态功耗；</p><p>局限：会引入额外的开销；模块的唤醒需要时间，功耗达到最终的power gating功耗(即使power gating仍然会有少量的漏电流)也需要时间。如果芯片一直在工作，则power gating的收益就有些小。总结而言就是需要考虑唤醒开销和power gating节省的功耗哪个大。</p><p>实际做法：<br>1、两个电源域，每个电源域引出单独的物理管脚，直接物理关断；适合长时间的关断；<br>2、内部关断：在片上实现一个电源控制器，类似于一个开关，进行电压切换；</p><p>为了关断power，我们可以把Vdd换成Vss，也可以将Vss换成Vdd。但一般情况下最好把Vdd换成Vss，因为多电源域一般共地，但Vdd各不相同。<br>(注，Vdd中d&#x3D;device，指器件的工作电压；Vss中s&#x3D;series表示公共连接的意思，也就是公共接地端)</p><p>需添加专用的隔离单元(isolation cell)，如特殊处理的与门(输出与隔离信号相与，输出低电平)，隔离单元处于源模块，但电源一般不关；或者需要给出主电源和备用电源，保证在power down的时候隔离单元还能继续工作；</p><p>典型的门控电源的过程：<br>1、关闭时钟；<br>2、打开隔离信号；<br>3、发出save脉冲，提示保存好相关寄存器；<br>4、拉低rst_n；<br>5、关闭电源；<br>6、打开该电源域时，在复位信号拉高后发出恢复信号脉冲；</p><p>对于门控电源，具体的实现是在后端，对于架构来讲需要分清楚有几个电压域，有几种低功耗模式；对于前端来讲，要搞清楚接口信号，同时需要实现一个控制器来断电和唤醒电源域，且加上隔离模块；</p><h3 id="多阈值工艺"><a href="#多阈值工艺" class="headerlink" title="多阈值工艺"></a>多阈值工艺</h3><p>为了满足工作频率越来越高的要求，厂商逐渐降低晶体管的阈值电压Vt，使得晶体管能高速翻转；但是如果阈值电压Vt太低，则晶体管不能完全关断，这将产生很大的静态功耗；</p><p>相关名词：<br>HVT(High V threshold) 高电压阈值<br>LVT (Low V threshold)  低电压阈值<br>SVT(Standard V threshold) 标准电压阈值</p><p>阈值电压与器件速度和泄露功率的关系：<br>阈值电压↓ &#x3D;&gt; 器件速度↑ 泄露功率↑<br>阈值电压↑ &#x3D;&gt; 器件速度↓ 泄露功率↓</p><p>总结：在设计中可以在关键路径上使用低阈值的标准逻辑单元来优化时序；在非关键路径上使用高阈值标准逻辑单元来优化漏电流；</p><p>优点：<br>大大减少系统的静态功耗；<br>没有任何面积开销，工艺库设计是将两种阈值库中的相应单元的面积设计成一样的，这样可以方便替换；</p><h3 id="体偏置"><a href="#体偏置" class="headerlink" title="体偏置"></a>体偏置</h3><p>对同一晶体管而言，阈值电压也会发生变化。晶体管的阈值电压随着CMOS管衬底的偏置电压变化而变化，而阈值电压影响我们的静态功耗，所以我们可以通过改变偏置电压来改变阈值电压。<br>在工作模式下，MOS管的体偏置为0，MOS管处于低阈值状态，翻转速度快；<br>在等待模式下，MOS管的体偏置为反向偏置，处于高阈值状态，漏电流小；</p><p>注意：MOS管的体偏置需要时间，电路由等待模式转为工作模式的时间较长；</p><h2 id="动态低功耗技术"><a href="#动态低功耗技术" class="headerlink" title="动态低功耗技术"></a>动态低功耗技术</h2><h3 id="多电压域"><a href="#多电压域" class="headerlink" title="多电压域"></a>多电压域</h3><p>动态功耗的主要组成部分—翻转功耗，是Vdd的平方，静态功耗中的主要组成部分漏电流和Vdd成正比，所以降功耗最有效的方法就是降电压。<br>但降电压会增加延时，降低门单元的性能，所以很多低功耗技术就是在满足芯片性能要求的前提下，尽可能地降低芯片的工作电压Vdd。<br>如果不同电压域之间的驱动信号与接收信号距离很远，则需插入特殊的驱动单元(Repenter)来增强信号的驱动能力；如果不同的电压域可以单独断电，则需要考虑添加保持寄存器和电压隔离单元；</p><p>代价：<br>需要变压器；因为你拿0.7v的电压域信号去驱动1.0v的电压域很容易导致1.0v的晶体管时时刻刻在漏电，且变压器会造成延时；<br>时序分析不好做；<br>布局时电源网络更加复杂；<br>上电断电顺序可能是有要求的；<br>对于架构设计者而言，主要就是搞清楚电压是影响时序的，确保不会因为多电源域影响系统功能就好；</p><p>多电压域技术可以分为四种：<br>静态多电压技术(MSV)，对不同的模块固定为不同的电压；<br>动态电压频率缩放技术(DVFS)，对于该模块可以选择几种不同的电压配置，同时电压调整一般会同时调整频率，所以就称为动态电压频率缩放技术；<br>自适应电压频率缩放技术(AVFS)，DVFS需要软件根据不同的应用场景选择不同的电压频率配置，如果更进一步，对改模块的电压频率能够自适应地调整，那么就是自适应电压频率缩放技术；<br>电压关断技术(PSO)，如果某个模块在有些情况下不使用了，我们可以关掉这个模块的电压，需要的时候再打开，又称为电源门控，本质上是一种电压调节的特例；</p><h3 id="门控时钟"><a href="#门控时钟" class="headerlink" title="门控时钟"></a>门控时钟</h3><p>直接停掉时钟，这样可以减少动态功耗。实际上在数字芯片中时钟网络占用了很大功耗，可能超过50%。</p><p>举例说明门控时钟的概念：比如寄存器，当EN信号有效的时候才进行寄存，不如用EN信号将时钟信号进行屏蔽。<br>注意！门控时钟虽然是很直接的办法，但一般来说不用自己RTL层面写门控时钟，工具会自动优化，自己写的门控时钟有可能产生毛刺影响性能；</p><p>如果仅将时钟信号和时钟使能信号相与之后的输出作为模块的时钟输入，则可能存在毛刺；避免毛刺的方式有两种：<br>采用锁存门控；若锁存器和与门相差很远，则延迟差别较大，仍可能存在毛刺；若时钟使能信号距离锁存器关断信号很近，可能会不满足锁存器的建立时间从而出现亚稳态；<br>采用寄存门控；用寄存器来寄存EN信号再与上时钟信号得到门控时钟信号；此时需要寄存EN信号的寄存器满足建立时间要求；</p><p>实际中看起来寄存结构的门控时钟问题要少，但在实际的SoC中，使用最多的还是锁存结构的门控时钟；<br>最主要的原因是节省面积！一个DFF由两个锁存器组成，当大量的门控时钟插入到SoC芯片中时，这个节省的面积就相当可观了。<br>当然，这里说的是SoC芯片中使用的标准库单元。如果是FPGA或者用RTL实现，个人认为还是使用寄存器门控+setup约束来实现比较稳妥；</p><p>那在SoC中锁存门控的问题如何解决呢？在实际的SoC芯片中，要使用大量的门控时钟单元，所以通常会把门控时钟做成一个标准单元，由工艺厂商来提供。所以锁存器结构中线延时带来的问题就不存在了，因为是做成一个单元，线延时是可控和不变的，而且还可以通过挑选锁存器和增加延时，总是能满足锁存器的建立时间。这样通过工艺厂预先把门控时钟做成标准单元，这些问题都解决了。</p><p>做门控时钟的时候需要注意以下两点：<br>通常在位宽较大的寄存器上加时钟门控，因为加门控时钟本身也会增加面积和功耗，所以要综合考虑；<br>加了门控时钟之后要保证原本的电路功能不变；</p><p>Tips：<br>RTL编码中，将不用的数据设置成0并不能减少功耗，保持数据不变才能减少翻转，降低功耗。</p><h2 id="RTL级低功耗技术"><a href="#RTL级低功耗技术" class="headerlink" title="RTL级低功耗技术"></a>RTL级低功耗技术</h2><p>对于前端RTL设计而言，<strong>降低功耗无非两点</strong>：<br>对于寄存器，不工作的时候关闭时钟；<br>对于组合逻辑，减少无效的跳变；</p><p>设计中可以考虑的点：</p><ol><li><strong>状态机的编解码</strong>：在各种状态机的编码中，格雷码是最适合低功耗设计的。因为它在状态转换过程中每次只有一个触发器变化，同时，格雷码编码的状态机也消除了依赖于状态组合等式中存在毛刺的风险；</li><li><strong>门控时钟</strong>：编码方式   if（~rst_n） else if（en_load）；</li><li><strong>独热码多路器</strong>：将多输入MUX采用独热码编码方式，可以综合为与门和或门，降低功耗；</li><li><strong>操作数隔离</strong>，操作数隔离就是增加一些选择器件，如果这个操作数不需要的话就不选择它以及不进行这个操作数所需要的相应计算。在sel信号之前通过将sel和数据信号相与可以降低mux前端信号的翻转率；</li><li><strong>资源共享</strong>，将相同的处理使用组合逻辑预先产生，在调用的时候直接调用，不需要把相同的操作复制；</li><li><strong>总线翻转编码</strong>，在当前数据和下一个数据之间的汉明距离（汉明距离指的是两个数中不相同位的数量）大于N&#x2F;2的时，将下一个数据取反后再传输，以减少总线上出现转换的位数量，即总线反转编码；该技术的缺点是需要传输一个额外的控制位，用以表征总线数据是否进行了翻转编码，消耗了系统总线的带宽；</li></ol><p>当模块在某段时间完全不工作的时候，你可以：1、在这段时间里关掉这个模块的时钟；2、检查这个模块的输入，对于还在跳变的输入，将其全部固定为恒定值，这样才能根除这个模块的动态功耗；</p><h2 id="门级优化技术"><a href="#门级优化技术" class="headerlink" title="门级优化技术"></a>门级优化技术</h2><p>个人感觉节省的功耗比较鸡肋，仅做了解即可；</p><h3 id="毛刺的消除"><a href="#毛刺的消除" class="headerlink" title="毛刺的消除"></a>毛刺的消除</h3><p>毛刺指由于电路中信号的传输延迟引起的不必要的翻转；通过插入缓冲器改变信号的传输延迟从而消除信号的毛刺；</p><h3 id="逻辑级优化"><a href="#逻辑级优化" class="headerlink" title="逻辑级优化"></a>逻辑级优化</h3><p>引脚的重分配：对同一个门而言，有可能各Pin的功耗不一致，我们将变化率低的信号连接到低功耗的Pin上就有好处。用负载电容低的引脚去连接快速翻转的信号，降低系统的动态功耗；<br>重排序操作：通过对门级电路的重排序，使得其驱动的门数量降低，从而降低系统的动态功耗；</p><h3 id="物理级优化"><a href="#物理级优化" class="headerlink" title="物理级优化"></a>物理级优化</h3><p>使用低功耗的库；<br>使用低功耗的布局规划；<br>通过布局布线来减少毛刺；<br>在优化布局的时候调整缓冲器和连线的大小；<br>调整晶体管的大小减少负载电容；</p><h3 id="控制输入向量"><a href="#控制输入向量" class="headerlink" title="控制输入向量"></a>控制输入向量</h3><p>系统在睡眠状态下，控制输入向量可以明显减少系统的漏电流。（选择最小漏电流的向量作为组合逻辑的输入）</p><h1 id="以反相器为例解释静态-x2F-动态功耗"><a href="#以反相器为例解释静态-x2F-动态功耗" class="headerlink" title="以反相器为例解释静态&#x2F;动态功耗"></a>以反相器为例解释静态&#x2F;动态功耗</h1><p>反相器的结构如下图所示，由一个PMOS和一个NMOS串联而成，负载电容记为$C_L$。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241657743.png" alt="1"></p><h2 id="动态功耗"><a href="#动态功耗" class="headerlink" title="动态功耗"></a>动态功耗</h2><h3 id="电容充放电引起的动态功耗"><a href="#电容充放电引起的动态功耗" class="headerlink" title="电容充放电引起的动态功耗"></a>电容充放电引起的动态功耗</h3><p>当$C_L$通过PMOS充电时，$V_{C_L}$从0V上升至$V_{DD}$，电路从电源$V_{DD}$上抽取一定的能量，一部分消耗在PMOS上，另一部分被电容$C_L$存储。$V_{out}$由高至低进行电平翻转时，$C_L$通过NMOS放电，之前存储在$C_L$中的能量被NMOS消耗。</p><p>下面计算$V_{out}$由低至高电平翻转的过程从电源上抽走的能量，假设$V_{in}$的电平上升和下降时间为零，即NMOS和PMOS不可能同时导通，此时CMOS反相器可以等效为下图所示的电路。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241704535.png" alt="2"></p><p>$i_{VDD}$和$V_{out}$是随时间变化的，可以看做是时间的函数，在0—dt时间范围内从电源上抽取的能量微元为：</p><p>$$dE_{VDD}&#x3D;i_{VDD}V_{DD}dt$$</p><p>理论上$C_L$充电至$V_{DD}$所用的时间为无穷大，因此$C_L$充电过程中从电源上抽取的总能量为：<br>$$<br>E_{VDD}&#x3D;\int_{0}^{\infty}i_{VDD}(t)V_{DD},dt&#x3D;V_{DD}\int_{0}^{\infty}C_L\frac{d_{V_{out}(t)}}{dt},dt&#x3D;C_LV_{DD}\int_{0}^{\infty},dV_{out}&#x3D;C_LV_{DD}^2<br>$$<br>电容$C_L$在0—dt时间范围内存储的能量微元为：<br>$$<br>d_{E_C}&#x3D;i_{VDD}(t)V_{out}(t)dt<br>$$<br>电容$C_L$充电至$V_{DD}$存储的能量为：<br>$$<br>E_C&#x3D;\int_{0}^{\infty}i_{VDD}(t)V_{out}(t),dt&#x3D;\int_{0}^{\infty}V_{out}(t)C_L\frac{dV_{out}}{dt},dt&#x3D;C_L\int_{0}^{V_{DD}}V_{out},dV_{out}&#x3D;\frac{1}{2}C_LV_{DD}^2<br>$$<br>由$E_{VDD}$和$E_{C}$可以看出，电容$C_L$充电期间从电源抽取的能量只有一半存储到$C_L$中了，另一半被PMOS消耗，而存储到电容$C_L$中的这一半能量将在电容放电期间被NMOS消耗掉，也就是说CMOS反相器每经过一次开关周期（“0”→“1”→“0”）所消耗的能量为$C_LV_{DD}^2$，如果一个反相器每秒开关f次，则功耗为：<br>$$<br>P_{dyn}&#x3D;\frac{E_{VDD}}{T}&#x3D;C_LV_{DD}^2f<br>$$<br>其中，T为开关周期，f为开关频率。</p><h3 id="NMOS和PMOS同时导通（过渡区）引起的功耗"><a href="#NMOS和PMOS同时导通（过渡区）引起的功耗" class="headerlink" title="NMOS和PMOS同时导通（过渡区）引起的功耗"></a>NMOS和PMOS同时导通（过渡区）引起的功耗</h3><p>前面假假设了输入波形的上升、下降时间为零，这是个理想状态，实际上$V_{in}$的上升、下降时间不可能为零，当CMOS反相器处于两个管子同时导通的过渡区时，电源对地有一条直流通路，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241728158.png" alt="3"></p><p>当直流脉冲可近似看做三角形以及输入电平上升与下降时间相等时，每经过一个开关周期（“0” →“1” →“0”）所消耗的能量为：<br>$$<br>E_{dp}&#x3D;E_{dpr}+E_{dpf}<br>$$<br>$E_{dpr}$即$V_{in}$电平上升期间的直流通路能耗，通过上图(b)可以发现，$0{\sim}{\frac{t_{sc}}{2}}$这段时间的瞬时电流$i(t)&#x3D;2\frac{I_{peak}}{t_{sc}}t$，在$\frac{t_{sc}}{2}{\sim}t_{sc}$的这段时间瞬时电流$i(t)&#x3D;-2\frac{I_{peak}}{t_{sc}}t$，$V_{in}$从低至高电平转换期间的能耗为：<br>$$<br>E_{dpr}&#x3D;\int_{0}^{t_{sc}}i(t)V_{DD},dt&#x3D;2\int_{0}^{\frac{t_{sc}}{2}}i(t)V_{DD},dt&#x3D;4V_{DD}\frac{I_{peak}}{t_{sc}}\int_{0}^{\frac{t_{sc}}{2}}t,dt&#x3D;\frac{1}{2}V_{DD}I_{peak}t_{sc}<br>$$<br>同理可得$V_{in}$从高至低电平转换期间的能耗为：<br>$$<br>E_{dpf}&#x3D;\frac{1}{2}V_{DD}I_{peak}t_{sc}<br>$$<br>由此可知电路在过渡区的总能耗为：<br>$$<br>E_{dp}&#x3D;E_{dpr}+E_{dpf}&#x3D;V_{DD}I_{peak}t_{sc}<br>$$<br>所以$V_{in}$一个周期内的平均功耗为：<br>$$<br>P_{dp}&#x3D;\frac{E_{dp}}{T}&#x3D;E_{dp}f&#x3D;V_{DD}I_{peak}t_{sc}f&#x3D;C_{sc}V_{DD}^2f<br>$$<br>从平均功耗的表达式可以看出过渡区的动态功耗是一个类电容功耗，$C_{sc}$为过渡区的等效电容，$t_{sc}$为过渡区时长，f为$V_{in}$的电平跳变频率。</p><h2 id="静态功耗"><a href="#静态功耗" class="headerlink" title="静态功耗"></a>静态功耗</h2><p>理想情况下，CMOS反相器在稳态工作时PMOS与NMOS不会同时导通，这就意味着稳态时电源与地之间没有通路，不会形成通路电流，静态功耗为零，可实际电路里总有一些微弱的泄漏电流$I_{stat}$流过源或漏与衬底之间的反偏二极管，如下图所示，此时的静态功耗为：<br>$$<br>P_{stat}&#x3D;V_{DD}I_{stat}<br>$$<br><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303242223033.png" alt="4"></p><h2 id="总功耗"><a href="#总功耗" class="headerlink" title="总功耗"></a>总功耗</h2><p>显然，CMOS反相器的总功耗可以表示成三个部分的和，即:<br>$$<br>P_{total}&#x3D;P_{dyn}+P_{dp}+P_{stat}&#x3D;(C_LV_{DD}^2+V_{DD}I_{peak}t_{sc})f+V_{DD}I_{stat}<br>$$<br>最主要的功耗是等效电容的充放电造成的$P_{dyn}$，过渡区的功耗$P_{dp}$可以通过调整过渡区宽度控制在限定范围内，静态功耗目前可忽略。</p><blockquote><p>Reference</p><p>Jan M. Rabaey, Anantha Chandrakasan, Borivoje Nikolic, 2004. Digital Integrated Circuits :A Design Perspective ,Second Edition.</p></blockquote>]]></content>
    
    
    <summary type="html">简述芯片的低功耗设计</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>FPGA与ASIC的区别</title>
    <link href="http://david-luge.cn/2023/03/24/IC/Basic/FPGA%E4%B8%8EASIC%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://david-luge.cn/2023/03/24/IC/Basic/FPGA%E4%B8%8EASIC%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2023-03-24T03:39:39.000Z</published>
    <updated>2023-03-24T03:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FPGA与ASIC的区别"><a href="#FPGA与ASIC的区别" class="headerlink" title="FPGA与ASIC的区别"></a>FPGA与ASIC的区别</h1><ul><li><p><strong>测试逻辑</strong>：ASIC要考虑SCAN测试和BIST的问题；（DFT：Design For Test）</p></li><li><p><strong>存储资源</strong>：一般而言，ASIC设计中使用的memory是SRAM与Flop&#x2F;Latch Array，前端工程师可以根据不同的存储规模选择合适的类型；而FPGA中memory的种类较多且资源受限，一般有Distributed RAM&#x2F;Block RAM&#x2F;Ultra RAM等，FPGA设计者一般会在微架构设计中根据存储规模更细致地考虑好各memory使用的资源类型；</p></li><li><p><strong>计算资源</strong>：ASIC设计的计算资源主要采用<strong>synopsys designware</strong>、其他vendor或者自主设计的IP；而FPGA设计则主要使用片上的<strong>DSP单元</strong>，DSP单元在FPGA上是hardwired，时序比较好，但功能相对也比较固定，所以FPGA设计者一般会充分DSP单元中固定位宽的乘法器与加法器。在ASIC设计中，累加一般采用加法树设计，而FPGA中则更倾向于使用级联设计，这样可以利用DSP单元间专用的进位布线资源，提高设计的时序；</p></li><li><p><strong>逻辑资源</strong>：ASIC设计中的逻辑资源是标准单元库中的logic cell，而FPGA设计中的逻辑资源是CLB中的LUT（4&#x2F;5&#x2F;6输入LUT，具体看FPGA型号）与MUX。<strong>这里就体现了ASIC和FPGA一个最大区别</strong>：估算逻辑深度的方法不同：FPGA没有逻辑深度，就是一个查找表，查找表的深度仅和输入信号的数目有关；而ASIC是有逻辑深度的，在RTL Coding的时候，需要预估逻辑综合出来的级数，哪怕输入信号不多，但逻辑复杂度大的话，也需要拆成2拍；</p></li><li><p><strong>低功耗设计</strong>：ASIC的低功耗设计可以采用clock gating与power gating，但FPGA无法做到power gating，clock信号在FPGA中有专用的布线资源，因此也不建议使用clock gating的方式，但可以用clock enable的方式替代；</p></li><li><p><strong>时钟复位</strong>：clock信号在FPGA中有专用的布线资源，而ASIC内的时钟为了更小的skew会专门进行CTS；ASIC设计中一般使用异步复位，由后端负责处理复位树，FPGA设计中则建议使用同步复位；</p></li></ul><h2 id="FPGA与ASIC在代码层面的区别"><a href="#FPGA与ASIC在代码层面的区别" class="headerlink" title="FPGA与ASIC在代码层面的区别"></a>FPGA与ASIC在代码层面的区别</h2><ul><li><p>ASIC更趋于保守，对逻辑的任何改动都要三思，并要做备选的选择，以防改错，RTL的任何修改几乎都是增量修改；</p></li><li><p>ASIC对coding style的要求更高，所有模块的coding风格要求一致，这样有利于后端以及后续的check；</p></li><li><p>ASIC要考虑SCAN测试和BIST的问题，所以设计的时候需要为SRAM做BIST插入，需要为SCAN预留接口；虽然大部分都是工具干的，但是RTL作者也需要手动做一些顶层工作，比如SCAN时钟的来源等逻辑；</p></li><li><p>ASIC时序预见性更好，可调整度高，所以可以写很大的逻辑；</p><p><strong>关键词：保守改动、代码风格、测试逻辑、逻辑级数</strong></p></li></ul>]]></content>
    
    
    <summary type="html">简述芯片与FPGA的区别</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>芯片设计流程简述</title>
    <link href="http://david-luge.cn/2023/03/24/IC/Basic/%E8%8A%AF%E7%89%87%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/"/>
    <id>http://david-luge.cn/2023/03/24/IC/Basic/%E8%8A%AF%E7%89%87%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B%E7%AE%80%E8%BF%B0/</id>
    <published>2023-03-24T03:38:39.000Z</published>
    <updated>2023-03-24T03:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="芯片设计流程简述"><a href="#芯片设计流程简述" class="headerlink" title="芯片设计流程简述"></a>芯片设计流程简述</h1><h3 id="1、需求分析"><a href="#1、需求分析" class="headerlink" title="1、需求分析"></a>1、需求分析</h3><p>分析用户或市场的需求，并将其翻译成对芯片产品的技术要求；</p><h3 id="2、算法-x2F-架构设计"><a href="#2、算法-x2F-架构设计" class="headerlink" title="2、算法&#x2F;架构设计"></a>2、算法&#x2F;架构设计</h3><ul><li>算法设计：设计和优化芯片中所使用的算法；这一阶段一般使用高级编程语言(如C、C++)，利用算法级建模和仿真工具(如MATLAB)进行浮点和定点的仿真，进而对算法进行评估和优化；</li><li>架构设计：根据设计的功能需求和算法分析的结果，设计芯片的架构，并对不同的方案进行比较，选择性能价格最优的方案。这一阶段可以用SystemC语言对芯片架构进行模拟和分析；</li></ul><h3 id="3、RTL设计"><a href="#3、RTL设计" class="headerlink" title="3、RTL设计"></a>3、RTL设计</h3><p>使用HDL语言(Verilog、VHDL)完成对设计实体的RTL级描述。</p><h3 id="4、RTL验证-功能仿真-x2F-前仿"><a href="#4、RTL验证-功能仿真-x2F-前仿" class="headerlink" title="4、RTL验证(功能仿真&#x2F;前仿)"></a>4、RTL验证(功能仿真&#x2F;前仿)</h3><p>使用仿真工具或者其他RTL代码分析工具，验证RTL代码的质量和性能；</p><h3 id="5、综合"><a href="#5、综合" class="headerlink" title="5、综合"></a>5、综合</h3><p>从RTL代码生成描述实际电路的门级网表文件；</p><h3 id="6、门级验证-后仿"><a href="#6、门级验证-后仿" class="headerlink" title="6、门级验证(后仿)"></a>6、门级验证(后仿)</h3><p>对综合产生的门级网表进行验证，这一阶段通常会使用仿真、静态时序分析和形式验证等工具；</p><h3 id="7、布局布线"><a href="#7、布局布线" class="headerlink" title="7、布局布线"></a>7、布局布线</h3><p>后端对综合产生的门级网表进行布局规划(FloorPlanning)、布局(Placement)、布线(Routing)，生成生产用的版图；</p><h3 id="8、电路参数提取"><a href="#8、电路参数提取" class="headerlink" title="8、电路参数提取"></a>8、电路参数提取</h3><p>确定芯片中互连线的寄生参数，从而获得门级的延时信息；用于更准确地后仿以及静态时序分析；</p><h3 id="9、版图后验证"><a href="#9、版图后验证" class="headerlink" title="9、版图后验证"></a>9、版图后验证</h3><p>根据后端设计后取得的新的延时信息，再次验证设计能否可以实现所有的功能、是否达到所有的性能指标；</p><h3 id="10、芯片生产"><a href="#10、芯片生产" class="headerlink" title="10、芯片生产"></a>10、芯片生产</h3><p>在特定的芯片工艺线上制造出芯片；</p><h3 id="11、芯片测试"><a href="#11、芯片测试" class="headerlink" title="11、芯片测试"></a>11、芯片测试</h3><p>对制造好的芯片进行测试，检测生产中产生的缺陷和问题；</p>]]></content>
    
    
    <summary type="html">简述芯片的设计流程</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>修Timing Violation的若干方法</title>
    <link href="http://david-luge.cn/2023/03/23/IC/Basic/%E4%BF%AETiming%20Violation%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/"/>
    <id>http://david-luge.cn/2023/03/23/IC/Basic/%E4%BF%AETiming%20Violation%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/</id>
    <published>2023-03-23T01:15:39.000Z</published>
    <updated>2023-03-23T01:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://mp.weixin.qq.com/s/DCMRXW-bF8Z7r7SPnRC5jQ">探STA|修timing violation的二十一种方法</a></p><p>如有任何版权问题请联系博主。</p></blockquote><p>其实修setup violation和hold violation是对立统一的，例如我们通过insert buffer修一个setup violation，那么有时我们也可以通过remove buffer修一个hold violation。</p><h1 id="Fix-setup-violation"><a href="#Fix-setup-violation" class="headerlink" title="Fix setup violation"></a>Fix setup violation</h1><p>Setup violation的本质是一个时钟周期内上一级寄存器锁存的数据无法正确地传输到下一级寄存器并被正确地锁存，也就是数据跑的太慢了。或者换个思路，是当前寄存器的时钟跑的快了。</p><p>插buffer来fix setup violation主要从信号的slew考虑，减buffer来fix setup violation主要从cell delay的角度考虑。选择何种方式主要看load capacitance。</p><p>首先看一下slew的解释，以及与cell delay的相关参数。</p><blockquote><p>A slew rate is defined as a rate of change.</p><p>A simple timing model is a linear delay model, where the delay and the output transition time of the cell are represented as linear functions of the two parameters: input transition time and the output load capacitance.</p><p>—《Static timing analysis for nanometer designs》</p></blockquote><p>下面两个评论是从插buffer的角度考虑</p><blockquote><p>Buffers increases drive strength of signal and so delay decreases. This is like a repeater in a communication systems .  where repeater will re-shape the signal to match it to ideal one and thus time taken by signal to transition from 1-&gt;0 and 0-&gt;1 decreases.</p></blockquote><blockquote><p>If you insert the buffer, the signal strength will be improved. This will charge the load Cap fast. When the Cap gets charged fast, you will have less rise &amp; fall delay. This will reduce the delay. That’s it.</p></blockquote><p>下面的评论是从减buffer的角度考虑</p><blockquote><p>Decrese the load Cap. can decrease the cell delay. until the load Cap, is much smaller than the output Cap, of the cell itself, the delay will nearly not change at all. We can call the delay instrinsic delay.<br>If a timing path consists of cells with instrinsic delay, insert buffer will just increase the delay.</p></blockquote><h2 id="减少Data-Path上的Buffer数量"><a href="#减少Data-Path上的Buffer数量" class="headerlink" title="减少Data Path上的Buffer数量"></a>减少Data Path上的Buffer数量</h2><p>这会减少cell delay。cell级数减少了，这种减小也不是单纯地几何倍数的减小，减小的程度应该是<strong>小于</strong>remove buffer的数量×原来的cell delay；因为net wire变长之后，电流从net一端传播到net另一端衰减更加严重，对器件的充电速度变慢。</p><p>但是该方式会增加net delay，net wire总长度变大，RC参数变大，RC曲线更加绵长。</p><h2 id="使用一对inverter替换Buffer"><a href="#使用一对inverter替换Buffer" class="headerlink" title="使用一对inverter替换Buffer"></a>使用一对inverter替换Buffer</h2><p>我们知道buffer的结构基本上等价于两个inverter，使用一对inverter替换buffer可以减少data path上总的delay。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241516536.png" alt="1"></p><p>和只用一个buffer相比，一对反相器会两倍的减少信号的transition time，这会减少RC delay。而一个buffer的cell delay约等于一对inverter的cell delay，所以总的delay减少了。</p><h2 id="Swap-VT"><a href="#Swap-VT" class="headerlink" title="Swap VT"></a>Swap VT</h2><p>这就是换cell的阈值电压(voltage threshold)，就是把HVT(High)换成SVT&#x2F;RVT(Standard&#x2F;Regular)或者LVT(Low)。</p><p>相同情况下low VT的cell的栅极阈值电压更低，所以对于该cell本身其slew更小；相同情况下low VT的cell的栅极导通电流更大，所以其对于后续的net wire的充电速度更快。</p><p>所以low VT的cell相当于从cell delay和net delay两种角度去减小了总的delay。</p><p>不过，Low VT的cell静态电流更大，静态功耗也更大。</p><h2 id="Size-up-cell"><a href="#Size-up-cell" class="headerlink" title="Size-up cell"></a>Size-up cell</h2><p>一般来说大驱动的cell具有更高的speed，但是可能某些cell类型，更大的cell可能速度更慢。</p><p>不过，这样也会使得power更高，area更大。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241522391.png" alt="2"></p><h2 id="Insert-buffer"><a href="#Insert-buffer" class="headerlink" title="Insert buffer"></a>Insert buffer</h2><p>插buffer会减小transition time，这会减小net delay。如果总的net delay的减小 大于 cell delay的增加；那么总的delay就会减小。</p><p>不过，这也会导致power和area增加。</p><h2 id="Insert-repeater"><a href="#Insert-repeater" class="headerlink" title="Insert repeater"></a>Insert repeater</h2><p>这跟insert buffer类似，不过区别在于场景的不同。</p><p>Long net wire会导致大的RC delay，如果insert repeater可以将net wire切分成多段可以减少总的net delay；因为总的net delay的减少 大于 cell delay的增加，所以这是一种有效的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241525219.png" alt="3"></p><h2 id="调整cell在版图的location"><a href="#调整cell在版图的location" class="headerlink" title="调整cell在版图的location"></a>调整cell在版图的location</h2><p>本质也是减少net delay.</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241527977.png" alt="4"></p><h2 id="调整clock-skew"><a href="#调整clock-skew" class="headerlink" title="调整clock skew"></a>调整clock skew</h2><p>就是通过skew的调整向后一级接setup的余量。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241531184.png" alt="5"></p><h2 id="给critial-path用NDR走线"><a href="#给critial-path用NDR走线" class="headerlink" title="给critial path用NDR走线"></a>给critial path用NDR走线</h2><p>与CTS绕线原理类似，就是减少net wire的RC和cross-talk。</p><p>NDR全称是Non default routing rule，非默认绕线规则。默认的绕线规则都是单位宽度，对于clock path或者critial path可以采取双倍宽度的绕线宽度。</p><h2 id="手动走线"><a href="#手动走线" class="headerlink" title="手动走线"></a>手动走线</h2><p>手动换高层走线或者手动把net wire捋直。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241552917.jpg" alt="6"></p><p>直观感受一下，上图中橘色的为金属，高层的走线粗，电阻小，所以RC小，delay小。</p><h2 id="修crosstalk"><a href="#修crosstalk" class="headerlink" title="修crosstalk"></a>修crosstalk</h2><p>修crosstalk除了加shielding和NDR rule以外，还有一种方法是：违例点周围的各种走线remove掉或者拉的远一点。</p><h2 id="降频"><a href="#降频" class="headerlink" title="降频"></a>降频</h2><p>如果实在修不下去，该降就降吧。</p><h2 id="换库"><a href="#换库" class="headerlink" title="换库"></a>换库</h2><p>实在不行，也可以选用一些speed更快的库，或者自己定做一些库。</p><p>该方法也分全局换库和局部换库，全局就是整个design都换，局部就是让critical path用一些特殊的库。</p><h2 id="调整floorplan"><a href="#调整floorplan" class="headerlink" title="调整floorplan"></a>调整floorplan</h2><p>通过调整floorplan使得具有交互的module的位置更合理。</p><h2 id="split-multi-bit-flip-flop"><a href="#split-multi-bit-flip-flop" class="headerlink" title="split multi-bit flip-flop"></a>split multi-bit flip-flop</h2><p>因为MBFF cell内部的<strong>公共</strong>走线和<strong>公共</strong>的晶体管更多，所以其本身的load Cap更大，则transition time就更大，delay就更大。因此可以通过拆分MBFF Cell来fix setup violation。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241557552.png" alt="7"></p><h2 id="使用PBA代替GBA"><a href="#使用PBA代替GBA" class="headerlink" title="使用PBA代替GBA"></a>使用PBA代替GBA</h2><p>GBA 的全称是（Graph Base Analysis）。STA工具计算 timing 时，默认是采用 GBA 模式来报 timing 的，是工具默认的分析方式。它是说工具在从lib中读取cell的delay的时候，永远是读取<strong>由最差transition产生的delay</strong>。PBA是path based analysis，指的是我要分析哪条timing path，就用这条timing path的transition来查cell的delay。pba算法复杂，分析时间大大提高，但结果更为精确。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241558706.png" alt="8"></p><h2 id="打拍"><a href="#打拍" class="headerlink" title="打拍"></a>打拍</h2><p>打拍就是在reg2reg path中间再加一个reg，一个周期搞不定的事情，分成两个周期来做。</p><h2 id="改RTL"><a href="#改RTL" class="headerlink" title="改RTL"></a>改RTL</h2><p>如果RTL综合出来本身的timing path逻辑级数太长或者组合逻辑太多，可以考虑改RTL。</p><h1 id="Fix-Hold-violation"><a href="#Fix-Hold-violation" class="headerlink" title="Fix Hold violation"></a>Fix Hold violation</h1><h2 id="Add-Delay"><a href="#Add-Delay" class="headerlink" title="Add Delay"></a>Add Delay</h2><p>可以使用buffer、inverter pairs、delay cell来修hold violation。</p><p>由于hold violation path的start point和end point可能对应着别的setup violation path（或者setup slack比较紧张），所以add delay时需要格外小心。</p><p>此外，一般不在两条timing path的common path增加delay。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303241604159.png" alt="9"></p><h2 id="Size-down-cell"><a href="#Size-down-cell" class="headerlink" title="Size-down cell"></a>Size-down cell</h2><p>尽可能去size end-point附近的cell，这样对别的path影响较小。</p><p>另外修crosstalk和手动走线也可修hold。</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>有时候面试官会问，流片完了还是有setup&#x2F;hold violation怎么办，可以从以下角度去考虑回答。</p><p>Fix setup violation：降频使用；</p><p>Fix hold violation：在setup margin比较足的情况下可以降压，不足的情况下可以降频降压使用；</p>]]></content>
    
    
    <summary type="html">简要介绍了修Timing Violation的若干方法</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>Physical aware synthesis是什么</title>
    <link href="http://david-luge.cn/2022/11/04/IC/Basic/Physical%20Synthesis%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://david-luge.cn/2022/11/04/IC/Basic/Physical%20Synthesis%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2022-11-04T01:15:39.000Z</published>
    <updated>2022-11-04T01:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自<a href="https://mp.weixin.qq.com/s/wX1rPgGrn4IwHfXc-f_e9Q">论综合：为什么做physical aware synthesis</a></p><p>如有任何版权问题请联系博主。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工艺的更新给整个半导体行业带来了巨大的挑战，从生产设备、EDA再到芯片设计实现都需要紧跟更新的工艺点亮新技能。下图直观地呈现了从65nm到16&#x2F;14nm由工艺进步引入的需要额外考虑的因素。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202211032356068.jpg" alt="phsy"></p><p>在芯片设计实现流程中，P&amp;R工程师对工艺带来的挑战感受会更直接，综合、STA、DFT 也都有新的方法学的更新，但大都被 EDA 工具严实地包了起来，就拿综合来说，相对于传统综合而言最大的更新莫过于physical aware synthesis。</p><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>最根本的目的就是减少前后端的迭代次数，前后端迭代次数多的根本原因是前后端的关联度(correlation)差，而correlation需要从timing 和 congestion 两个方面来看：</p><h3 id="Timing"><a href="#Timing" class="headerlink" title="Timing"></a>Timing</h3><p>综合优化的对象是 timing path，而 Timing path delay &#x3D; net delay + cell delay，90nm之前 timing path delay 由cell delay 主导，而进入65nm，net delay所占比例日渐增加，进入40nm之后几乎跟cell delay平分秋色。所以从40nm开始physical synthesis 被硅农熟知，因为physical aware synthesis在优化过程中可以看到更精确的net delay。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210092022883.jpeg" alt="preview"></p><p><strong>那么为什么logical synthesis不能精确计算net delay呢？</strong>这就要回看一下传统综合是如何估算 net delay 的。传统综合俗称logic synthesis，它根据WLM 来估算net delay。WLM (wire load model) 由foundry 提供，WLM通常包括面积系数、电容系数和单位长度的电阻系数，以及一个用于估计net长度的表格，表的index是 fanout，直白地说就是将net的长度拟合成fanout 的函数。</p><p>按照WLM来计算，下图中的blue器件到red器件的所有net长度都一样，net delay也一样，而实际上 net 行走的姿势五花八门，根本就不可能一样，缺点显而易见。另一个缺陷是WLM 的单位电容电阻是一个常值，无法模拟不同layer RC 值的差异，而工艺进入16nm 之后，必须要考虑 layer aware 的 net delay。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210092025068.jpeg" alt="preview"></p><p>在40nm甚至28nm，依然有人在用传统的方式来做综合，做法简单粗暴加时钟周期30%甚至更多的过约，这样做是可以cover net delay，但是实在是过犹不及。据统计在一颗芯片里80%以上的线都是短线，为了cover那不到20%的线，付出的代价就是更大的面积及更多的功耗。</p><p><strong>那Physical synthesis是如何更精确的计算net delay？</strong>要精确计算net delay必须要知道net的行走姿势，而要知道net 的行走姿势必需要知道：它来自哪里？要去向何方？这就需要知道cell 的位置，cell 位置确定了之后，综合工具会做global 绕线，根据global 绕线的结果来估算net delay。cell 位置由placement 确定，所以如今综合工具都集成了 placement 引擎，这也是做 physical synthesis 的关键所在。目前大概有两种做place的方式：</p><ul><li>做完优化跟mapping之后，再做place，操作对象是std cell；</li><li>在elaborate 之后优化之初就做place, 即所谓的 early physical, 早期阶段针对module 做palce，mapping之后再以std cell为对象做place；</li></ul><p>下图是谷歌上随便找的一张图，只为显示什么是module place,  从Layout 上看每一个颜色对应一个 module。综合工具基本都按 translation + optimization + mapping 三大步来走， 所有结构的选择跟大部分优化的动作都在 optimization 这一步完成，如果可以在 optimization 时就知道 module 的位置信息，优化会更有的放矢会更能『精准打击』，所以 Early physical 十分必要。现在看到的趋势是把更多的物理信息拿到前端来，越早考虑物理信息得到的结果会越好。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210092031003.jpeg" alt="preview"></p><p>结论：physial synthesis根据真实的物理信息，用跟P&amp;R一致的 place 引擎跟 global route 引擎，可以精确估算 net delay，并且是layer aware的。通常physical synthesis 只需过约时钟周期5%~10%即可，用于cover legalization跟detail route 的影响。</p><h3 id="Congestion"><a href="#Congestion" class="headerlink" title="Congestion"></a>Congestion</h3><p>同样由于工艺进步，集成度提高，单位面积上要走的线骤增，所以 congestion 成了一个从RTL 设计就要开始关注的问题，否则到了绕线的时候绕不通，前面所做的一切都成了无用功。很显然，logical 综合是无法考虑 congestion 的，要在综合阶段做congestion优化必须要 physical synthesis.</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210092033144.jpeg" alt="preview"></p><p>其实不论PPA还是congestion主导决定权都在进实现之前，<strong>架构算法设计</strong>，才是真正决定一切的『权贵』，所以才说实现是个没有灵魂的工种，只要按着 设计&#x2F;EDA&#x2F;foundry 定的规则往下走就可以，切忌的就是『发挥』。</p><p>对于congestion，综合工具能做的基本只有两件事：选结构跟推cell。至于选结构，一个例子就是把一个大MUX 拆成多级MUX用于解congestion。推cell这一点完全依赖于EDA 工具，如果你不知道如何做，那就找AE要变量或 option 让工具在综合做place时将 congestion 严重区域的cell推散。除此之外，还有一点可以人为干预，禁用或让工具少用size 小的复杂cell。</p><p>要特别说明一点，在16nm之后，layer的影响特别大，所以综合用的DEF一定要有special net 部分，也就是你的power plan，让工具在综合时清楚地知道哪些layer的绕线资源已经被占用。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://cse.unl.edu/~seth/990/Pubs/What%20is%20physical%20synthesis.pdf">What is Physical Synthesis_IBM</a></p><p><a href="https://www.synopsys.com/glossary/what-is-physical-synthesis.html">What is Physical Synthesis?_synopsys</a></p>]]></content>
    
    
    <summary type="html">简要介绍了Physical aware synthesis的目的及优势</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>RTL Coding Style</title>
    <link href="http://david-luge.cn/2022/10/10/IC/Basic/RTL%20Coding%20Style/"/>
    <id>http://david-luge.cn/2022/10/10/IC/Basic/RTL%20Coding%20Style/</id>
    <published>2022-10-10T11:15:39.000Z</published>
    <updated>2022-10-10T11:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RTL-Coding-Style"><a href="#RTL-Coding-Style" class="headerlink" title="RTL Coding Style"></a>RTL Coding Style</h1><h2 id="标准的文件头"><a href="#标准的文件头" class="headerlink" title="标准的文件头"></a>标准的文件头</h2><p>在每一个版块的开头一定要使用统一的文件头，其中包括作者名，模块名，创建日期，概要，更改记录，版权等必要信息。</p><p>建议使用以下的文件头</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **************************************************************</span></span><br><span class="line"><span class="comment">// COPYRIGHT(c) XDU ImgLab</span></span><br><span class="line"><span class="comment">// All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Module name  :  Module_name of this file just as “tx_fifo”</span></span><br><span class="line"><span class="comment">// Full name    :  Full English name of this abbreviation</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Author       :  Athor/ID </span></span><br><span class="line"><span class="comment">// Email        :  Author’s email</span></span><br><span class="line"><span class="comment">// Abstract     :  Describe the function of the module briefly </span></span><br><span class="line"><span class="comment">// Character Set:  GB-2312</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Modification history</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Date       By        Version       Change Description            </span></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------- </span></span><br><span class="line"><span class="comment">// 22/10/10   David     v0.1          first try </span></span><br><span class="line"><span class="comment">// *********************************************************************</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="标准的module格式"><a href="#标准的module格式" class="headerlink" title="标准的module格式"></a>标准的module格式</h2><p>对于模块的书写采用统一的格式便于项目内部成员的理解和维护，其内容解释如下：</p><ul><li>端口定义按照输入，输出，双向的顺序；</li><li>模块名、模块例化名统一，例化名前加小写u_以区分 （ 多次例化另加标识 ），三者关系：<ul><li>文件名 ：xxx .v  (小写)</li><li>模块名 ：xxx      (小写)</li><li>例化名 ：u_xxx</li></ul></li></ul><h2 id="一致的排版"><a href="#一致的排版" class="headerlink" title="一致的排版"></a>一致的排版</h2><h3 id="一致的缩排"><a href="#一致的缩排" class="headerlink" title="一致的缩排"></a>一致的缩排</h3><ul><li><p>统一的缩排取4个空格宽度（注意尽量别使用TAB键缩进，不同的IDE对TAB缩进的解释可能不同）</p></li><li><p>输入输出信号的宽度定义与关键字之间，信号名与宽度之间要用空格分开；所有宽度定义对所有信号名对齐，代码风格统一如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">input</span>   [<span class="number">3</span>:<span class="number">0</span>]    input_a   ;    <span class="comment">// *****</span></span><br><span class="line"><span class="keyword">input</span>            input_b   ;    <span class="comment">// *****</span></span><br><span class="line">       …</span><br><span class="line"><span class="keyword">output</span>  [<span class="number">127</span>:<span class="number">0</span>]  output_a ;</span><br><span class="line"><span class="keyword">output</span>  [<span class="number">15</span>:<span class="number">0</span>]   output_b ;</span><br><span class="line"><span class="keyword">output</span>           output_c ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="一致的begin-end书写方式"><a href="#一致的begin-end书写方式" class="headerlink" title="一致的begin  end书写方式"></a>一致的begin  end书写方式</h3><p>always中，一定要用begin end区分，格式和代码风格统一如下：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @ (postedge clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (rst_n == <span class="number">1&#x27;b0</span>)</span><br><span class="line">        syn_rst&lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (a == b)</span><br><span class="line">            syn_rst&lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            syn_rst&lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>if else中仅有一个语句行时，不要使用begin end；如果有多个语句行时，注意缩进四个空格。</p><h2 id="一致的信号命名风格"><a href="#一致的信号命名风格" class="headerlink" title="一致的信号命名风格"></a>一致的信号命名风格</h2><table><thead><tr><th align="center">全称</th><th align="center">缩写</th><th align="center">中文含义</th></tr></thead><tbody><tr><td align="center">acknowledge</td><td align="center">ack</td><td align="center">应答</td></tr><tr><td align="center">address</td><td align="center">addr(ad)</td><td align="center">地址</td></tr><tr><td align="center">arbiter</td><td align="center">arb</td><td align="center">仲裁</td></tr><tr><td align="center">check</td><td align="center">chk</td><td align="center">校验，如CRC校验</td></tr><tr><td align="center">clock</td><td align="center">clk</td><td align="center">时钟</td></tr><tr><td align="center">config</td><td align="center">cfg</td><td align="center">配置信息</td></tr><tr><td align="center">control</td><td align="center">ctrl</td><td align="center">控制</td></tr><tr><td align="center">count</td><td align="center">cnt</td><td align="center">计数</td></tr><tr><td align="center">data  in</td><td align="center">din(di)</td><td align="center">数据输入</td></tr><tr><td align="center">data  out</td><td align="center">dout(do)</td><td align="center">数据输出</td></tr><tr><td align="center">decode</td><td align="center">de</td><td align="center">译码</td></tr><tr><td align="center">decrease</td><td align="center">dec</td><td align="center">减一</td></tr><tr><td align="center">delay</td><td align="center">dly</td><td align="center">延迟</td></tr><tr><td align="center">disable</td><td align="center">dis</td><td align="center">不使能</td></tr><tr><td align="center">error</td><td align="center">err</td><td align="center">错误（指示）</td></tr><tr><td align="center">enable</td><td align="center">en</td><td align="center">使能</td></tr><tr><td align="center">frame</td><td align="center">frm</td><td align="center">帧</td></tr><tr><td align="center">generate</td><td align="center">gen</td><td align="center">生成，如CRC生成</td></tr><tr><td align="center">grant</td><td align="center">gnt</td><td align="center">申请通过</td></tr><tr><td align="center">increase</td><td align="center">inc</td><td align="center">加一</td></tr><tr><td align="center">input</td><td align="center">in(i)</td><td align="center">输入信号</td></tr><tr><td align="center">length</td><td align="center">len</td><td align="center">（帧、包）长</td></tr><tr><td align="center">output</td><td align="center">out(o)</td><td align="center">输出信号</td></tr><tr><td align="center">priority</td><td align="center">pri</td><td align="center">优先级</td></tr><tr><td align="center">pointer</td><td align="center">ptr</td><td align="center">指针</td></tr><tr><td align="center">rd  enable</td><td align="center">ren</td><td align="center">读使能</td></tr><tr><td align="center">read</td><td align="center">rd</td><td align="center">读（操作）</td></tr><tr><td align="center">ready</td><td align="center">rdy</td><td align="center">应答信号或准备好</td></tr><tr><td align="center">receive</td><td align="center">rx</td><td align="center">（帧数据）接收</td></tr><tr><td align="center">request</td><td align="center">req</td><td align="center">（服务、仲裁）请求</td></tr><tr><td align="center">reset</td><td align="center">rst</td><td align="center">复位信号</td></tr><tr><td align="center">souce</td><td align="center">scr</td><td align="center">源（端口）</td></tr><tr><td align="center">ststistics</td><td align="center">stat</td><td align="center">统计</td></tr><tr><td align="center">timer</td><td align="center">tmr</td><td align="center">定时器</td></tr><tr><td align="center">temporary</td><td align="center">tmp</td><td align="center">临时</td></tr><tr><td align="center">transmit</td><td align="center">tx</td><td align="center">发送（帧数据）相关</td></tr><tr><td align="center">valid</td><td align="center">vld(v)</td><td align="center">有效、校验正确</td></tr><tr><td align="center">wr enable</td><td align="center">wen</td><td align="center">写使能</td></tr><tr><td align="center">write</td><td align="center">wr</td><td align="center">写操作</td></tr></tbody></table><ol><li>端口、信号、变量名的所有字母小写；函数名、宏定义、参数定义用大写；</li><li>使用简称、缩略词（加上列表）；</li><li>基于含义命名（避免以数字命名的简单做法），含义可分段（最多分三段），每一小段之间加下划线”_”，如tx_data_val；命名长度一般限制在20个字符以内；</li><li>低电平有效信号，加后缀”_n”，如 rst_n；</li><li>无条件寄存的寄存信号在原信号上加d1、d2… 如原信号 data_in，寄存一拍data_in_d1，寄存两拍data_in_d2；</li><li><strong>不能用 ”reg”作为最后的后缀名</strong>，因为综合工具会给寄存器自动加上reg后缀, 如果命名里就用reg作为后缀名则扰乱了网表的可读性。</li></ol><h2 id="统一的表达式书写"><a href="#统一的表达式书写" class="headerlink" title="统一的表达式书写"></a>统一的表达式书写</h2><h3 id="括号的使用"><a href="#括号的使用" class="headerlink" title="括号的使用"></a>括号的使用</h3><p>如果一个表达式的分组情况不是很明显时，加上括号有助于理解。</p><p>例如下面的代码加上括号就清晰很多。</p><p><code>if (&amp;a==1’b1&amp;&amp;!flag==1’b1||b==1’b1)</code></p><p>改为：</p><p><code>if ((&amp;a==1’b1)&amp;&amp;(!flag==1’b1)||(b==1’b1))</code></p><h3 id="适当的使用空格"><a href="#适当的使用空格" class="headerlink" title="适当的使用空格"></a>适当的使用空格</h3><p>一般表达式在运算符的两侧要各留出一个空格，但定义比较长的表达式，去掉优先级高的运算符前的空格，使其与运算对象紧连在一起，可以更清晰的显示表达式结构。</p><p>还是上面的例子</p><p><code>if ((&amp;a==1’b1)&amp;&amp;(!flag==1’b1)||(b==1’b1))</code></p><p>改为</p><p><code>if ( (&amp;a==1’b1) &amp;&amp; (!flag==1’b1) || (b==1’b1) )</code></p><p><strong>”&lt;&#x3D;”, ”&#x3D;”,运算符前后都要加空格。</strong></p><h3 id="赋值要指明比特宽度"><a href="#赋值要指明比特宽度" class="headerlink" title="赋值要指明比特宽度"></a>赋值要指明比特宽度</h3><p><strong>赋值或者条件判断时要注明比特宽度，注意表达式的位宽匹配。</strong>如：</p><p>reg [4:0] signal_a;</p><p>错误情况：  </p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signal_a &lt;= <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(signal_a == <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">signal_a &lt;= signal_b[<span class="number">3</span>:<span class="number">0</span>]+<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>正确情况：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">signal_a &lt;= <span class="number">5&#x27;d5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(signal_a == <span class="number">5&#x27;d5</span>)</span><br><span class="line"></span><br><span class="line">signal_a &lt;= &#123;<span class="number">1&#x27;b0</span>, signal_b[<span class="number">3</span>:<span class="number">0</span>]+<span class="number">5&#x27;d4</span>;</span><br></pre></td></tr></table></figure><p>因为工具默认是32位宽，如果不注明位宽，工具检查会报warning，而且这样增加了设计的严谨性。</p><h2 id="统一的语句书写―条件判断结构书写方式"><a href="#统一的语句书写―条件判断结构书写方式" class="headerlink" title="统一的语句书写―条件判断结构书写方式"></a>统一的语句书写―条件判断结构书写方式</h2><h3 id="条件的完整性"><a href="#条件的完整性" class="headerlink" title="条件的完整性"></a>条件的完整性</h3><p>if else搭配使用，对于缺省的条件要写”else；”；</p><p>if else的条件判别式要全面，比如”if(a &#x3D;&#x3D; 1’b0)”;</p><p>case中的缺省条件要写”default”；</p><h3 id="”if-else”结构：适用于复杂条件判断的语句"><a href="#”if-else”结构：适用于复杂条件判断的语句" class="headerlink" title="”if else”结构：适用于复杂条件判断的语句"></a>”if else”结构：适用于复杂条件判断的语句</h3><p>对于复杂的条件判断，使用” ? : “如果不仔细分析条件的每一条路径，就让读代码的人搞不清它是到底要做什么。例如：</p><p><code>C = (!Ic&amp;&amp;!rc)?1&#39;b0:(Ic?rc:Ic);</code></p><p>改为：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(Ic <span class="keyword">or</span> rc) <span class="keyword">begin</span>    <span class="comment">//if else</span></span><br><span class="line">    <span class="keyword">if</span> ( (Ic==<span class="number">0</span>) &amp;&amp; (rc==<span class="number">0</span>) )</span><br><span class="line">        c = <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Ic==<span class="number">1</span>)</span><br><span class="line">        c = rc;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c = Ic;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>简单的条件判断，我们可以使用三目符；当涉及复杂的条件判断，使用IF-ELSE结构以获得清晰的结构便于理解和维护。</p><h3 id="IF-ELSE结构-VS-CASE结构"><a href="#IF-ELSE结构-VS-CASE结构" class="headerlink" title="IF-ELSE结构 VS CASE结构"></a>IF-ELSE结构 VS CASE结构</h3><p>IF-ELSE综合的结果可能是与或非门，也可能是一组多路选择器；而CASE综合结果一般会是多路选择器，但对于可以优化的CASE综合工具会综合出更简单的结构。</p><p>所有对于可以写出平行结构的条件，优先写成case结构，例如地址译码等。条件之间有重复和嵌套的情况则是写成IF-ELSE结构。</p><h3 id="Finite-State-Machine"><a href="#Finite-State-Machine" class="headerlink" title="Finite State Machine"></a>Finite State Machine</h3><p>不允许有模糊不清的状态机模式，所有的状态机必须清晰明了。</p><p>我们要求将状态机的时序部分和组合逻辑部分分开，建议采用三段式结构。</p><h2 id="统一格式的always程序块的书写"><a href="#统一格式的always程序块的书写" class="headerlink" title="统一格式的always程序块的书写"></a>统一格式的always程序块的书写</h2><h3 id="always-中的变量的赋值方式―阻塞与非阻塞赋值"><a href="#always-中的变量的赋值方式―阻塞与非阻塞赋值" class="headerlink" title="always 中的变量的赋值方式―阻塞与非阻塞赋值"></a>always 中的变量的赋值方式―阻塞与非阻塞赋值</h3><p>当进行时序逻辑建模时，always块中使用非阻塞赋值，“&lt;&#x3D;”；</p><p>参考如下代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">if</span> (rst_n == <span class="number">1&#x27;b0</span>)</span><br><span class="line">        myreg &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        myreg &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>当进行组合逻辑建模时，always块中使用阻塞赋值，“&#x3D;”；</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @(addr) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">case</span> (addr)</span><br><span class="line">        <span class="number">2&#x27;b00</span> : cs0_n = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="number">2&#x27;b01</span> : cs0_n = <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="number">2&#x27;b10</span> : cs0_n = <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="number">2&#x27;b11</span> : cs0_n = <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">default</span>: cs0_n = <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">endcase</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="always中变量赋值的唯一性"><a href="#always中变量赋值的唯一性" class="headerlink" title="always中变量赋值的唯一性"></a>always中变量赋值的唯一性</h3><p>组合always块一定要注意敏感量列表中的触发项完整且不冗余；如果不是这样，综合的电路会与实际设计不符合，会报warning；这边建议使用<code>always @(*)</code>的写法描述组合always块。</p><p>不要再多个always模块中对同一个reg型变量进行赋值；</p><p>建议不要在一个always块里给多个变量赋值。如果将一组条件相同的变量写在一个always块中更有利于可读性的提高和功能的实现时候，可有例外情况，但请尽量多加注释，以增加可读性，并注意在组合always块中不要出现LATCH；</p><h3 id="always复位的书写"><a href="#always复位的书写" class="headerlink" title="always复位的书写"></a>always复位的书写</h3><p>异步复位和同步复位模块内要统一，异步复位的条件表达式及命名要和always敏感列表中的描述相统一，所有的复位有效电平必须统一。</p><h2 id="合理的注释"><a href="#合理的注释" class="headerlink" title="合理的注释"></a>合理的注释</h2><ul><li>代码中建议采用英文作详细的注释；</li><li>注释应该与代码一致，修改程序的时候一定要修改相应的注释；</li><li>注释不应重复代码已经表明的内容，而是简明地点明程序的突出特征；</li><li>注释应该提取程序的线索和关键词，它整合程序中分散的信息并它帮助理解程序中不能表明的部分。</li><li>注释中可以加入TODO、FIXME等标签来提示代码中的待办事项；</li></ul><h2 id="重用化设计"><a href="#重用化设计" class="headerlink" title="重用化设计"></a>重用化设计</h2><h3 id="层次结构与模块划分"><a href="#层次结构与模块划分" class="headerlink" title="层次结构与模块划分"></a>层次结构与模块划分</h3><ul><li>层次设计的原理以简单为主―尽量避免不必要的层次；层次结构设计得好，在综合中就不需要太多的优化过程；</li><li>模块的划分根据层次设计来决定―模块化对于布线有很大帮助，模块化的设计中要尽量减少全局信号的使用；</li><li>通用的部分尽量提取出来作为一个共用模块；</li></ul><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><ul><li>需要传递参数的模块，在多次例化的时候统一都传递参数，不要例化同一个模块，有的传参数，有的不传。</li></ul><h3 id="模块划分的技巧"><a href="#模块划分的技巧" class="headerlink" title="模块划分的技巧"></a>模块划分的技巧</h3><ul><li>将不同的时钟域分离开来；</li><li>按照不同的设计目标划分成块，分块时应在数据流方向上进行切分；</li><li>在同一模块中实现逻辑资源和算术资源的共享；</li></ul>]]></content>
    
    
    <summary type="html">简要介绍了RTL的编码风格及注意事项</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>FPGA输入输出信号的IOB约束方式</title>
    <link href="http://david-luge.cn/2022/10/09/FPGA/FPGA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BF%A1%E5%8F%B7%E7%9A%84IOB%E7%BA%A6%E6%9D%9F%E6%96%B9%E5%BC%8F/"/>
    <id>http://david-luge.cn/2022/10/09/FPGA/FPGA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E4%BF%A1%E5%8F%B7%E7%9A%84IOB%E7%BA%A6%E6%9D%9F%E6%96%B9%E5%BC%8F/</id>
    <published>2022-10-09T08:54:39.000Z</published>
    <updated>2022-10-09T08:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>笔者在做实验室FPGA项目时，遇到输入输出信号相关的约束问题。在请教老师后，总结以下内容，供以后遇到类似问题时翻阅。</p><p>对于FPGA的输入信号，我们要以异步信号来看待，输入信号进来先打拍，使用打拍后的数据。第一次打拍的FF要约束到IOB中的IFF中，第二个FF就可以放到Slice中，这样每次布局布线不会因为FF的位置不同导致时序出问题，且解决了输入信号的异步问题；</p><p>对于FPGA的输出信号，我们也要打拍输出，确保扇出为1，将其放到IOB中的OFF中。这样OFF到PAD的路径延迟固定，每次布局布线不会因为FF位置不同导致时序出问题。</p><p>对于inout信号，当该信号作为输入信号时，我们需要对其打两拍进行使用；当需要向总线上放数据时，需注意要用三态的方式放置数据<code>assign inout_data = sel ? dout : &#39;bz;</code>，且要保证sel信号是reg类型。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>输入信号没有使用IOB约束，在ISE的IOB Properties中未见输入信号部署到IFF中。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091732502.png" alt="img"></p><h2 id="尝试步骤"><a href="#尝试步骤" class="headerlink" title="尝试步骤"></a>尝试步骤</h2><p>在ISE工具的Implement的property选项中，对-pr选项要选择For Inputs and Outputs选项；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091735357.png" alt="img"></p><p>修复跟输入相关的模块，对输入信号要做打拍处理，使用打拍后的数据进行内部的逻辑运算；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091736236.png" alt="img"></p><h3 id="修改Implement的选项报错"><a href="#修改Implement的选项报错" class="headerlink" title="修改Implement的选项报错"></a>修改Implement的选项报错</h3><p>修复后在Map阶段报错，报错具体位置在8b10b解码IP：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091737591.png" alt="img"></p><p>打开8b10b的IP网表进行分析：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091737650.png" alt="img"></p><p>其中rx为输入的多光谱数据线，<strong>猜测为8b10b的IP网表中对ff_c0和ff_d1有布局上的约束，ff_c0和ff_d1需要pack在一起，而如果使用输入IOB的话，ff_c0需要布局在IOB中，而ff_d1无法布局在IOB中，导致报错。</strong></p><p>所以解决方案中不能使用Implement的property。</p><h3 id="Inout信号的处理方式"><a href="#Inout信号的处理方式" class="headerlink" title="Inout信号的处理方式"></a>Inout信号的处理方式</h3><p>要改变总线上的数据时，使用三态控制；</p><p><code>assign   cpu_data       = (rd_latchn == 1&#39;b0) ? cpu_rdata_mux : 16&#39;bz;</code></p><p>要使用总线上的数据时，直接打拍总线上的数据（cpu_data）使用；</p><p>增加上述约束后，查看ISE报告，cpu_data仍然是OFF，输入信号没有约束到IFF上。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091738262.png" alt="img"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="对于输入信号"><a href="#对于输入信号" class="headerlink" title="对于输入信号"></a>对于输入信号</h3><p>对于输入信号而言，进来先打两拍，第一拍的数据别用，用第二拍的数据。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091738401.png" alt="img"></p><p>如果在ISE的Implement选项里可以选择<code>For Input and Outputs</code>的选项的话，那后续可以不用管了，注意该选项是针对全局的设计的。如果像上文这种有个lvds接口无法放置到IOB中的话，需要考虑以下的做法。</p><p>1、使用Verilog的attribute语法</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091739313.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091739332.png" alt="img"></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(* IOB = <span class="string">&quot;TRUE&quot;</span> *) <span class="keyword">reg</span> [<span class="number">8</span>:<span class="number">0</span>] cpu_data_d1;</span><br></pre></td></tr></table></figure><p>2、在UCF文件里添加约束</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091741530.png" alt="img"></p><p>ISE工具默认会把接口上的数据放置到IOB内。如果默认的放置方式没有起作用的话，我们这里采用的是第二种做法。</p><h3 id="对于输出信号"><a href="#对于输出信号" class="headerlink" title="对于输出信号"></a>对于输出信号</h3><p><strong>保证扇出为1</strong>，在ISE的Implement选项中设置-pr选项，使用I&#x2F;O Register；或者使用verilog中attribute的方式或是UCF文件中添加约束的方式；</p><h3 id="对于inout信号"><a href="#对于inout信号" class="headerlink" title="对于inout信号"></a>对于inout信号</h3><p>把inout信号当输入使用时，注意打两拍再使用；</p><p>把inout信号当输出时，注意采用三态写法，且sel信号需要是reg类型；</p><p><code>assign   cpu_data       = (rd_latchn == 1&#39;b0) ? cpu_rdata_mux : 16&#39;bz;</code></p><p>对于inout信号，最好在UCF文件中显式的对io信号做IOB的约束；</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INST <span class="string">&quot;u_cpu_top/cpu_data_d1*&quot;</span> IOB=FORCE;</span><br></pre></td></tr></table></figure><p>ps：PR之后的信号名可以到ISE中的FPGA Editor去查询。 </p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091743114.png" alt="img"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>input、output、inout信号均正确约束到IOB中。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210091743675.png" alt="img"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.xilinx.com/content/dam/xilinx/support/documents/sw_manuals/xilinx14_7/cgd.pdf">UG625</a></p>]]></content>
    
    
    <summary type="html">FPGA输入输出信号的IOB约束方式</summary>
    
    
    
    <category term="FPGA" scheme="http://david-luge.cn/categories/FPGA/"/>
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/categories/FPGA/FPGA-Tools/"/>
    
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/tags/FPGA-Tools/"/>
    
  </entry>
  
  <entry>
    <title>为什么需要门级仿真</title>
    <link href="http://david-luge.cn/2022/10/07/IC/Basic/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%97%A8%E7%BA%A7%E4%BB%BF%E7%9C%9F/"/>
    <id>http://david-luge.cn/2022/10/07/IC/Basic/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%97%A8%E7%BA%A7%E4%BB%BF%E7%9C%9F/</id>
    <published>2022-10-07T07:14:39.000Z</published>
    <updated>2022-10-07T07:14:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当时面试百度昆仑芯的时候，面试官问我这样一个场景。各Corner下的Timing已经Clean了，Formality已经保证RTL和门电路保持一致了，为什么要需要去做GLS（Gate Level Simulation）呢？</p><p>当时问的一下愣住，没想明白，下来搜集资料发现以下几点原因。其中部分原因自己也还不能理解到位，期待后续实际工作中加深理解。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210071537119.jpg" alt="GLS"></p><ol><li>解决STA工具的局限性，如STA工具无法分析异步接口信号，STA工具也会放宽对False Path和Multi-cycle Path的检查，用GLS来复查一下；</li><li>核实一下系统初始化是否正常进行，复位链是否正确；</li><li>验证所有电源域的上电和复位操作是否符合要求，并且检查设计不依赖于设计的初始条件；</li><li>利用最坏和最佳的时序信息的组合来揭示边缘敏感信号上的Glitch情况；</li><li>执行DFT验证，因为扫描链是在RTL综合后插入的；</li><li>验证时钟树综合（CTS）是否满足要求；（Skew、Jitter等）</li><li>获取翻转率参数来更准确地估计功耗；</li><li>在RTL或者GLS中以悲观&#x2F;乐观来分析X态；（不太理解）</li><li>检查最终的性能以确保设计工作在所需的频率，路径上实际的延迟需考虑在内，包括部分结构元素不被STA或者Formality检查，或者在PR阶段在路径上插入的Buffer或者其他的电路元素。</li></ol>]]></content>
    
    
    <summary type="html">门级仿真的必要性</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>Blog图像加载失败解决方法</title>
    <link href="http://david-luge.cn/2022/10/07/Misc/Blog%E5%9B%BE%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://david-luge.cn/2022/10/07/Misc/Blog%E5%9B%BE%E5%83%8F%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-10-07T04:50:00.000Z</published>
    <updated>2022-10-07T04:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如果你没有用科学上网方式的话，可能本博客中部分内容的图像是看不了的，因为后期我文章中的图像托管到了Github仓库里。此时需要根据系统配置一下DNS来进行图像的查看，找了部分资料链接放在下面，个人比较推荐修改DNS的方式，快捷简单。以后访问Github时也比较方便。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/368689473">Github访问速度慢,图片无法加载的解决方法</a></p><p><a href="https://zhuanlan.zhihu.com/p/107334179">修改Hosts解决Github访问失败</a></p>]]></content>
    
    
    <summary type="html">Blog图像加载失败解决方法</summary>
    
    
    
    <category term="Misc" scheme="http://david-luge.cn/categories/Misc/"/>
    
    <category term="Git" scheme="http://david-luge.cn/categories/Misc/Git/"/>
    
    
    <category term="Git" scheme="http://david-luge.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>摄影入门知识</title>
    <link href="http://david-luge.cn/2022/10/07/Misc/%E6%91%84%E5%BD%B1%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
    <id>http://david-luge.cn/2022/10/07/Misc/%E6%91%84%E5%BD%B1%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</id>
    <published>2022-10-07T02:50:00.000Z</published>
    <updated>2022-10-07T02:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摄影入门知识"><a href="#摄影入门知识" class="headerlink" title="摄影入门知识"></a>摄影入门知识</h1><h2 id="曝光三要素"><a href="#曝光三要素" class="headerlink" title="曝光三要素"></a>曝光三要素</h2><h3 id="三个参数"><a href="#三个参数" class="headerlink" title="三个参数"></a>三个参数</h3><p>光圈大小、快门速度、ISO大小</p><ul><li>光圈大小：同时能进多少光</li><li>快门速度：遮光板<strong>打开和关闭</strong>一次的时长，速度越慢遮光板打开时间越久，进光越多</li><li>ISO：理解为额外增加的小手电，强行添加额外亮度（电子信号），会增加颗粒感</li></ul><h3 id="参数对应的数值说明"><a href="#参数对应的数值说明" class="headerlink" title="参数对应的数值说明"></a>参数对应的数值说明</h3><ul><li>光圈数值，与大小相反，F1.8为大光圈，F22为小光圈，以此类推…</li><li>快门速度，单位为秒（16，1&#x2F;2，1&#x2F;8000 秒等），数值越小，遮光板打开时间越短，进光越少；</li><li>iso 数值  （100，800，1600等），数值越大，额外强行补光越多，颗粒感越重</li></ul><h3 id="亮暗环境下的调整步骤"><a href="#亮暗环境下的调整步骤" class="headerlink" title="亮暗环境下的调整步骤"></a>亮暗环境下的调整步骤</h3><ul><li>暗环境下：1、首先调大光圈；2、其次减慢快门；3、最后还不行再调大iso；优先级逐渐降低；</li><li>亮环境下：1、调低ISO；2、加快快门；3、最后还不行再调小光圈；</li></ul><h2 id="光圈和快门对照片的其他影响"><a href="#光圈和快门对照片的其他影响" class="headerlink" title="光圈和快门对照片的其他影响"></a>光圈和快门对照片的其他影响</h2><h3 id="光圈大小影响亮度、景深、虚化"><a href="#光圈大小影响亮度、景深、虚化" class="headerlink" title="光圈大小影响亮度、景深、虚化"></a>光圈大小影响亮度、景深、虚化</h3><ul><li>景深：从镜头发散出去，只有一部分区域的景象是清晰的，其他的会模糊。<strong>清晰的区域，就叫做景深。</strong>大光圈，浅景深，清晰的区域小，背景会模糊；小光圈，深景深，清晰的区域大，背景也清晰；</li><li>虚化：光圈越大，背景虚化越强（与景深联系起来，大光圈，浅景深，背景模糊→背景虚化）；光圈越小，背景虚化越弱；<ul><li>虚化强弱的理解：一盏小灯在大光圈下，灯会虚化成大光斑；小光圈，灯虚化成的光斑也小；（光斑的形状来源于光圈扇叶形成的圆洞，<strong>假如用卡纸剪出心形置于镜头前，光斑也成心形</strong>）；</li><li>虚化的不止背景，还有前景；可应用前景虚化，拍摄梦幻感的照片。</li><li>景深与对焦的理解：对焦，就是让清晰的区域（景深）与拍摄主体有重合。因此，<strong>小光圈易于对焦运动中的主体</strong>。</li></ul></li></ul><h3 id="快门速度影响亮度，动态模糊"><a href="#快门速度影响亮度，动态模糊" class="headerlink" title="快门速度影响亮度，动态模糊"></a>快门速度影响亮度，动态模糊</h3><ul><li>慢快门时，假如相机抖动，将导致光在CMOS上有运动轨迹，进而导致照片糊掉；</li><li>自动挡时，使用大光圈，增大ISO，或者用闪光灯或补光灯照亮主体，可以尽可能避免相机使用慢快门，进而避免拍摄时，相机抖动导致照片糊掉；</li><li>慢速快门拍摄技巧，可用于拍摄光绘，星轨，车流，火花；可使用三脚架保持相机稳定，防止糊掉</li></ul><h3 id="在强光下如何虚化-动态模糊？"><a href="#在强光下如何虚化-动态模糊？" class="headerlink" title="在强光下如何虚化+动态模糊？"></a>在强光下如何虚化+动态模糊？</h3><p>虚化就需要光圈调大-&gt;浅景深-&gt;背景模糊，动态模糊需要慢快门-&gt;让光在CMOS上运动，那么就会导致进光量太多的问题，本质上是矛盾的。</p><p>这时我们引入ND滤镜（控光工具），可理解为相机用墨镜🕶可以降低画面亮度，有可变和固定参数两种。</p><h2 id="相机档位"><a href="#相机档位" class="headerlink" title="相机档位"></a>相机档位</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>相机档位本质上是用来控制光圈、ISO和快门速度的，只不过不同的档位下你能把握的变量不同；</p><ul><li>M：自由控制所有参数；</li><li>A&#x2F;AV：只能控制光圈参数，其它参数相机自适应（用途：（画面有大光圈虚化）人、微距、特写。条件：光线、亮度足够好。）</li><li>S&#x2F;TV：只能控制快门速度，其他参数相机自适应。（用途：1、慢速快门；2、快速抓拍：打鸟、小孩、速度快的物体&#x2F;事件；）</li><li>P：定向自适应模式，相机通过你的修改参数来自动调整其它参数。例如：光圈（你），ISO，快门速度（相机）；相机会通过你的自变量（x&#x3D;光圈&#x2F;快门速度），来调整另一个参数（快门速度&#x2F;光圈），前提：ISO为auto 。</li></ul><h3 id="曝光补偿"><a href="#曝光补偿" class="headerlink" title="曝光补偿"></a>曝光补偿</h3><p>程序算法，根据你的选择，调整三要素数值，改变画面亮度；</p><p>在不同的档位模式下，曝光补偿能改变的参数不同；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202210031850425.png" alt="曝光补偿说明"></p><h3 id="图像直方图"><a href="#图像直方图" class="headerlink" title="图像直方图"></a>图像直方图</h3><table><thead><tr><th align="center">画面</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">暗</td><td align="center">偏左</td></tr><tr><td align="center">亮</td><td align="center">偏右</td></tr><tr><td align="center">正常曝光</td><td align="center">均匀平铺</td></tr><tr><td align="center">没有过渡部分</td><td align="center">分散两边</td></tr></tbody></table><p>如果场景敏感比例不平衡的话，直方图不能直观的显示，就要做取舍，注意拍摄主题的质量；</p><h2 id="白平衡"><a href="#白平衡" class="headerlink" title="白平衡"></a>白平衡</h2><p>当我们拍摄低色温环境如3500k（偏蓝），白平衡k值设置要高如7000k（偏黄），两者综合才能还原物体原来颜色，这就是白平衡的用处。</p><p>简单来说就是：白平衡设置低k值，相机会认为外部环境偏黄，所以加蓝；设置高k值，相机会认为外部环境偏蓝，所以加红。傍晚拍摄照片时用3500k，没什么问题，如果想要拍摄绚丽黄昏，高k值也是不错的选择，这取决于最终想怎么表现一张图想表达的情绪。</p><h2 id="测光"><a href="#测光" class="headerlink" title="测光"></a>测光</h2><p>主要调整对象：光圈快门ISO、曝光补偿、测光模式</p><p>亮度太高&#x2F;亮度不足：看直方图判断、曝光补偿小管家（在M档位下）（看+&#x2F;-数值）；</p><p>测光模式：评价&#x2F;多重测光（拍人像）、中央测光（对象在画面中央，跟拍vlog）、点测光（对象一直在画面某个位置，如会议记录）；</p><p>固定测光的亮度：亮度锁（*）、Sony（ael）；</p><h2 id="景深"><a href="#景深" class="headerlink" title="景深"></a>景深</h2><ul><li><p>景深通俗的来说就是画面中前后清晰的范围，但对焦并不等于移动景深，而是移动焦点。</p></li><li><p>同时景深也并不只是一个简单的范围，而是由三个部分组成：大概示意图：</p><p>🎥  &lt;         (   前景深｜焦点|       后景深 )</p></li><li><p>为什么要把景深分为三个部分？</p><p>景深范围内并不是所有东西都同样清晰！</p><p>从物理理论上来说，只有焦点上的物体才是“绝对”清晰的 而前景深与后景深只是“相对清晰”（轻微模糊，但人眼分辨不出） 这似乎都是清晰 但假如在一些需要放大几倍的特殊情况下 这个问题就会显现：比如在拍摄人像的时候，对焦到鼻尖 。好像眼睛和鼻尖都在景深内，但放大后眼睛是可能会感觉到轻微模糊的。</p><p>所以盲目把对焦理解为“只要落在这个范围里”是非常危险的！！！正确方法应该是将最主要的物体（例如人像的眼睛）放在焦点上，而至于其他区域（例如耳朵、鼻子等）如果想要清晰的话，再通过调整光圈或焦距的方法改变景深大小来实现清晰！</p></li><li><p>拍照时先定焦点，再去构图；</p></li></ul>]]></content>
    
    
    <summary type="html">摄影入门知识小结</summary>
    
    
    
    <category term="Misc" scheme="http://david-luge.cn/categories/Misc/"/>
    
    <category term="photography" scheme="http://david-luge.cn/categories/Misc/photography/"/>
    
    
    <category term="photography" scheme="http://david-luge.cn/tags/photography/"/>
    
  </entry>
  
  <entry>
    <title>我的秋招小结</title>
    <link href="http://david-luge.cn/2022/09/30/Interview/%E7%A7%8B%E6%8B%9B%E5%B0%8F%E7%BB%93/"/>
    <id>http://david-luge.cn/2022/09/30/Interview/%E7%A7%8B%E6%8B%9B%E5%B0%8F%E7%BB%93/</id>
    <published>2022-09-30T02:54:39.000Z</published>
    <updated>2022-09-30T02:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>2022年，不知道是不是未来十年最好的一年，不过应该是过去十年最差的一年。听完任总的“寒气论”和字节梁总的“去肥增瘦”理论后，每个2023的应届生应该都能感受到这刺骨的寒意。</p><p>我的秋招经历开始较早，6月陆续开始投递各公司的提前批，7-8月份为面试高峰期，9月陆续收到各家的offer。文章的后面我会大概回忆各面试的问题，梳理校招时面试官关心的共性问题，仅供大家参考，准备后续的秋招笔试面试。</p><p>本文整理的一些知识点后续会慢慢在自己的博客更新（给自己挖了一波大坑），希望后面慢慢填上；</p><h1 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h1><ul><li>准备项目的简要系统架构介绍。可以包括以下要素：项目框图、各模块功能介绍、系统接口、时钟复位网络；可以用Xmind或者MarkDown工具去梳理项目架构。</li><li>提取项目的亮点、难点。部分面试时间不够的话面试官不会给充足的时间详尽介绍项目，可以从时序约束、算法设计、优化方式、计算性能等方向去整理；</li><li>项目中涉及到的点要拓展延伸，了解相关的基础知识。举例说明，我的项目接口信号使用了8b10b编码方式，自己可以考虑如下几点：1、8b10b编码是什么？2、为什么需要8b10b编码，该编码是用来解决什么问题的？3、有其他方式可以解决该问题吗？要带入面试官的角度去思考自己的项目；</li><li>总结在做项目过程中遇到的棘手问题，在给面试官叙述自己解决问题的思路和方式的过程中展现自己的能力。</li><li>项目的验证方式；了解项目涉及的IC&#x2F;FPGA的工艺，面积；</li><li>统计项目中自己负责部分的代码量；</li></ul><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="跨时钟域"><a href="#跨时钟域" class="headerlink" title="跨时钟域"></a>跨时钟域</h2><ul><li>基本的CMOS、PMOS结构；</li><li>跨时钟域的原因，亚稳态的定义；</li><li>建立时间、保持时间；</li><li>单bit信号跨时钟域，考虑快慢时钟域；</li><li>多bit信号跨时钟域；<ul><li>异步FIFO的假空假满；</li><li>格雷码跨时钟域问题；</li><li>如何考虑FIFO深度；</li><li>FIFO和DMUX的相关时序约束；</li></ul></li><li>何时需要跨时钟，跨时钟方式如何选择；</li><li>关于复位信号的跨时钟域；</li><li>Time Borrow&#x2F;Steal（进阶）</li></ul><h2 id="低功耗设计"><a href="#低功耗设计" class="headerlink" title="低功耗设计"></a>低功耗设计</h2><ul><li>功耗的分类、影响因素、计算公式</li><li>静态低功耗技术，降静态功耗的方法；</li><li>动态低功耗技术，降动态功耗的方法；</li><li>RTL设计中降功耗的方式；</li><li>以反相器为例解释静态功耗和动态功耗；</li></ul><h2 id="时序约束"><a href="#时序约束" class="headerlink" title="时序约束"></a>时序约束</h2><ul><li>时钟相关<ul><li>周期、占空比、管脚；</li><li>Primary Clock、Virtual Clock、Generated Clock、Clock Groups；</li><li>Clock Latency、Jitter、Uncertainty；</li></ul></li><li>IO Delay<ul><li>Input Delay；</li><li>Output Delay；</li></ul></li><li>Time Exceptions<ul><li>Multicycle；</li><li>False Path；</li><li>Max&#x2F;Min Delay；</li></ul></li></ul><h2 id="IC相关"><a href="#IC相关" class="headerlink" title="IC相关"></a>IC相关</h2><ul><li>简述IC设计流程，了解各步骤的目的；</li><li>IC和FPGA的区别；</li><li>修Time Violation的方式；</li></ul><h2 id="AMBA协议"><a href="#AMBA协议" class="headerlink" title="AMBA协议"></a>AMBA协议</h2><ul><li><p>读写架构，信号列表及含义；</p></li><li><p>跨4K问题；</p></li><li><p>握手间的依赖关系；</p></li><li><p>能否提前结束突发传输；</p></li><li><p>窄位宽数据传输、非对齐传输、混合大小端传输；</p></li><li><p>Outstanding的含义，如何考虑Outstanding深度；</p></li><li><p>Out of Order的含义，跟ID信号是否有联系；</p></li><li><p>Interconnect的结构；</p></li><li><p>AXI3、AXI4的区别；</p></li><li><p>AXI Full、AXI Lite的区别；</p></li><li><p>AXI的死锁场景；</p></li></ul><h1 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h1><ul><li>状态机相关：红绿灯、自动售货机、序列检测；</li><li>分频相关：奇偶分频、半整数分频、小数分频；</li><li>仲裁相关：优先级仲裁、固定优先级仲裁、变优先级仲裁、轮询仲裁、加权轮询；</li><li>存储：单口RAM、简单双口RAM、真双口RAM；</li><li>CDC<ul><li>同步FIFO：基于单口RAM、基于双口RAM；</li><li>异步FIFO：Bin2Gray、Gray2Bin；</li><li>脉冲同步器、带反馈的脉冲同步器；</li><li>前向&#x2F;后向Pipe；</li></ul></li><li>门级电路：计数器、全加器、二&#x2F;三分频、占空比1:3的二分频；</li><li>其它：Generate、For语法相关；</li></ul>]]></content>
    
    
    <summary type="html">关于我的秋招小节</summary>
    
    
    
    <category term="interview" scheme="http://david-luge.cn/categories/interview/"/>
    
    
    <category term="interview" scheme="http://david-luge.cn/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>跨复位域小结</title>
    <link href="http://david-luge.cn/2022/09/29/Interview/%E8%B7%A8%E5%A4%8D%E4%BD%8D%E5%9F%9F%E5%B0%8F%E7%BB%93/"/>
    <id>http://david-luge.cn/2022/09/29/Interview/%E8%B7%A8%E5%A4%8D%E4%BD%8D%E5%9F%9F%E5%B0%8F%E7%BB%93/</id>
    <published>2022-09-29T07:00:39.000Z</published>
    <updated>2022-09-29T07:00:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨复位域小结"><a href="#跨复位域小结" class="headerlink" title="跨复位域小结"></a>跨复位域小结</h1><p>跨时钟域我们比较熟悉，但跨复位域可能就比较陌生了。在平头哥实习的一面中，面试官问了我较多跨复位域的问题，主要还是自己在简历里挖了个坑（就不该写设计复位网络的TAT），所以这篇文章就来简要介绍一下跨复位域中存在的一些问题及解决方法。</p><h2 id="异步复位导致的亚稳态"><a href="#异步复位导致的亚稳态" class="headerlink" title="异步复位导致的亚稳态"></a>异步复位导致的亚稳态</h2><h3 id="异步复位的释放"><a href="#异步复位的释放" class="headerlink" title="异步复位的释放"></a>异步复位的释放</h3><p>复位如果在时钟采样沿的前后的一个时间窗口内释放的话会导致输出的Q端存在亚稳态问题，<strong>本质上也是触发器建立时间和保持时间的要求</strong>，对复位而言就是Recovery Time和Removal Time的要求。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232121969.png" alt="1"></p><p>为解决异步复位释放的亚稳态问题，我们可以使用异步复位，同步释放的方式来解决。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232121355.png" alt="2"></p><h3 id="异步复位的置位"><a href="#异步复位的置位" class="headerlink" title="异步复位的置位"></a>异步复位的置位</h3><p>复位的置位也可能导致亚稳态问题，主要场景是电路中有多复位域，我们分析一下下图所示场景。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232121206.png" alt="3"></p><p>dff1和dff2分别使用不同的时钟和复位信号，dff1先复位，之后dff2再复位。可能存在的问题是arst1置位时，<strong>dff1的Q端数据从data向Reset-value跳变时可能不满足dff2的建立&#x2F;保持时间要求</strong>，从而使dff2的Q端出现亚稳态。</p><p>以下关于时钟复位的5种情形<strong>都可能导致亚稳态</strong>：</p><p>1、clk1和clk2是一样的&#x2F;同步的；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232121776.png" alt="4"></p><p>2、clk1和clk2是异步的；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122669.png" alt="5"></p><p>3&#x2F;4、对arst1和arst2均做异步复位，同步释放操作；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122118.png" alt="6"></p><p>5、rst2做同步复位；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122155.png" alt="7"></p><h2 id="如何安全地处理跨复位域"><a href="#如何安全地处理跨复位域" class="headerlink" title="如何安全地处理跨复位域"></a>如何安全地处理跨复位域</h2><h3 id="1、对复位的顺序提出要求"><a href="#1、对复位的顺序提出要求" class="headerlink" title="1、对复位的顺序提出要求"></a>1、对复位的顺序提出要求</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122904.png" alt="8"></p><p>arst2在arst1之前置位的话，就不存在dff2的亚稳态问题，<strong>这种先复位后级模块的策略可以有效避免亚稳态。</strong></p><h3 id="2、增加数据隔离单元"><a href="#2、增加数据隔离单元" class="headerlink" title="2、增加数据隔离单元"></a>2、增加数据隔离单元</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122542.png" alt="9"></p><p>在dff1的arst1置位前隔离dff1的输出，将输出钳位到0，避免arst1置位时导致dff2出现亚稳态；</p><h3 id="3、通过时钟门控进行数据隔离"><a href="#3、通过时钟门控进行数据隔离" class="headerlink" title="3、通过时钟门控进行数据隔离"></a>3、通过时钟门控进行数据隔离</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122095.png" alt="10"></p><p>与数据隔离单元的思想类似，只不过通过门控dff2的方式来完成数据隔离。（<strong>门控时钟也可以有效解决异步复位的recovery和removal time的问题，异步复位后再开时钟就不用考虑上述time的检查。</strong>）</p><h3 id="4、通过打拍降低亚稳态概率"><a href="#4、通过打拍降低亚稳态概率" class="headerlink" title="4、通过打拍降低亚稳态概率"></a>4、通过打拍降低亚稳态概率</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232122793.png" alt="11"></p><p>通过增加一个dff3来减少亚稳态发生的概率。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>安全处理跨复位域的做法：</p><ul><li><strong>依序</strong>对模块进行复位，<strong>后级模块先复位</strong>；</li><li>通过<strong>数据隔离单元或门控时钟</strong>进行数据隔离，避免出现亚稳态；</li><li>后级模块通过<strong>两级同步寄存器</strong>降低亚稳态发生的概率；</li></ul><p>平头哥一面中，面试官提问我，ASIC中复位网络的扇出很大，很难保证所有寄存器都满足recovery和removal time的要求，异步复位&#x2F;同步释放的方式也解决不了该问题，因为有Skew存在，问此时<strong>如何保证正常的异步复位功能，且不用考虑recovery和removal time？</strong></p><p>当时面试过程中没答出来，于是问了面试官，面试官说<strong>异步复位前先把clock关了，复位后再开clock</strong>，这样就可以避免考虑recovery和removal time，这个答案震惊到我了，作下记录，感谢平头哥的面试官！</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.youtube.com/watch?v=G_37fwOVnik">Reset Domain Crossing</a></p>]]></content>
    
    
    <summary type="html">关于我实习被平头哥面试官问复位问到怕这件事</summary>
    
    
    
    <category term="interview" scheme="http://david-luge.cn/categories/interview/"/>
    
    
    <category term="interview" scheme="http://david-luge.cn/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>Questasim安装与破解教程</title>
    <link href="http://david-luge.cn/2022/09/29/FPGA/Questasim%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://david-luge.cn/2022/09/29/FPGA/Questasim%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-09-29T06:54:39.000Z</published>
    <updated>2022-09-29T06:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Questasim安装与破解教程"><a href="#Questasim安装与破解教程" class="headerlink" title="Questasim安装与破解教程"></a>Questasim安装与破解教程</h1><h2 id="安装前提："><a href="#安装前提：" class="headerlink" title="安装前提："></a>安装前提：</h2><p>系统要求：Win10 64位</p><p>注意：安装路径及以后的项目路径、文件路径等都不要有中文和空格。</p><h2 id="安装破解步骤："><a href="#安装破解步骤：" class="headerlink" title="安装破解步骤："></a>安装破解步骤：</h2><ol><li><p>关闭电脑的杀毒软件和防火墙，双击安装包中的<code>questasim-win64-10.6c.exe</code>进行安装，推荐安装目录：<code>D:/questasim64_10.6c</code>。安装完成后不要打开软件先进行破解。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055355.png" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055257.png" alt="2"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055020.png" alt="3"></p></li><li><p>复制和此文档同一压缩包内的’patch_dll.bat’ 和’MentorKG.exe’和’license.dat’和’MakeLic.bat’（所有文件）到 <path_to_questasim_win64>文件夹(即安装目录里的win64文件夹，（举例：本人安装在<code>D:\Program Files\Questasim</code>，所以复制到文件夹<code>D:\Program Files\Questasim\win64</code>）</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055285.png" alt="4"></p></li><li><p>找到安装路径下<code>win64/mgls64.dll</code> 去掉其只读属性</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055378.png" alt="5"></p></li><li><p>双击运行安装路径下<code>win64/patch_dll.bat</code>（这个文件是刚刚由压缩包中复制过来的），等待一段时间会产生LICENSE.TXT，保存到安装目录里的win64文件夹（本人是<code>D:\Program Files\Questasim\win64</code>）</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232055937.png" alt="6"></p></li><li><p>接下来是修改用户变量和系统变量，不同系统可能步骤不一样，但修改的内容都一样</p><p><strong>用户变量</strong></p></li></ol><table><thead><tr><th align="center">变量名</th><th align="center">变量值</th></tr></thead><tbody><tr><td align="center">LM_LICENSE_FILE</td><td align="center">D:\Program Files\Questasim\win64\license.dat</td></tr><tr><td align="center">MGLS_LICENSE_FILE</td><td align="center">D:\Program Files\Questasim\win64\LICENSE.TXT</td></tr></tbody></table><p>​<strong>Path中新建两项</strong></p><p><code>D:\Program Files\Questasim\win64</code></p><p><code>D:\Program Files\Questasim\win64\LICENSE.TXT</code></p><p>​<strong>系统变量</strong></p><table><thead><tr><th align="center">变量名</th><th align="center">变量值</th></tr></thead><tbody><tr><td align="center">MGLS_LICENSE_FILE</td><td align="center">D:\Program Files\Questasim\win64\LICENSE.TXT</td></tr><tr><td align="center">lm_license_file</td><td align="center">D:\Program Files\Questasim\win64\LICENSE.TXT</td></tr></tbody></table><p>步骤图如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056666.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056831.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056685.png" alt="9"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056957.png" alt="10"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056079.png" alt="11"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056514.png" alt="12"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056480.png" alt="13"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232056522.png" alt="14"></p><ol start="6"><li>完成后打开软件，如果完成正确的配置后依旧无法打开可以重启计算机后打开。</li></ol>]]></content>
    
    
    <summary type="html">Questasim安装与破解教程</summary>
    
    
    
    <category term="FPGA" scheme="http://david-luge.cn/categories/FPGA/"/>
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/categories/FPGA/FPGA-Tools/"/>
    
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/tags/FPGA-Tools/"/>
    
  </entry>
  
  <entry>
    <title>Vivado与Modelsim联合仿真</title>
    <link href="http://david-luge.cn/2022/09/29/FPGA/Vivado%E4%B8%8EModelsim%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F/"/>
    <id>http://david-luge.cn/2022/09/29/FPGA/Vivado%E4%B8%8EModelsim%E8%81%94%E5%90%88%E4%BB%BF%E7%9C%9F/</id>
    <published>2022-09-29T05:54:39.000Z</published>
    <updated>2022-09-29T05:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vivado与Modelsim联合仿真"><a href="#Vivado与Modelsim联合仿真" class="headerlink" title="Vivado与Modelsim联合仿真"></a>Vivado与Modelsim联合仿真</h1><p>笔者在学习FPGA过程中遇到了如何使用Vivado和Modelsim进行联合仿真的问题，特此记录。</p><h2 id="确定版本"><a href="#确定版本" class="headerlink" title="确定版本"></a>确定版本</h2><p>笔者Vivado用的是2018.3版本，先是随便下了个Modelsim10.1c的版本，到编译库文件时报错了，后来发现是俩款软件的版本不匹配。所以大家在进行联合仿真之前先核对两个软件的版本是否对应，不用到最后再卸载重装。</p><p><strong>Vivado Design Suite 2018.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.6c)<br>Mentor Graphics Questa Advanced Simulator (10.6c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.053)<br>Cadence Xcelium Parallel Simulator (18.03.005)<br>Synopsys VCS and VCS MX (N-2017.12-SP2)<br>Aldec Active-HDL (10.5) Aldec Riviera-PRO (2018.02)</p><p><strong>Vivado Design Suite 2018.2</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.6c)<br>Mentor Graphics Questa Advanced Simulator (10.6c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.042)<br>Cadence Xcelium Parallel Simulator (17.10.005)<br>Synopsys VCS and VCS MX (N-2017.12)<br>Aldec Active-HDL (10.4a) Aldec Riviera-PRO (2017.10)</p><p><strong>Vivado Design Suite 2018.1</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.6c)<br>Mentor Graphics Questa Advanced Simulator (10.6c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.042)<br>Cadence Xcelium Parallel Simulator (17.10.005)<br>Synopsys VCS and VCS MX (N-2017.12)<br>Aldec Active-HDL (10.4a) Aldec Riviera-PRO (2017.10)</p><p><strong>Vivado Design Suite 2017.4</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.6b)<br>Mentor Graphics Questa Advanced Simulator (10.6b)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.028)<br>Synopsys VCS and VCS MX (M-2017.03-SP1)<br>Aldec Active-HDL (10.4a) Aldec Riviera-PRO (2017.02)</p><p><strong>Vivado Design Suite 2017.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.6b)<br>Mentor Graphics Questa Advanced Simulator (10.6b)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.028)<br>Synopsys VCS and VCS MX (M-2017.03-SP1)<br>Aldec Active-HDL (10.4a) Aldec Riviera-PRO (2017.02)</p><p><strong>Vivado Design Suite 2017.2</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.5c)<br>Mentor Graphics Questa Advanced Simulator (10.5c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.014)<br>Synopsys VCS and VCS MX (L-2016.06-SP1)<br>Aldec Active-HDL (10.4) Aldec Riviera-PRO (2016.10)</p><p><strong>Vivado Design Suite 2017.1</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.5c)<br>Mentor Graphics Questa Advanced Simulator (10.5c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.014)<br>Synopsys VCS and VCS MX (L-2016.06-SP1)<br>Aldec Active-HDL (10.4) Aldec Riviera-PRO (2016.10)</p><p><strong>Vivado Design Suite 2016.4</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.5c)<br>Mentor Graphics Questa Advanced Simulator (10.5c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.005)<br>Synopsys VCS and VCS MX (L-2016.06)<br>Aldec Active-HDL (10.3) Aldec Riviera-PRO (2016.06)</p><p><strong>Vivado Design Suite 2016.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.5c)<br>Mentor Graphics Questa Advanced Simulator (10.5c)<br>Cadence Incisive Enterprise Simulator (IES) (15.20.005)<br>Synopsys VCS and VCS MX (L-2016.06)<br>Aldec Active-HDL (10.3) Aldec Riviera-PRO (2016.06)</p><p>Vivado Design Suite 2016.2, 2016.1</p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.4d)<br>Mentor Graphics Questa Advanced Simulator (10.4d)<br>Cadence Incisive Enterprise Simulator (IES) (15.10.013)<br>Synopsys VCS and VCS MX (K-2015.09)<br>Aldec Active-HDL (10.3) Aldec Riviera-PRO (2015.10)</p><p><strong>Vivado Design Suite 2015.4, 2015.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.4b)<br>Mentor Graphics Questa Advanced Simulator (10.4b)<br>Cadence Incisive Enterprise Simulator (IES) (14.20.006)<br>Synopsys VCS and VCS MX (J-2014.12-SP2)<br>Aldec Active-HDL (10.2 SP2) Aldec Riviera-PRO (2015.06)</p><p><strong>Vivado Design Suite 2015.2, 2015.1</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.3d)<br>Mentor Graphics Questa Advanced Simulator (10.3d)<br>Cadence Incisive Enterprise Simulator (IES) (14.10.011)<br>Synopsys VCS and VCS MX (I-2014.03-SP1)<br>Aldec Active-HDL (10.1 SP1) Aldec Riviera-PRO (2015.02)</p><p><strong>Vivado Design Suite 2014.4</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.3b)<br>Mentor Graphics Questa Advanced Simulator (10.3b)<br>Cadence Incisive Enterprise Simulator (IES) (13.20.005)<br>Synopsys VCS and VCS MX (I-2014.03)<br>Aldec Active-HDL (9.3 SP1) Aldec Riviera-PRO (2014.02)</p><p><strong>Vivado Design Suite 2014.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.3b)<br>Mentor Graphics Questa Advanced Simulator (10.3b)<br>Cadence Incisive Enterprise Simulator (IES) (13.20.005)<br>Synopsys VCS and VCS MX (I-2014.03)<br>Aldec Active-HDL (9.2 SP1) Aldec Riviera-PRO (2014.02)</p><p><strong>Vivado Design Suite 2014.2, 2014.1</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.2a)<br>Mentor Graphics Questa Advanced Simulator (10.2a)<br>Cadence Incisive Enterprise Simulator (IES) (12.2-016)<br>Synopsys VCS and VCS MX (H-2013.06-SP1)<br>Aldec Active-HDL (9.3 SP1) Aldec Riviera-PRO (2014.02)</p><p><strong>Vivado Design Suite 2013.4</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.2a)<br>Mentor Graphics Questa Advanced Simulator (10.2a)<br>Cadence Incisive Enterprise Simulator (IES) (12.2-016)<br>Synopsys VCS and VCS MX (H-2013.06)<br>Aldec Active-HDL (9.2 SP1) Aldec Riviera-PRO (2013.06)</p><p><strong>Vivado Design Suite 2013.3</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.2a)<br>Mentor Graphics Questa Advanced Simulator (10.2a)<br>Cadence Incisive Enterprise Simulator (IES) (12.2-016)<br>Synopsys VCS and VCS MX (H-2013.06-3)<br>Aldec Active-HDL (9.2) Aldec Riviera-PRO (2013.02)</p><p><strong>Vivado Design Suite 2013.1, 2013.2</strong></p><p>Mentor Graphics ModelSim SE&#x2F;DE&#x2F;PE (10.1b)<br>Mentor Graphics Questa Advanced Simulator (10.1b)<br>Cadence Incisive Enterprise Simulator (IES) (12.2)<br>Synopsys VCS and VCS MX (G-2012.09)<br>Aldec Active-HDL (9.2) Aldec Riviera-PRO (2012.10)</p><p><a href="https://www.xilinx.com/support/answers/68324.html">reference</a></p><p>笔者用的是Vivado2018.3，查询的对应的Modelsim版本为10.6c。</p><hr><h2 id="Modelsim破解"><a href="#Modelsim破解" class="headerlink" title="Modelsim破解"></a>Modelsim破解</h2><p>准备Modelsim10.6c的安装包</p><p><a href="https://download.csdn.net/download/qq_42334072/13087931">下载链接</a></p><p>步骤如下：</p><p>(1)、安装软件，<strong>注意安装路径中不要出现中文或空格</strong>，安装过程中一直点击YES即可。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232102490.png" alt="1"></p><p>(2)、把<code>crack.bat</code>、<code>MentorKG.exe</code>一起拷贝到modelsim安装目录的win64文件夹下，例如<code>D:\modelsim_dlx64_10.6c\win64pe</code></p><p>(3)、双击<code>crack.bat</code>，若出现下图所示问题，则将<code>mgls64.dll</code>重命名为<code>mgls.dll</code>再次重新运行<code>crack.bat</code>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232102020.png" alt="2"></p><p>(4)、将生成的<code>LICENSE.TXT</code>放在modelsim的安装路径下，如<code>D:\modelsim_dlx64_10.6c</code>，若前面修改了mgls64.dll文件的名称，则生成完LICENSE文件后应当把名字改回去。</p><p>(5)、新建环境变量<code>MGLS_LICENSE_FILE</code>，变量值为LICENSE放置的路径，如<code>D:\modelsim_dlx64_10.6c\LICENSE.TXT</code>。在win10中，右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量，进行环境变量的添加。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232102492.png" alt="3"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232102352.png" alt="4"></p><p>(6)、打开Modelsim软件，安装破解结束。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232102973.png" alt="5"></p><hr><h2 id="联合仿真"><a href="#联合仿真" class="headerlink" title="联合仿真"></a>联合仿真</h2><p>(1)、打开任意一个vivado工程，再按下图所示点击编译Xilinx的仿真库。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103139.png" alt="6"></p><p>注意：Simulator选Modelsim Simulator，编译库Compiled library location放入新建的文件夹<code>D:\Xilinx\Xlib</code>中(可自己指定)，Simulator executable path选择modelsim安装路径下的win64pe。注意Compile Xilinx IP选项不勾选。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103436.png" alt="7"></p><p>编译结果从Vivado中的Tcl Console中可知，无Errors，芜湖起飞！</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103881.png" alt="8"></p><p>(2)查看编译库Compiled library location路径下，应该出现<code>modelsim.ini</code>文件。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103243.png" alt="9"></p><p>我们将其设置为用户的全局变量，这样下次就不需要再编译库文件了，步骤如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103520.png" alt="10"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103420.png" alt="11"></p><p>(3)、设置第三方仿真软件的安装路径与编译库的路径，具体步骤如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232103143.png" alt="12"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232104566.png" alt="13"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232104304.png" alt="14"></p><p>(4)、全部准备就绪后，点击Run Simulation中的Run Behavioral Simulation。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232104184.png" alt="15"></p><p>自动弹出Modelsim，并显示波形，游戏结束。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232104385.png" alt="16"></p>]]></content>
    
    
    <summary type="html">Vivado与Modelsim联合仿真</summary>
    
    
    
    <category term="FPGA" scheme="http://david-luge.cn/categories/FPGA/"/>
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/categories/FPGA/FPGA-Tools/"/>
    
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/tags/FPGA-Tools/"/>
    
  </entry>
  
  <entry>
    <title>Vivado中RTL封装IP流程</title>
    <link href="http://david-luge.cn/2022/09/29/FPGA/Vivado%E4%B8%ADRTL%E5%B0%81%E8%A3%85IP%E6%B5%81%E7%A8%8B/"/>
    <id>http://david-luge.cn/2022/09/29/FPGA/Vivado%E4%B8%ADRTL%E5%B0%81%E8%A3%85IP%E6%B5%81%E7%A8%8B/</id>
    <published>2022-09-29T05:54:39.000Z</published>
    <updated>2022-09-29T05:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vivado中RTL封装IP流程"><a href="#Vivado中RTL封装IP流程" class="headerlink" title="Vivado中RTL封装IP流程"></a>Vivado中RTL封装IP流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录自己将RTL代码封装成IP的流程，以供之后查阅使用。最近一个月在做一个数据仲裁与转发的项目，已经完成功能仿真，准备将其封装成IP在Block Design中进行调用。实验平台为Vivado 2018.3，编程语言为Verilog，IP的接口主要是一个AXI-Lite接口和一个AXI-Full接口。闲言少叙，我们直接开始。</p><h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>新建一个文件夹<code>ip_test</code>，在该文件夹下新建文件夹<code>rtl</code>，将所有RTL源码放入该文件夹，完成准备工作；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232113260.png" alt="1"></p><p>新建一个文件夹<code>top_module</code>，里面仅存放RTL源码的最顶层的.v文件，便于IP生成正确的接口。(<strong>之前尝试将所有的RTL源码一次导入，发现vivado不能正确识别顶层模块，从而导致IP接口一直不对</strong>)</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232113923.png" alt="2"></p><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>双击打开vivado 2018.3，选择<code>Tasks-&gt;Manage IP-&gt;New IP Location</code>,按下图所示顺序进行操作；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114706.png" alt="3"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114156.png" alt="4"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114661.png" alt="5"></p><p>上图中的<code>IP location</code>选择之前建立的<code>ip_test</code>文件夹路径，选完后点击<code>Finish</code>完成工程的创建；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114039.png" alt="6"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114564.png" alt="7"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114217.png" alt="8"></p><p>因为本项目已有RTL源码，所以上图中我们选<code>Package a specified directory</code>；如果没有源码想创建一个带AXI接口的空IP往里写功能的话就选择<code>Create a new AXI4 Peripheral</code>；</p><p>此处一定注意下图中的路径，选择<strong>RTL顶层模块源码</strong>的路径</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232114671.png" alt="9"></p><p>指定项目的名称，本示例工程名字为<code>ip_test</code>;</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115430.png" alt="10"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115659.png" alt="11"></p><p>点击<code>Finish</code>后我们看到封装IP的界面，此时看到IP的名称与顶层模块相同，且接口也与顶层模块的一致，只是此时除了顶层模块外，其余模块均未添加到<code>Design Sources</code>中。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115723.png" alt="12"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115661.png" alt="13"></p><p>下面进行剩余源码的添加，将<code>rtl</code>文件夹中的代码添加到<code>Design Sources</code>中。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115747.png" alt="14"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232115898.png" alt="15"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116980.png" alt="16"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116444.png" alt="17"></p><p>选择IP封装模块的<code>File Groups</code>选项，点击<code>Merge changes from File Groups Wizard</code></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116407.png" alt="18"></p><p>可以看到此时的IP已经包含了所有的源码；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116420.png" alt="19"></p><h3 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116796.png" alt="20"></p><p>在<code>Ports and Interfaces</code>界面中，我们可以看到，vivado工具自动将时钟复位信号、AXI-Full信号和AXI-Lite信号进行打包处理(<em>vivado永远的神！</em>)，但还有一些属性需要设置，否则vivado会报warning。如复位信号的低电平复位属性、时钟与AXI协议的相关属性等；</p><p>添加复位信号的低电平复位属性流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116809.png" alt="21"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232116268.png" alt="22"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117310.png" alt="23"></p><p>将<code>clk</code>时钟与<code>rst_clk_n</code>绑定起来，并指定AXI-Lite接口用<code>clk</code>时钟</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117443.png" alt="24"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117514.png" alt="25"></p><p>具体各参数的属性配置情况大家可以参考<strong>vivado官方教程ug1118</strong>。完成上面时钟或者复位的绑定配置后，最后进行IP核的导出。</p><h3 id="导出IP"><a href="#导出IP" class="headerlink" title="导出IP"></a>导出IP</h3><p>在封装IP界面选择<code>Review and Package</code>，先进行打包IP的配置，点击<code>Edit packaging settings</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117071.png" alt="26"></p><p>进行上图所示的配置，其中<code>Delete project after packaging</code>选项可以不选，因为导出IP可能之后还要继续，要对RTL代码进行修改上板测试来迭代更新，所以我们一般保留导出IP的项目工程。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117492.png" alt="27"></p><p>最后回到封装IP的界面，点击<code>Package IP</code>选项即可。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232117377.png" alt="28"></p><p>已经成功打包，询问是否关闭项目工程，<code>Yes</code>或者<code>No</code>均可。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232118766.png" alt="29"></p><p>到指定的路径下查看，发现已经生成我们所需的IP。至此，封装IP圆满结束。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232118967.png" alt="30"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文为笔者打包IP的经验分享帖，其中不免错误不足之处，如果其中步骤有误还望大家指正出来，一起交流进步。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_2/ug1118-vivado-creating-packaging-custom-ip.pdf">Vivado Design Suite User Guide: Creating and Packaging Custom IP (UG1118)</a></p>]]></content>
    
    
    <summary type="html">Vivado中RTL封装IP流程</summary>
    
    
    
    <category term="FPGA" scheme="http://david-luge.cn/categories/FPGA/"/>
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/categories/FPGA/FPGA-Tools/"/>
    
    
    <category term="FPGA_Tools" scheme="http://david-luge.cn/tags/FPGA-Tools/"/>
    
  </entry>
  
  <entry>
    <title>NVDLA阅读笔记</title>
    <link href="http://david-luge.cn/2022/09/29/Proj/NVDLA%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://david-luge.cn/2022/09/29/Proj/NVDLA%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2022-09-29T02:04:39.000Z</published>
    <updated>2022-09-29T02:04:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NVDLA阅读笔记"><a href="#NVDLA阅读笔记" class="headerlink" title="NVDLA阅读笔记"></a>NVDLA阅读笔记</h1><h2 id="Unit-Description"><a href="#Unit-Description" class="headerlink" title="Unit Description"></a>Unit Description</h2><h3 id="System-Architecture"><a href="#System-Architecture" class="headerlink" title="System Architecture"></a>System Architecture</h3><p>NVDLA作为深度学习加速器可以集成在SoC中作为一个协处理器；</p><p>NVDLA有许多数据处理Engine，各Engine都是独立的且可以自由配置，比如不需要池化的网络可以移除Planar Data Processor，各Engine的调度操作可以委托给Microcontroller或者CPU；其中用Microcontroller来调度的方式称为“headed” implementation，用CPU来调度的方式称为“headless” implementation；</p><p>图中左边的框图展示了“headless” implementation的示例，是一个小型的NVDLA系统，成本较低；右边的框图展示了“headed” implementation的示例，是一个大型的NVDLA系统，主要是添加了Microcontroller和高带宽的SRAM，适合于高性能的物联网设备。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232141331.png" alt="1"></p><p>NVDLA主要有4个接口，其中SRAMIF是可选项；</p><ul><li>CSB（Configuration Space Bus）：这个接口是一个同步、低带宽、低功耗的32位控制总线，主要用来访问NVDLA的配置寄存器；</li><li>IRQ（Interrupt Request）：当NVDLA中的任务完成或者发生错误时会将中断线进行置位；</li><li>DBB（Data Backbone Interface）：DBB接口连接NVDLA和片外的DRAM，与AXI接口类似，是高速、高度可配置的数据总线，可以根据系统的要求发出不同大小的读写请求；</li><li>SRAMIF（SRAM Interface）：DBB接口还有一个可选的接口，在设计上与DBB接口相同，目的在于结合片上的SRAM来提供更高的数据吞吐量以及更低的访问延迟；</li></ul><h3 id="DLA-Core-Architecture"><a href="#DLA-Core-Architecture" class="headerlink" title="DLA Core Architecture"></a>DLA Core Architecture</h3><p>DLA的结构框图如图所示；内部主要有两个接口模块，其中Configuration Interface用于访问NVDLA的配置寄存器，Memory Interface用于读写特征数据、权重、像素数据等；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232141690.png" alt="2"></p><p>Convolution buffer主要用于缓存像素数据、特征数据、权重数据等，供卷积核中的卷积序列控制器模块读取；Convolution core主要完成卷积中的乘加运算；SDP主要负责对单个数据执行后处理操作，包括bias加法、ReLU、Sigmoid、双曲正切、BN、逐元素操作等；PDP是平面数据处理器，主要完成池化相关的操作；CDP主要在通道方向上执行操作，旨在解决局部响应归一化层；RUBIK模块的功能与BDMA类似，它在不进行任何数据计算的情况下转换数据的映射格式，因为它的功能是变换特征数据立方体的尺寸，所以又被称为魔方单元；BDMA模块在外部DRAM和片上SRAM之间提供了一条移动数据的通道，它有两条独立的路径，一条是将数据从外部DRAM复制&#x2F;移动到内部SRAM，另一条是将数据从内部SRAM复制&#x2F;移动到外部DRAM，两条路径不能同时工作；</p><p>NVDLA有两种工作模式，独立模式（Independent Mode）和结合模式（Fused Mode）。独立模式下，各Engine分别通过两组数据接口完成各自分配的任务；结合模式可以将Convolution Core、SDP和PDP连接在一起作为一个整体流水线完成分配的任务；</p><h3 id="Convolution-Pipeline"><a href="#Convolution-Pipeline" class="headerlink" title="Convolution Pipeline"></a>Convolution Pipeline</h3><p>流水线卷积模块是NVDLA的核心逻辑，用于加速卷积算法，同时在卷积流水线中引入了Winograd算法和Multi-batch，提高MAC效率。Convolution Pipeline有五个阶段，分别是Convolution DMA、Convolution Buffer、Convolution Sequence Controller、Convolution MAC和Convolution Accumulator，各阶段都有自己的CSB来接收来自CPU的配置数据。CDMA从SRAM&#x2F;DRAM中获取数据来进行卷积操作，并按卷积Engine所需的数据顺序存储到CBUF中；CBUF缓存来自CDMA模块的像素、特征和权重等数据，由CSC模块进行读取；CSC模块负责从CBUF加载数据并发送到CMAC单元，它是卷积序列控制的关键模块；CMAC模块从CSC接收输入数据和权重，执行乘法和加法运算，并将结果输出给CACC；CACC模块用于对CMAC模块的部分和进行累加，并在发送给SDP模块前对数据进行舍入操作。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232141311.png" alt="3"></p><h3 id="CDMA"><a href="#CDMA" class="headerlink" title="CDMA"></a>CDMA</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232141023.png" alt="4"></p><p>CDMA主要负责从SRAM&#x2F;DRAM中获取数据来进行卷积操作，读取的数据主要有以下数据类型：</p><ul><li>像素数据（Pixel Data）</li><li>特征数据（Feature Data）</li><li>未压缩&#x2F;压缩权重数据（Uncompressed&#x2F;compressed weight）</li><li>WMB（Weight Mask Bit）</li><li>WGS（Weight Group Size）</li></ul><p>CDMA主要有两个数据通道，分别是权重读取通道和数据读取通道，CDMA仅发送数据读取的请求。CDMA有三个子模块来获取像素数据或者特征数据来进行卷积，分别是CDMA_IMG（Pixel）、CDMA_WG（Winograd）、CDMA_DC（Direct Convolution）。上述三个子模块的工作步骤类似，区别在于数据存放在CBUF RAM中的格式，任何时候只能有一个子模块被激活来获取像素&#x2F;特征数据。以CDMA_DC为例介绍一下CDMA的工作流程：</p><ul><li>检查CBUF的状态，查看是否有空间；</li><li>进行一个读取事务；</li><li>在共享缓冲区（Shared_buffer）中缓存特征数据；</li><li>将特征数据立方体重塑为正确的格式；</li><li>生成卷积缓冲区（CBUF）的写入地址；</li><li>将特征数据写入CBUF；</li><li>更新CDMA_STATUS子模块中CBUF的状态；</li></ul><h3 id="CBUF"><a href="#CBUF" class="headerlink" title="CBUF"></a>CBUF</h3><p>CBUF模块有16个32KB的Bank，每个Bank由两个512位宽、256深度的双口RAM组成，存储空间共512KB；CBUF缓存来自CDMA的像素、特征、权重和WMB数据，并由CSC模块进行读取；CBUF有两个写端口和三个读端口。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232141424.png" alt="5"></p><p>如果权重被压缩，那么Bank15分配给WMB数据，Bank0~14分配给特征、权重进行缓存。如果权重没被压缩，那么特征、权重缓冲区可以使用16个Bank；</p><p>每个Bank都是循环缓冲区，新的数据进来时地址都会进行自增，当地址达到最大值后会回到0重新自加；</p><h3 id="CSC"><a href="#CSC" class="headerlink" title="CSC"></a>CSC</h3><p>卷积序列控制器（CSC）负责从CBUF加载输入特征数据、像素数据和权重数据，并将其发送到CMAC单元，主要包含三个模块：CSC_SG、CSC_WL和CSC_DL。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142001.png" alt="6"></p><h4 id="CSC-SG"><a href="#CSC-SG" class="headerlink" title="CSC_SG"></a>CSC_SG</h4><p>CSC_SG模块用来生成序列来控制卷积操作，它的工作流程如下：</p><ol><li>在CBUF中轮询足够的数据和权重；</li><li>生成一对序列包，包括weight加载包和data加载包，每个包表示一个stripe operation；</li><li>将两个加载包push到两个FIFO中；</li><li>两个用于weight和feature&#x2F;image的计数器都是向下计数；&#x2F;&#x2F;计数器的作用？</li><li>当计数器达到零时，检查来自CACC的信号是否有任何back pressure；</li><li>如果所有条件都准备就绪，就将weight和data包发送给CSC_WL和CSC_DL；</li></ol><h4 id="CSC-DL"><a href="#CSC-DL" class="headerlink" title="CSC_DL"></a>CSC_DL</h4><p>CSC_DL（Data loader）负责执行feature&#x2F;image加载序列的逻辑，他从CSC_SG接收包，从CBUF加载feature&#x2F;image data，并将其发送到CMAC；且它还维护CBUF的状态，并与CDMA通信以保持状态最新。对于Winograd模式，它还执行预加法来转换输入数据；</p><p>以DC mode为例说明CSC_DL的工作流程：</p><ol><li>每个Atomic Operation，DL从CBUF读取一个data atom，并发送给CMAC；</li><li>每个Stripe Operation，DL从CBUF读取16~32个data atom，并发送给CMAC；</li><li>每个Block Operation，DL重复（weight_height*weight_width）次stripe operation，从CBUF读取对应的data atom，并发送给CMAC；</li><li>每次Channel Operation，DL重复C&#x2F;64次block Operation，从CBUF读取对应的data atom，并发送给CMAC；</li><li>每个Group Operation，DL遍历整个feature map，重复（data_width*data_height）&#x2F;（16~32）次channel operation，并发送给CMAC；</li><li>DL重复kernel_num&#x2F;（16~32）次group operation，每次的data都是相同的；</li></ol><p>注：16 or 32取决于数据精度。</p><h4 id="CSC-WL"><a href="#CSC-WL" class="headerlink" title="CSC_WL"></a>CSC_WL</h4><p>CSC_WL（Weight loader）执行weight加载序列的逻辑，它从CSC_SG接收包，从CBUF加载weight，并进行必要的解压缩并将其发送到CMAC。它帮助维护权重缓冲区状态，并与CDMA_WT通信，来使状态及时更新。</p><p>以DC mode为例说明CSC_WL的工作流程：</p><ol><li>每个atomic operation，WL不需要操作；</li><li>每个stripe operation，WL从CBUF读取1个group的16&#x2F;32个weight atom，并发送给CMAC；</li><li>每个block operation，WL重复（weight_height*weight_width）次stripe operation，从CBUF读取对应的weight atom，并发送给CMAC；</li><li>每个channel operation，WL重复C&#x2F;64次block operation，从CBUF读取对应的weight atom，并发送给CMAC；（tips：64&#x3D;128byte&#x2F;(int16&#x2F;fp16)）</li><li>每个group operation，WL反复读取同一组group的weight，重复（data_width*data_height）&#x2F;（16~32）次channel operation，并发送给CMAC；</li><li>WL重复kernel_num&#x2F;（16~32）次group operation，完成所有kernel group的读取；</li></ol><h3 id="CMAC"><a href="#CMAC" class="headerlink" title="CMAC"></a>CMAC</h3><p>CMAC（Convolution Multiply Accumulate）模块是流水线卷积操作的一个阶段，它从CSC接收输入数据和权重，进行乘法和加法运算，并将输出结果输出到卷积累加器。当在Winograd模式下工作时，CMAC在输出上执行POA(post addition)将结果转换为标准激活格式。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142273.png" alt="7"></p><p>CMAC有16个相同的MAC Cell，每个MAC Cell包含64个用于16bit的16位乘法器，还包含72个16bit的加法器，用于Winograd的POA。每个16位宽的乘法器和加法器都可以拆分成int8格式的两个计算单元，所以int8的吞吐量是int16的两倍；MAC Cell的流水线深度为7个Cycle。</p><p>为了Physical Design Optimization，CMAC被分为两部分CMAC_A和CMAC_B，每个都有单独的CSB接口。</p><h3 id="CACC"><a href="#CACC" class="headerlink" title="CACC"></a>CACC</h3><p>卷积累加器（CACC）是卷积流水线在CMAC之后的阶段，它用于累加CMAC模块的部分和，并在发送到SDP之前对结果进行舍入&#x2F;饱和。它支持不同位宽的数据输入，对于INT16输入而言结果位宽为48位，对于INT8输入而言结果位宽为34位。CACC和SDP模块之间的数据位宽是32，所以在将结果发送给SDP之前需要执行一个舍入和饱和运算。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142043.png" alt="8"></p><p>CACC中的组件如图所示，工作流程主要如下：</p><ol><li>从assembly SRAM中预取累加和；</li><li>当CMAC的部分和到达时，将它们与累加和一起发送到adder array；如果部分和来自第一个stripe operation，则累积和应为0；</li><li>从adder array的输出端收集新的累加和；</li><li>存储到assembly SRAM中；</li><li>在stripe operation中重复step1~step3，直到一个channel operation完成；</li><li>如果完成channel operation，加法器的输出将被舍入并饱和；</li><li>收集上一步的结果并将其存储到delivery SRAM中；</li><li>从delivery SRAM中加载结果并将它们发送给SDP；</li></ol><p>为支持Direct Convolution模式下的Multi-Batch选项，CACC在交付SRAM组中应用了data remapping功能；为了防止数据溢出，CACC使用相关协议来反压CSC模块。</p><h3 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142835.png" alt="9"></p><p>SDP是单点数据处理器，意在对单个数据元素级别执行后处理操作，主要完成以下的操作：</p><ol><li>**<u>Bias加法</u>**的公式为<code>y=x+bias</code>，bias是一个预先训练的参数，可以是以下3种之一：如果整个data cube都是同一bias的话可以从寄存器获取；per-channel模式下，同一channel内bias共享；per-element模式下，不同的element的bias都不同。</li><li>Non-Linear Function，包括ReLU、Sigmoid和双曲正切。ReLU可以通过硬件逻辑实现，Sigmoid和双曲正切函数是非线性函数，所以用查找表来实现；</li><li>Batch Normalization：SDP支持使用给定的均值&#x2F;标准方差参数进行批量归一化，参数是从训练中获得的，SDP还可以支持按层参数或者按通道参数进行批量归一化操作；</li><li>Element-Wise Layer：它指两个具有相同W、H和C参数的特征数据立方体之间的一种操作。这两个W×H×C特征数据立方体进行元素加法、乘法、或MAX&#x2F;MIN比较操作，并输出一个W×H×C的特征数据立方体；</li><li>PReLU Function，ReLU是将负值裁剪到0，而PReLU是将负值进行缩放；</li><li>Format Conversion：NVDLA支持INT8、INT16和FP16精度，较低的精度可提供较高的性能，而较高的精度可提供更好的推理结果。</li></ol><h3 id="PDP"><a href="#PDP" class="headerlink" title="PDP"></a>PDP</h3><p>PDP主要沿宽×高的平面执行操作，PDP模块旨在完成池化层，支持MAX、MIN和AVERAGE池化操作。PDP单元接收来自SDP或者MCIF&#x2F;SRAMIF的数据，并将数据发送给MCIF&#x2F;SRAMIF。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142274.png" alt="10"></p><p>支持的尺寸如下：Pooling Kernel Size：1<del>8；Pooling Kernel Stride：1</del>16；</p><p>on-the-fly模式下输入数据直接从SDP获取，off-fly模式下输入数据从PDMA获取；</p><p>Pre-processing模块主要完成最大、最小操作以及部分和的求和操作；</p><p>Pos-processing模块主要针对Average Pooling进行相关的后处理操作，如果是MAX&#x2F;MIN Pooling操作的话，那么Share Line Buffer存储的就是最终结果；如果是Average Pooling的话，需要取出Share Line Buffer中的数进行除法操作，并且为方便硬件实现将除法转换为乘法操作；</p><h3 id="CDP"><a href="#CDP" class="headerlink" title="CDP"></a>CDP</h3><p>CDP模块旨在解决局部响应归一化层，LRN通过在通道方向上对局部输入区域进行归一化。CDP模块始终与其它处理子单元<u><strong>独立工作</strong></u>，它从PDMA接收输入数据并将输出数据发送回PDMA。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232142860.png" alt="11"></p><p>LRN的计算公式中涉及到除法和指数运算，使用硬件实现代价较大，所以内部用LUT实现功能。</p><h3 id="RUBIK"><a href="#RUBIK" class="headerlink" title="RUBIK"></a>RUBIK</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143590.png" alt="12"></p><p>RUBIK的功能是转换数据的映射格式，主要有三种工作模式：</p><ul><li>contract data cube</li><li>split feature data cube into multi-planar formats</li><li>merge multi-planar formats to data cube</li></ul><h3 id="BDMA"><a href="#BDMA" class="headerlink" title="BDMA"></a>BDMA</h3><p>NVDLA一般将输入图像和处理结果存储在外部DRAM中，但受限于DRAM的带宽和延迟，NVDLA不能提高MAC阵列的效率，所以NVDLA配置了一个到片上SRAM的辅助存储器接口。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143215.png" alt="13"></p><p>NVDLA使用BDMA来在外部DRAM和内部SRAM之间移动数据，有两个独立的路径，一个是从DRAM到SRAM，另一个是从SRAM到DRAM，两个方向不能同时工作。同时BDMA还可以将数据从DRAM移动到DRAM，或者从SRAM移动到SRAM。</p><p>两个接口的数据位宽均为512位，最大突发长度为4。</p><h3 id="MCIF-amp-SRAMIF"><a href="#MCIF-amp-SRAMIF" class="headerlink" title="MCIF&amp;SRAMIF"></a>MCIF&amp;SRAMIF</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143502.png" alt="14"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143212.png" alt="15"></p><p>MCIF用于仲裁多个内部子模块的请求，并转换为AXI协议来连接到外部DRAM。MCIF是同时支持读写通道的仲裁的，但有些NVDLA的子模块只有读请求，如图中的CDMA0和CDMA1只有读请求，其它5个接口均需要读写。</p><p>SRAMIF与MCIF接口功能类似，但预计总线延迟更低。</p><h2 id="Convolution-in-NVDLA"><a href="#Convolution-in-NVDLA" class="headerlink" title="Convolution in NVDLA"></a>Convolution in NVDLA</h2><p>下面简单说一下NVDLA中直接卷积的流程。输入的Data Cube为W×H×C；共K个kernel，每个kernel的尺寸为S×R×C；输出的Data Cube尺寸为W’×H’×C’；其中W’和H’与Padding和Stride有关，C’与Kernel数量相等；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143782.png" alt="16"></p><p>下图显示了Stride和Zero Padding的示意图，其中黑色虚线框出的是Padding之前的Feature Data；Kernel字母表示卷积核的中间位置，可以看到在X方向和Y方向上分别以SX和SY为距离进行步进；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143564.png" alt="17"></p><h3 id="Data-Format"><a href="#Data-Format" class="headerlink" title="Data Format"></a>Data Format</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232143069.png" alt="18"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144717.png" alt="19"></p><p>这张图显示了Direct Convolution模式下特征数据与权重的数据格式，特征数据以32Byte为单位，在W-H-C方向上进行扫描并对数据进行存储，如果原始特征数据不是C方向上的32字节对齐，则将数据添加到通道末尾；</p><p>权重数据是在卷积操作之前很久就生成的，软件应将权重数据按DLA中的计算顺序进行映射。权重是在通道方向上以128Byte为单位进行划分，不足128Byte的话要进行一个补零操作，在C’-W-H-C方向上进行扫描并对数据进行存储。</p><h3 id="Atomic-Operation"><a href="#Atomic-Operation" class="headerlink" title="Atomic Operation"></a>Atomic Operation</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144637.png" alt="20"></p><p>在一个原子操作中，每个MAC Cell都取一个1×1×64的weight cube（16bit）来与1×1×64的feature data做运算，**<u>完成64个数的乘加运算操作（64个Channel）</u><strong>。因为有16个MAC Cell，所以一次能并行计算16个kernel，MAC Cell乘加运算后的结果叫做部分和，所以</strong><u>每个Cycle我们可以得到16个部分和（partial sum）</u>**。得到的部分和被送往CACC模块进行累积和的计算。</p><h3 id="Stripe-Operation"><a href="#Stripe-Operation" class="headerlink" title="Stripe Operation"></a>Stripe Operation</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144640.png" alt="21"></p><p>条带操作是原子操作的组合，在一次条带操作的过程中，**<u>MAC Cell中的权重数据保持不变</u>**，特征数据沿着input data cube滑动。（首先沿着W方向进行滑动）</p><p>由于条带操作MAC Cell中权重数据保持不变，所以**<u>一次条带操作中的部分和不能进行累加操作</u>**，因为它们来自不同的卷积核；这就是说需要在CACC模块对部分和进行缓存。</p><p><strong><u>由于CACC模块的缓冲区受限，所以Stripe Operation的Length有上限，上限为32。</u><strong>同时Stripe Operation的Length也有下限，</strong><u>因为要更新下一次Stripe Operation的权重数据至少要16个Cycle，所以下限为16。</u></strong></p><p>即1次Stripe Operation&#x3D;16~32次Atomic Operation，其中Weight Data不变，滑动Feature Data。</p><h3 id="Block-Operation"><a href="#Block-Operation" class="headerlink" title="Block Operation"></a>Block Operation</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144564.png" alt="22"></p><p>Block Operation是由一系列的Stripe Operation组成，**<u>次数为（Weight Width×Weight Height）</u>**，每次Stripe Operation的部分和结果都被发送到CACC模块进行累加和的计算。</p><!--NVDLA文档上写的是16-32 element accumulator，我理解的是可以对16-32路进来的数据进行累加，在一次Block Operation中每路的数据量应该是（Weight Width×Weight Height），每个数据都是Atomic Operation的部分和。--><blockquote><p>The partial sums from the same block operation are added together per stripe operation in the convolution accumulator.</p></blockquote><p>累加和的计算公式如下：<br>$$<br>AS_{w,h,k,c}&#x3D;\sum_{r&#x3D;0}^{R-1}\sum_{s&#x3D;0}^{S-1}\sum_{i&#x3D;c}^{min(c+63,C-1)}x_{(w<em>SX-LP+r),(h</em>SY-TP+s),i}*wt_{r,s,i,k}<br>$$<br>在公式中，AS指accumulative sum，其中第一个和第二个求和应该是由CACC模块进行，第三个求和应该是MAC Cell进行。</p><h3 id="Channel-Operation"><a href="#Channel-Operation" class="headerlink" title="Channel Operation"></a>Channel Operation</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144295.png" alt="23"></p><p>每次Block Operation完成64个kernel的运算，Channel Operation是一系列Block Operation的组合，次数共有<code>(C+63)/64</code>，完成Channel方向上的所有运算。**<u>在同一个Channel Operation中的部分和应该以卷积核为单位继续进行累加操作</u>**，在Channel Operation完成后，存储的累加和才是卷积的最终结果，才会从CACC模块中的assembly SRAM卸载到delivery SRAM，送给后续的处理模块。</p><!--CACC模块对16-32路进来的数据进行累加，在一次Block Operation中每路的数据量应该是（Weight Width×Weight Height）×[(C+63)/64]，每个数据都是Atomic Operation的部分和。--><h3 id="Group-Operation"><a href="#Group-Operation" class="headerlink" title="Group Operation"></a>Group Operation</h3><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232144454.png" alt="24"></p><p>Group Operation是Channel Operation的组合，需要重复<code>(data_width*data_height)/(16~32)</code>次。在Group Operation后，输出的数据尺寸为<code>W×H×K&#39;</code>，其中K’为一次Kernel Group中Kernel的数量，对于16-bit的数据而言为16个，对于8-bit的数据而言为32个。</p><p>Direct Convolution重复<code>kernel_num/(16~32)</code>次Group Operation即可完成卷积运算，每次的feature data都是相同的。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="权重压缩"><a href="#权重压缩" class="headerlink" title="权重压缩"></a>权重压缩</h3><ul><li>WMB：Weight Mask Bit，用一位标记来指示权重元素是否为0，1位与1个权重element对应；对于int16和fp16，1位代表2字节权重数据；对于int8，1位代表1个字节的权重数据；WMB始终是128Byte对齐，不足的补0。</li><li>WGS：Weight Group Size，压缩后的权重组数据量大小，单位为Byte，位宽为32bit；</li></ul><h3 id="Multi-Batch-Mode"><a href="#Multi-Batch-Mode" class="headerlink" title="Multi-Batch Mode"></a>Multi-Batch Mode</h3><p>NVDLA支持多批次模式来提高性能并降低带宽，特别是对于全连接层。全连接层的输出是1×1×C的data cube，也就是说FC层中的所有权重只使用一次，就是FC层的一个条带操作内只有一个原子操作，但流水线卷积还需要16个周期来为下一个原子操作加载权重，MAC的效率下降到6.25%。</p><p>多批次就是说同时处理多个输入的特征数据立方体，流水线卷积将为一组权重kernel获取多个输入数据立方体，这也改变了原子操作。来自不同输入数据立方体的1×1×64的cube一个一个交错加载以进行原子操作，然后条带操作包含多个批次的原子操作。由于权重在整个Stripe Operation中重复使用，因此可以把权重加载周期隐藏到处理流程中，提高了MAC的使用效率。</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p><a href="http://nvdla.org/hw/v1/ias/unit_description.html">Reference</a></p>]]></content>
    
    
    <summary type="html">关于我实习学习NVDLA的一些记录</summary>
    
    
    
    <category term="Proj" scheme="http://david-luge.cn/categories/Proj/"/>
    
    
    <category term="Proj" scheme="http://david-luge.cn/tags/Proj/"/>
    
  </entry>
  
  <entry>
    <title>Verilog各类分频器设计详解</title>
    <link href="http://david-luge.cn/2022/09/29/IC/Basic/Verilog%E5%90%84%E7%B1%BB%E5%88%86%E9%A2%91%E5%99%A8%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/"/>
    <id>http://david-luge.cn/2022/09/29/IC/Basic/Verilog%E5%90%84%E7%B1%BB%E5%88%86%E9%A2%91%E5%99%A8%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-29T01:50:39.000Z</published>
    <updated>2022-09-29T01:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Verilog各类分频器设计详解"><a href="#Verilog各类分频器设计详解" class="headerlink" title="Verilog各类分频器设计详解"></a>Verilog各类分频器设计详解</h1><p>分频器是时序电路的基本器件，它的功能是对系统时钟或其他时钟进行分频产生所需要的时钟信号。分频有两种方式：一是通过HDL语言建模产生所需要的时钟信号，二是利用开发工具的PLL进行分频。前者分频灵活，需编写代码实现；后者使用场景受限，因为有的低端FPGA没有PLL，但PLL的分频效果更好，而且在进行小数分频时也比较容易实现。<strong>本文首先尝试用HDL语言建模方式设计各种类型的分频器，最后给大家简单介绍一下PLL的使用。</strong>如有不足之处还望大家批评指正。</p><h2 id="偶数分频器"><a href="#偶数分频器" class="headerlink" title="偶数分频器"></a>偶数分频器</h2><p>我们先从最简单的偶数分频器切入，慢慢分析各种分频器的实现。</p><p>若要实现二分频，则只需要在原时钟的上升沿进行输出时钟状态的翻转即可，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232037429.png" alt="1"></p><p>若实现四分频呢？则需要一个计数器，每次在原时钟的上升沿计数，当计数器记到2个上升沿时输出时钟状态进行翻转，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232037205.png" alt="2"></p><p>现在对一般情况进行分析，<strong>对时钟进行N分频，N为偶数</strong>；则计数器每次在原时钟的上升沿计数，<strong>计数器的范围为0~(N-1)<strong>，我们可以在0—(N-1)这N个数中分出两个范围选择输出时钟的状态，如当cnt在0—M范围时输出时钟为低电平，当cnt在(M+1)—(N-1)范围时输出时钟为高电平，则</strong>我们可以动态调整输出时钟的占空比</strong>，输出时钟的占空比为(N-M-1)&#x2F;N；</p><p>以8分频为例，则N&#x3D;8，取M&#x3D;3，则此时输出的时钟应当是50%占空比，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232038249.png" alt="3"></p><p>若取M&#x3D;1，则此时输出时钟的占空比应当是75%，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232038225.png" alt="4"></p><p><strong>偶数分频器代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 偶数分频器示例，可调占空比</span></span><br><span class="line"><span class="keyword">module</span> clk_div_even(</span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> clk,                 <span class="comment">//系统时钟</span></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> rst_n,               <span class="comment">//异步低电平复位</span></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] clkperiod,     <span class="comment">//分频系数，N(偶数)分频时clkperiod=N</span></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] clklow,        <span class="comment">//低电平占用系统时钟的周期数</span></span><br><span class="line">                                    <span class="comment">//占空比为50%时clklow=N/2</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> clk_out<span class="comment">//输出时钟</span></span><br><span class="line">    );</span><br><span class="line"> </span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] cnt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">        cnt &lt;= <span class="number">8&#x27;b0</span>;</span><br><span class="line">        clk_out &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(cnt == clklow - <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">            clk_out &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            cnt &lt;= cnt + <span class="number">8&#x27;d1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt == clkperiod - <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">            clk_out &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            cnt &lt;= <span class="number">8&#x27;d0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= cnt + <span class="number">8&#x27;d1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="奇数分频器"><a href="#奇数分频器" class="headerlink" title="奇数分频器"></a>奇数分频器</h2><p>我们先以三分频模块切入，分析奇数分频器的思想：整体思路是<strong>产生两路上升沿和下降沿触发信号</strong>，然后对这两路信号进行操作得到最终分频时钟。</p><p>当分频系数N为奇数时，使用一个计数器在0~(N-1)循环进行计数，控制输出(N-1)&#x2F;2个高电平，(N+1)&#x2F;2个低电平，称为<code>clk_1</code>；然后将此<code>clk_1</code>电平信号延迟半个周期称为<code>clk_2</code>，最后输出<code>clk_out =  clk_1 | clk_2</code>，即为占空比为50%的奇数分频器；另一种思路是产生输出(N+1)&#x2F;2个高电平，(N-1)&#x2F;2个低电平的<code>clk_1</code>，输出的分频时钟为<code>clk_out =  clk_1 &amp; clk_2</code>。</p><p>以<code>clk_out =  clk_1 &amp; clk_2</code>为例，将<code>clk_1</code>延时半个时钟周期的方法有两种，法1是直接使用下降沿的锁存器对<code>clk_1</code>锁存得到<code>clk_2</code>，法2得到<code>clk_2</code>的原理与<code>clk_1</code>相同，不过是在下降沿检测。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232039017.png" alt="5"></p><p>若采用法一，则我们用一个<strong>下降沿触发</strong>的D触发器锁存<code>clk_1</code>的结果<code>clk_2</code>，然后将<code>clk_1</code>与<code>clk_2</code>信号做逻辑“或”就得到了占空比50%的分频时钟信号<code>clk_out</code>。</p><p>结合上面的偶数分频器，如果N为偶数，则<code>clk_1</code>就是我们所需要的分频结果，如果N为奇数，则<code>clk_1 &amp; clk_2</code>就是我们所需的分频结果，所以我们可以把偶数分频和奇数分频结合，实现N分频器设计，其中N为正整数；通过N[0]选择输出，N[0]&#x3D;1为奇数分频，N[0]&#x3D;0为偶数分频。</p><p>5分频结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232040146.png" alt="6"></p><p>6分频结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232040660.png" alt="7"></p><p><strong>正整数分频器代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> clk_div_integer #(</span><br><span class="line">    <span class="keyword">parameter</span> N = <span class="number">6</span>,        <span class="comment">//N分频，N为整数</span></span><br><span class="line">    <span class="keyword">parameter</span> WIDTH = <span class="number">3</span>     <span class="comment">//计数器位宽</span></span><br><span class="line">) (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> rstn,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> clk_out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [WIDTH-<span class="number">1</span>:<span class="number">0</span>] cnt;</span><br><span class="line">    <span class="keyword">reg</span> clk_1,clk_2;</span><br><span class="line">    <span class="keyword">wire</span> clk_odd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == N-<span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">                cnt &lt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                cnt &lt;= cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            clk_1 &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span>(cnt == ((N-<span class="number">1</span>) &gt;&gt; <span class="number">1</span>)) <span class="keyword">begin</span></span><br><span class="line">                clk_1 &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(cnt == (N-<span class="number">1</span>))<span class="keyword">begin</span></span><br><span class="line">                clk_1 &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                clk_1 &lt;= clk_1;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法1：在时钟下降沿锁存clk_1得到clk_2</span></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            clk_2 &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            clk_2 &lt;= clk_1;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//法2:clk2与clk_1产生的方式相同，差别是clk_2是下降沿触发</span></span><br><span class="line">    <span class="comment">// always @(negedge clk or negedge rstn) begin</span></span><br><span class="line">    <span class="comment">//     if(~rstn) begin</span></span><br><span class="line">    <span class="comment">//         clk_2 &lt;= 1&#x27;b0;</span></span><br><span class="line">    <span class="comment">//     end</span></span><br><span class="line">    <span class="comment">//     else begin</span></span><br><span class="line">    <span class="comment">//         if(cnt == ((N-1) &gt;&gt; 1)) begin</span></span><br><span class="line">    <span class="comment">//             clk_2 &lt;= 1&#x27;b0;</span></span><br><span class="line">    <span class="comment">//         end</span></span><br><span class="line">    <span class="comment">//         else if(cnt == (N-1)) begin</span></span><br><span class="line">    <span class="comment">//             clk_2 &lt;= 1&#x27;b1;</span></span><br><span class="line">    <span class="comment">//         end</span></span><br><span class="line">    <span class="comment">//         else begin</span></span><br><span class="line">    <span class="comment">//             clk_2 &lt;= clk_2;</span></span><br><span class="line">    <span class="comment">//         end</span></span><br><span class="line">    <span class="comment">//     end</span></span><br><span class="line">    <span class="comment">// end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> clk_odd = clk_1 | clk_2;</span><br><span class="line">    <span class="keyword">assign</span> clk_out = N[<span class="number">0</span>] ? clk_odd : clk_1;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="半整数分频器"><a href="#半整数分频器" class="headerlink" title="半整数分频器"></a>半整数分频器</h2><p><strong>1、占空比非50%</strong></p><p>网上比较多的分频思路是：半整数分频多出来的那半个周期为高电平，其余为低电平。以5.5分频为例，以原时钟的半周期为单位，可以分频输出1高10低。原理是用计数器循环记数0~10即11个周期，控制输出<code>clk_1</code>前6周期高电平，后5周期低电平，然后再使用该计数器得到一下降沿触发的5低6高的输出<code>clk_2</code>，最后输出<code>clk_out = clk_1 &amp; clk_2</code>。波形图如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232041944.png" alt="8"></p><p>现在我们虽然得到了5.5分频后的信号，但占空比不是很理想，是否可以在其基础上进行改进来实现占空比近似50%的分频信号呢？</p><p><strong>2、占空比近似50%</strong></p><p>由上面的波形图我们可以看到，如果<code>clkx</code>和<code>clky</code>在<code>cnt</code>的其它状态(稍微偏大的值)进行状态翻转的话，可能输出的<code>clk_out = clk_1 &amp; clk_2</code>就能达到近似50%的占空比。在尝试后发现，<code>clkx</code>在<code>cnt</code>等于<code>N+M</code>和<code>2N</code>时进行状态翻转，<code>clky</code>在<code>cnt</code>等于<code>N</code>和<code>M</code>时进行状态翻转，此时输出的<code>clk_out = clk_1 &amp; clk_2</code>近似50%占空比。其中N为不超过分频系数的最大整数，如5.5分频时<code>N=5</code>，当N为奇数时<code>M=(N-1)/2</code>，当N为偶数时<code>M=(N+1)/2</code></p><p>占空比近似50%的4.5分频的波形图如下所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232041417.png" alt="9"></p><p><strong>半整数分频器代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> clk_div_half #(</span><br><span class="line">    <span class="keyword">parameter</span> N = <span class="number">5</span>             <span class="comment">//5.5分频时N=5,以此类推</span></span><br><span class="line">) (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> rstn,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> clk_div</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//localparam M = 0;                                           //占空比非50%，高电平仅有半周期</span></span><br><span class="line">    <span class="keyword">localparam</span> M = N[<span class="number">0</span>] ? ((N - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) : ((N + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>);        <span class="comment">//占空比近似50%</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] cnt;</span><br><span class="line">    <span class="keyword">reg</span> clkx,clky;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">       <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">           cnt &lt;= <span class="number">32&#x27;d0</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(cnt == (N&lt;&lt;<span class="number">1</span>)) <span class="keyword">begin</span></span><br><span class="line">           cnt &lt;= <span class="number">32&#x27;d0</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">           cnt &lt;= cnt + <span class="number">1&#x27;b1</span>;</span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            clkx &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt == N + M) <span class="keyword">begin</span></span><br><span class="line">            clkx &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt == (N &lt;&lt; <span class="number">1</span>))<span class="keyword">begin</span></span><br><span class="line">            clkx &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            clky &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt == N) <span class="keyword">begin</span></span><br><span class="line">            clky &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt == M) <span class="keyword">begin</span></span><br><span class="line">            clky &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> clk_div = clkx &amp; clky;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><h2 id="小数分频器"><a href="#小数分频器" class="headerlink" title="小数分频器"></a>小数分频器</h2><p>以8.7分频为例来分析小数分频器的设计。因为无法用计数器表示0.7这种数字，所以我们用一个等效的概念来实现8.7分频，原时钟87个周期的总时间等于分频后的时钟10个周期的总时间。</p><p>因为8.7分频在8分频和9分频之间，所以我们用8分频和9分频来组合生成8.7分频的时钟。可以列方程组，设8分频共x个周期，9分频共y个周期，则</p><ul><li>x+y&#x3D;10(1)</li><li>8*x + 9 *y &#x3D; 87  (2)</li></ul><p>解得x&#x3D;3，y&#x3D;7。</p><p>即通过3次8分频和7次9分频可得到8.7分频。但如果是按序先输出3个8分频再输出7次9分频的时钟用处不大，我们还得乱序<strong>使其均匀输出，不然会造成时钟频率均匀性不好，相位抖动大的问题</strong>。</p><p>此处我们介绍脉冲删除小数分频，该方法相对比较简单。什么意思呢？就是说我在87个输入时钟里删掉77个时钟周期，这样不就输出了10个时钟周期了吗？也就实现了8.7分频，那么该怎么删呢？查阅论文后得到结论：</p><ol><li>设置寄存器cnt位宽自定，初始值为0；</li><li>在<code>clk</code>的上升沿<code>cnt=cnt+分母</code>，并判断<code>cnt</code>是否大于分子，若大于分子则在下一周期减去分子；</li><li><code>cnt</code>小于分子时，输出脉冲信号为0，<code>cnt</code>大于分子时，输出脉冲信号为1；</li></ol><p>说起来比较乱，我们以7&#x2F;3分频为例来看</p><table><thead><tr><th align="center">时钟序号</th><th align="center">cnt</th><th align="center">输出脉冲</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">3</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">6</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">9</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">(12-&gt;)5</td><td align="center">0</td></tr><tr><td align="center">4</td><td align="center">8</td><td align="center">1</td></tr><tr><td align="center">5</td><td align="center">(11-&gt;)4</td><td align="center">0</td></tr><tr><td align="center">6</td><td align="center">(7-&gt;)0</td><td align="center">1</td></tr></tbody></table><p>从表中可以看到每7个周期输出3个脉冲，刚好满足分频要求。</p><p><strong>小数分频器代码</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns/1ns</span></span><br><span class="line"><span class="keyword">module</span> clk_div_decimal #(</span><br><span class="line">    <span class="keyword">parameter</span> fraction = <span class="number">16&#x27;d87</span>,       <span class="comment">//分频的分子</span></span><br><span class="line">    <span class="keyword">parameter</span> denominator = <span class="number">16&#x27;d10</span>,    <span class="comment">//分频的分母</span></span><br><span class="line">    <span class="keyword">parameter</span> cnt_width = <span class="number">8</span>            <span class="comment">//计数器的位宽</span></span><br><span class="line">) (</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> clk,</span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> rstn,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> clk_out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [cnt_width-<span class="number">1</span>:<span class="number">0</span>] cnt;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rstn) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(~rstn) <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= <span class="number">0</span>;</span><br><span class="line">            clk_out &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt &lt; fraction) <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= cnt + denominator;</span><br><span class="line">            clk_out &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            cnt &lt;= cnt + denominator - fraction;</span><br><span class="line">            clk_out &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure><p>8.7分频结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232042586.png" alt="10"></p><p>3.25分频结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232042675.png" alt="11"></p><h2 id="PLL分频"><a href="#PLL分频" class="headerlink" title="PLL分频"></a>PLL分频</h2><p>这里就给大家简单介绍一下如何在Vivado中对PLL进行例化。</p><p>首先打开<code>vivado</code>，新建一个RTL项目，点击<code>Flow Navigator</code>窗口中的<code>IP Catalog</code>，在<code>search</code>处搜索自己想要的IP核的名字，例如输入<code>clock</code>就会找到<code>Clocking Wizard</code>这个IP核，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045234.png" alt="12"></p><p>双击Clocking Wizard 这个IP核，就能弹出配置窗口；我们简单配置一些信息，输入时钟为100MHz，分频输出两个时钟，一个是30MHz，一个是18MHz，查看分频效果；</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045483.png" alt="13"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045206.png" alt="14"></p><p>点击Generate,生成IP核，然后在source窗口就会出现一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045112.png" alt="15"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045177.png" alt="16"></p><p>下面对这个生成的IP进行例化，测试分频效果</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232045911.png" alt="17"></p><p>将这个例化模块的例程添加到自己的顶层仿真代码中，就可以查看分频结果了。</p><hr><p>本次的博客就讲到这里，其中PLL的使用讲的很浅显，大家要想深入学习PLL的IP使用的话可以学习官方文档。若文章中存在任何错误或不足欢迎大家指正，欢迎大家在博客下方留言交流。</p>]]></content>
    
    
    <summary type="html">简要介绍了各种分频器的verilog设计方法,笔试常用</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>为什么D触发器需要建立时间和保持时间</title>
    <link href="http://david-luge.cn/2022/09/29/IC/Basic/%E4%B8%BA%E4%BB%80%E4%B9%88D%E8%A7%A6%E5%8F%91%E5%99%A8%E9%9C%80%E8%A6%81%E5%BB%BA%E7%AB%8B%E6%97%B6%E9%97%B4%E4%B8%8E%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4/"/>
    <id>http://david-luge.cn/2022/09/29/IC/Basic/%E4%B8%BA%E4%BB%80%E4%B9%88D%E8%A7%A6%E5%8F%91%E5%99%A8%E9%9C%80%E8%A6%81%E5%BB%BA%E7%AB%8B%E6%97%B6%E9%97%B4%E4%B8%8E%E4%BF%9D%E6%8C%81%E6%97%B6%E9%97%B4/</id>
    <published>2022-09-29T01:44:39.000Z</published>
    <updated>2022-09-29T01:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么D触发器需要建立时间与保持时间"><a href="#为什么D触发器需要建立时间与保持时间" class="headerlink" title="为什么D触发器需要建立时间与保持时间"></a>为什么D触发器需要建立时间与保持时间</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>建立时间</strong>：时钟有效沿到来之前的某段时间内，数据必须稳定，这段时间称为建立时间，用Tsetup或者Tsu表示。</p><p><strong>保持时间</strong>：时钟有效沿到来之后的某段时间内，数据必须稳定，这段时间成为保持时间，用Thold或者Th表示。</p><p>时序图如下</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048432.png" alt="1"></p><h2 id="为什么需要建立时间和保持时间"><a href="#为什么需要建立时间和保持时间" class="headerlink" title="为什么需要建立时间和保持时间"></a>为什么需要建立时间和保持时间</h2><p><a href="https://zhuanlan.zhihu.com/p/120863919">从CMOS到建立时间和保持时间</a>这篇文章里作者已经讲的很详细了，我就不再赘述锁存器的原理了，大家有疑问的话可以先去看看这篇文章，这里我只简单举例记录一下我个人对建立时间和保持时间的理解。</p><p>我们从D触发器的门级电路开始分析，D触发器的门级电路如下：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048337.png" alt="2"></p><p>D触发器在时钟(上升)边沿进行数据的锁存。我们这里假设原来的输出是1，即从锁存器锁存的数据为1，要锁存的数据是0，来理解建立时间和保持时间。</p><p>要让时钟上升沿之后Q输出为0，即让从锁存器的输出变为0，也就是要让主锁存器在时钟上升沿之后稳定地锁存住0。</p><p>总结而言，<strong>在上升沿到来及到来之后，主锁存器负责锁存数据，而从锁存器负责传输主锁存器所锁存好的数据。</strong>这样一来，我们重点分析<strong>主锁存器</strong>即可。</p><p>主锁存器的门级电路：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048755.png" alt="3"></p><p><strong>1、如果数据的建立时间不足，会发生什么？</strong></p><p>按我们的假设，也就是数据(0)相对于时钟上升沿来的晚了。假设在T&#x3D;0ns的时候，clk从0变成1(为方便分析，假设时钟理想无跳变延时)。我们假设一个数据D1&#x3D;0在T&#x3D;-0.7ns(即比时钟上升沿提前0.7s)的时候到达数据的端口，然后另一个数据D2&#x3D;0在T&#x3D;-0.3ns的时候才来到数据端口(即D1来得早，而D2来得比较晚不满足建立时间的要求)。我们看看D1的路线，首先经过反相器变为1，然后经过与门(此时时钟还是低电平，该与门的另一个输入为1)变成1，经过或非门之后，将输出Q变成了0。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048629.png" alt="4"></p><p>但<strong>此时主锁存器输出的Q还不稳定，需要通过反馈改变或非门的输入才能保持输出数据的稳定。</strong>如下图所示，通过反馈使得自己或非门的输入为1才能维持Q的稳定，需要<code>t1+t2+t3</code>的时间。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048942.png" alt="5"></p><p>我们再回过头看D2这个数据，它提前于时钟沿的时间不多，刚经过与门时钟沿就来了，<strong>没有成功通过反馈到达或非门的输入</strong>，不能稳定锁存住从锁存器要锁存的0值，这就是建立时间不足引起的锁存不住值导致亚稳态的原因。</p><p><strong>2、如果数据的保持时间不足，会发生什么？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232048433.png" alt="6"></p><p>我们看保持时间仍要从主锁存器这边看：</p><p>假设T&#x3D;0时刻时钟Clk发生从0-&gt;1的上升沿跳变，Clk的高电平信号首先要经过反相器变成0信号后传到后面的与门，如上图绿线所示路径，假设该路径延迟时间为t2，也就是说t2时刻与门的输入就为低电平0，那么在t2时刻之前，与门的Clk输入端始终保持高电平1。</p><p>在t2之前，如果输入端D发生跳变(按我们的假设，从0变为1，即数据的保持时间不足)，变换后的数据端高电平经过t1延迟时间后(上图蓝线所示路径)，到达与门的另一个输入端。</p><p>一般情况下，由于时钟信号需要经过反相器，所以<code>t2&gt;t1</code>，<strong>那么与门的输出在t1~t2时刻之间的时候输出为1。</strong>也就是SR锁存器的置位端为1，这会导致Q&#x3D;1，这与我们要锁存的0值不同，导致亚稳态的出现。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>建立时间：在时钟上升沿到来之前主锁存器将数据稳定锁存所需的时间。</strong></p><p><strong>保持时间：在时钟上升沿到来之后主锁存器传输门关断至锁存数据的时间。</strong></p>]]></content>
    
    
    <summary type="html">为什么D触发器需要建立时间和保持时间</summary>
    
    
    
    <category term="IC" scheme="http://david-luge.cn/categories/IC/"/>
    
    <category term="Basics" scheme="http://david-luge.cn/categories/IC/Basics/"/>
    
    
    <category term="Basics" scheme="http://david-luge.cn/tags/Basics/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu开发环境打造</title>
    <link href="http://david-luge.cn/2022/09/23/Misc/Ubuntu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/"/>
    <id>http://david-luge.cn/2022/09/23/Misc/Ubuntu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/</id>
    <published>2022-09-23T04:50:00.000Z</published>
    <updated>2022-09-23T04:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu开发环境打造"><a href="#Ubuntu开发环境打造" class="headerlink" title="Ubuntu开发环境打造"></a>Ubuntu开发环境打造</h1><h2 id="安装ubuntu18-04"><a href="#安装ubuntu18-04" class="headerlink" title="安装ubuntu18.04"></a>安装ubuntu18.04</h2><p>下载：</p><blockquote><p>  <a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></p></blockquote><h2 id="配置清华软件源"><a href="#配置清华软件源" class="headerlink" title="配置清华软件源"></a>配置清华软件源</h2><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></p></blockquote><h2 id="双系统时间不同步问题"><a href="#双系统时间不同步问题" class="headerlink" title="双系统时间不同步问题"></a>双系统时间不同步问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br></pre></td></tr></table></figure><h2 id="安装Synaptic包管理器"><a href="#安装Synaptic包管理器" class="headerlink" title="安装Synaptic包管理器"></a>安装Synaptic包管理器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install synaptic</span><br></pre></td></tr></table></figure><h2 id="安装编译开发环境"><a href="#安装编译开发环境" class="headerlink" title="安装编译开发环境"></a>安装编译开发环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure><h2 id="Home下目录改成英文"><a href="#Home下目录改成英文" class="headerlink" title="Home下目录改成英文"></a>Home下目录改成英文</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ export LANG=en_US</span><br><span class="line"></span><br><span class="line">$ xdg-user-dirs-gtk-update</span><br><span class="line"></span><br><span class="line">这个时候会弹出一个配置界面，提示是否将中文目录切换为英文目录。选中不再提示，确定</span><br><span class="line"></span><br><span class="line">最后再执行如下命令还原到系统之前的设置</span><br><span class="line">$ export LANG=zh_CN</span><br></pre></td></tr></table></figure><h2 id="安装并配置VS-Code"><a href="#安装并配置VS-Code" class="headerlink" title="安装并配置VS Code"></a>安装并配置VS Code</h2><p>下载安装包</p><blockquote><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p></blockquote><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i [安装包文件名]</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure><p>以超级用户启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo code --user-data-dir=&quot;/home/wg/.vscode/&quot;</span><br></pre></td></tr></table></figure><p>安装插件</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232124452.png" alt="1"></p><h2 id="Ubuntu安装pytorch"><a href="#Ubuntu安装pytorch" class="headerlink" title="Ubuntu安装pytorch"></a>Ubuntu安装pytorch</h2><p>版本：python3.6.9</p><p>安装pip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><p>更换阿里源<br>修改 ~&#x2F;.pip&#x2F;pip.conf (没有就创建一个)， 内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><p>升级pip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure><p>安装常用包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip3 install numpy</span><br><span class="line">pip3 install opencv-python</span><br><span class="line">pip3 install torch</span><br><span class="line">pip3 install torchvision</span><br></pre></td></tr></table></figure><p>下载离线安装包<br>torchtorchvision   python                cuda</p><p>1.5.10.6.1       &gt;&#x3D;3.6                9.2, 10.1,10.2</p><p>1.5.00.6.0       &gt;&#x3D;3.6                9.2, 10.1,10.2</p><p>1.4.00.5.0       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.8    9.2, 10.0</p><p>1.3.10.4.2       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.7    9.2, 10.0</p><p>1.3.00.4.1       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.7    9.2, 10.0</p><p>1.2.00.4.0       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.7    9.2, 10.0</p><p>1.1.00.3.0       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.7    9.0, 10.0</p><p>&lt;1.0.10.2.2       &#x3D;&#x3D;2.7, &gt;&#x3D;3.5, &lt;&#x3D;3.7    9.0, 10.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install torch-1.4.0-cp36-cp36m-linux_x86_64.whl</span><br><span class="line">sudo pip install torchvision-0.5.0-cp36-cp36m-linux_x86_64.whl</span><br></pre></td></tr></table></figure><h2 id="安装Vivado-2018-2"><a href="#安装Vivado-2018-2" class="headerlink" title="安装Vivado 2018.2"></a>安装Vivado 2018.2</h2><p>下载安装包</p><blockquote><p><a href="https://china.xilinx.com/support/download.html">https://china.xilinx.com/support/download.html</a></p></blockquote><p>解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvzf xxx.tar.gz</span><br></pre></td></tr></table></figure><p>执行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./xsetup</span><br></pre></td></tr></table></figure><p>安装路径选择默认</p><p>安装JTAG驱动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/Vivado/2018.2/data/xicom/cable_drivers/lin64/install_script/install_drivers/</span><br><span class="line">sudo ./install_drivers</span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit .bashrc</span><br></pre></td></tr></table></figure><p>添加命令别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias svvd=&#x27;source /opt/Xilinx/Vivado/2018.2/settings64.sh&#x27;</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#启动Vivado</span><br><span class="line">$ vivado</span><br><span class="line"></span><br><span class="line">#启动Vivado HLS</span><br><span class="line">$ vivado_hls</span><br><span class="line"></span><br><span class="line">#启动XSDK</span><br><span class="line">$ xsdk</span><br></pre></td></tr></table></figure><h2 id="安装SSH服务并开机自启"><a href="#安装SSH服务并开机自启" class="headerlink" title="安装SSH服务并开机自启"></a>安装SSH服务并开机自启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">sudo systemctl enable ssh</span><br><span class="line">sudo systemctl status ssh</span><br></pre></td></tr></table></figure><h2 id="安装GHex"><a href="#安装GHex" class="headerlink" title="安装GHex"></a>安装GHex</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ghex</span><br></pre></td></tr></table></figure><h2 id="安装Typora"><a href="#安装Typora" class="headerlink" title="安装Typora"></a>安装Typora</h2><blockquote><p><a href="https://typora.io/#linux">https://typora.io/#linux</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or run:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add Typora<span class="string">&#x27;s repository</span></span></span><br><span class="line">sudo add-apt-repository &#x27;deb https://typora.io/linux ./&#x27;</span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">install typora</span></span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure><h2 id="安装坚果云（NutStore）"><a href="#安装坚果云（NutStore）" class="headerlink" title="安装坚果云（NutStore）"></a>安装坚果云（NutStore）</h2><blockquote><p><a href="https://www.jianguoyun.com/s/downloads/linux">https://www.jianguoyun.com/s/downloads/linux</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i nautilus_nutstore_amd64.deb</span><br><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure><h2 id="安装网易云音乐"><a href="#安装网易云音乐" class="headerlink" title="安装网易云音乐"></a>安装网易云音乐</h2><blockquote><p><a href="https://music.163.com/#/download">https://music.163.com/#/download</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232125711.png" alt="2"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><h2 id="安装FlameShot"><a href="#安装FlameShot" class="headerlink" title="安装FlameShot"></a>安装FlameShot</h2><p>下载安装包</p><blockquote><p><a href="https://github.com/lupoDharkael/flameshot/releases">https://github.com/lupoDharkael/flameshot/releases</a></p></blockquote><p>rpm包是yum的安装文件，.deb包才是Ubuntu安装包</p><ul><li><p>bionic：Ubuntu18.04的版本名</p></li><li><p>jessie：Debian8.6版本的版本名</p></li><li><p>stretch：Debian9的版本名</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i flameshot_0.6.0_bionic_x86_64.deb</span><br></pre></td></tr></table></figure><p>创建截图快捷键</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232125490.png" alt="3"></p><h2 id="破解安装Beyond-Compare"><a href="#破解安装Beyond-Compare" class="headerlink" title="破解安装Beyond Compare"></a>破解安装Beyond Compare</h2><blockquote><p><a href="http://www.scootersoftware.com/download.php">http://www.scootersoftware.com/download.php</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232125626.png" alt="4"></p><p>下载64位的.deb包，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i [安装包文件名]</span><br></pre></td></tr></table></figure><p><strong>破解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转到安装路径：</span><br><span class="line">cd /usr/lib/beyondcompare/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i &quot;s/keexjEP3t4Mue23hrnuPtY4TdcsqNiJL-5174TsUdLmJSIXKfG2NGPwBL6vnRPddT7tH29qpkneX63DO9ECSPE9rzY1zhThHERg8lHM9IBFT+rVuiY823aQJuqzxCKIE1bcDqM4wgW01FH6oCBP1G4ub01xmb4BGSUG6ZrjxWHJyNLyIlGvOhoY2HAYzEtzYGwxFZn2JZ66o4RONkXjX0DF9EzsdUef3UAS+JQ+fCYReLawdjEe6tXCv88GKaaPKWxCeaUL9PejICQgRQOLGOZtZQkLgAelrOtehxz5ANOOqCaJgy2mJLQVLM5SJ9Dli909c5ybvEhVmIC0dc9dWH+/N9KmiLVlKMU7RJqnE+WXEEPI1SgglmfmLc1yVH7dqBb9ehOoKG9UE+HAE1YvH1XX2XVGeEqYUY-Tsk7YBTz0WpSpoYyPgx6Iki5KLtQ5G-aKP9eysnkuOAkrvHU8bLbGtZteGwJarev03PhfCioJL4OSqsmQGEvDbHFEbNl1qJtdwEriR+VNZts9vNNLk7UGfeNwIiqpxjk4Mn09nmSd8FhM4ifvcaIbNCRoMPGl6KU12iseSe+w+1kFsLhX+OhQM8WXcWV10cGqBzQE9OqOLUcg9n0krrR3KrohstS9smTwEx9olyLYppvC0p5i7dAx2deWvM1ZxKNs0BvcXGukR+/g&quot; BCompare</span><br></pre></td></tr></table></figure><p>然后打开Beyond Conpare，弹出Trial Mode Error！弹窗</p><p>单击右下角按钮“Enter Key”，输入以下秘钥【注意：包括开始和结尾的横线行】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--- BEGIN LICENSE KEY ---</span><br><span class="line">GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfkqZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3dZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJDyo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiRjKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+++</span><br><span class="line">--- END LICENSE KEY -----</span><br></pre></td></tr></table></figure><p>破解成功的重要标志</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232126402.png" alt="5"></p><p>务必取消更新检测（否则破解过一段时间就会失效）</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232126083.png" alt="6"></p><p><strong>破解失效的解决办法</strong></p><p>删除如下的两个文件即可</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232127803.png" alt="7"></p><h2 id="安装并配置Synergy"><a href="#安装并配置Synergy" class="headerlink" title="安装并配置Synergy"></a>安装并配置Synergy</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install synergy</span><br></pre></td></tr></table></figure><p>遇到问题system tray is unavailable, don’t close your window，解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sni-qt</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://vvplus.net/multi-computer-screen-sharing-keyboard-mouse-synergy1-8-8-stable-windows10-mac-linux-download-configuration.html">https://vvplus.net/multi-computer-screen-sharing-keyboard-mouse-synergy1-8-8-stable-windows10-mac-linux-download-configuration.html</a></p></blockquote><p>可用注册码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7B76313B70726F3BE5BDAC20E585B33B313B73796E313333323040676D61696C2E636F6D3B3B3B7D</span><br></pre></td></tr></table></figure><h2 id="设置开机启动项"><a href="#设置开机启动项" class="headerlink" title="设置开机启动项"></a>设置开机启动项</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gnome-tweak-tool</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232127621.png" alt="8"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232128108.png" alt="9"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232128032.png" alt="10"></p><h2 id="无法识别exfat格式分区"><a href="#无法识别exfat格式分区" class="headerlink" title="无法识别exfat格式分区"></a>无法识别exfat格式分区</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install exfat-utils</span><br></pre></td></tr></table></figure><h2 id="Firefox无法播放bilibili视频"><a href="#Firefox无法播放bilibili视频" class="headerlink" title="Firefox无法播放bilibili视频"></a>Firefox无法播放bilibili视频</h2><p>提示未安装flash，实际上是缺少本地解码器，可以通过安装<del>mplayer</del>解决，（mplayer无界面，转而安装vlc）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vlc</span><br></pre></td></tr></table></figure><h2 id="vlc无法播放H-264视频"><a href="#vlc无法播放H-264视频" class="headerlink" title="vlc无法播放H.264视频"></a>vlc无法播放H.264视频</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure><h2 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h2><p>下载.deb</p><p><a href="https://pinyin.sogou.com/linux/">https://pinyin.sogou.com/linux/</a></p><p>安装过程</p><p><a href="https://pinyin.sogou.com/linux/help.php">https://pinyin.sogou.com/linux/help.php</a></p><p>安装结束后卸载ibus框架相关组件，只保留fcitx框架</p><p>查看日志，搜狗提示libpng12.0.so找不到，（18.04已经安装了libpng16，不能通过apt安装libpng12，只能手动下载deb包安装）</p><blockquote><p><a href="https://mirrors.ustc.edu.cn/ubuntu/pool/main/libp/libpng/">https://mirrors.ustc.edu.cn/ubuntu/pool/main/libp/libpng/</a></p></blockquote><p>安装后，搜狗的顶栏图标正常，Xilinx的Docnav也可以打开。</p><p>但安装后，出现了两个搜狗输入法的图标，此时对fcitx进行配置，隐藏fcitx的图标。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232128452.png" alt="11"></p><h2 id="解决AIR-14-2020的声音伪输出的问题"><a href="#解决AIR-14-2020的声音伪输出的问题" class="headerlink" title="解决AIR 14 2020的声音伪输出的问题"></a>解决AIR 14 2020的声音伪输出的问题</h2><p>本问题可能由于5.4内核对英特尔最新硬件的支持不足导致的。</p><p>step1：对于Ubuntu18.04，升级内核相关的包到最新版本（grub*，linux*）</p><p>step2：在&#x2F;etc&#x2F;modprobe.d&#x2F;alsa-base.conf添加中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options snd-hda-intel dmic_detect=0</span><br><span class="line">或者</span><br><span class="line">options snd-intel-dspcfg dsp_driver=1（使用dsp而不是sof）</span><br></pre></td></tr></table></figure><p>重启后检查是否有声音，</p><p>step3：重新安装（alsa*，不包括alsa-tools等）（pulseaudio*）等包，gstreamer1.0-alsa，gstreamer1.0-pulseaudio等包，</p><p>重启。</p><h2 id="设置GRUB2默认启动操作系统"><a href="#设置GRUB2默认启动操作系统" class="headerlink" title="设置GRUB2默认启动操作系统"></a>设置GRUB2默认启动操作系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设定默认启动项，推荐使用数字（0代表第1项，1 &gt;0代表第2项的第1子项）</span><br><span class="line">GRUB_DEFAULT=2</span><br><span class="line"></span><br><span class="line">#显示倒计时</span><br><span class="line">GRUB_TIMEOUT_STYLE=countdown</span><br><span class="line"></span><br><span class="line">#超时时间，默认为10秒</span><br><span class="line">GRUB_TIMEOUT=6</span><br></pre></td></tr></table></figure><p><strong>记得</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-grub </span><br></pre></td></tr></table></figure><h2 id="安装清理工具Bleachbit"><a href="#安装清理工具Bleachbit" class="headerlink" title="安装清理工具Bleachbit"></a>安装清理工具Bleachbit</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install bleachbit</span><br></pre></td></tr></table></figure><h2 id="安装PDF批注软件Xournal"><a href="#安装PDF批注软件Xournal" class="headerlink" title="安装PDF批注软件Xournal"></a>安装PDF批注软件Xournal</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xournal</span><br></pre></td></tr></table></figure><h2 id="安装电子书管理器Calibre"><a href="#安装电子书管理器Calibre" class="headerlink" title="安装电子书管理器Calibre"></a>安装电子书管理器Calibre</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install calibre</span><br></pre></td></tr></table></figure><h2 id="安装音频编辑软件Audacity"><a href="#安装音频编辑软件Audacity" class="headerlink" title="安装音频编辑软件Audacity"></a>安装音频编辑软件Audacity</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install audacity</span><br></pre></td></tr></table></figure><h2 id="安装矢量绘图软件Inkscape"><a href="#安装矢量绘图软件Inkscape" class="headerlink" title="安装矢量绘图软件Inkscape"></a>安装矢量绘图软件Inkscape</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install inkscape</span><br></pre></td></tr></table></figure><h2 id="安装几何画板软件GeoGebra"><a href="#安装几何画板软件GeoGebra" class="headerlink" title="安装几何画板软件GeoGebra"></a>安装几何画板软件GeoGebra</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install geogebra</span><br></pre></td></tr></table></figure><h2 id="安装科学计算软件Octave"><a href="#安装科学计算软件Octave" class="headerlink" title="安装科学计算软件Octave"></a>安装科学计算软件Octave</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install octave</span><br></pre></td></tr></table></figure><h2 id="安装utools插件框架"><a href="#安装utools插件框架" class="headerlink" title="安装utools插件框架"></a>安装utools插件框架</h2><blockquote><p><a href="https://u.tools/">https://u.tools/</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><p>安装下面的插件</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232129296.png" alt="12"></p><h2 id="破解安装Xmind"><a href="#破解安装Xmind" class="headerlink" title="破解安装Xmind"></a>破解安装Xmind</h2><p>下载补丁（app.asar），</p><blockquote><p><a href="https://www.ghpym.com/xmindzen.html">https://www.ghpym.com/xmindzen.html</a></p></blockquote><p>安装官方程序，</p><blockquote><p><a href="https://www.xmind.cn/download/">https://www.xmind.cn/download/</a></p></blockquote><p>然后进入程序目录&#x2F;opt&#x2F;XMind ZEN&#x2F;XMind&#x2F;resources<br>替换此目录的app.asar 文件即可</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232129487.png" alt="13"></p><h2 id="安装VMware"><a href="#安装VMware" class="headerlink" title="安装VMware"></a>安装VMware</h2><blockquote><p><a href="https://www.vmware.com/go/downloadworkstation">https://www.vmware.com/go/downloadworkstation</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh ./VMware-Workstation-Full-15.5.6.x86_64.bundle</span><br></pre></td></tr></table></figure><p>显示Successful则成功</p><h2 id="安装Gnome-Shell插件"><a href="#安装Gnome-Shell插件" class="headerlink" title="安装Gnome Shell插件"></a>安装Gnome Shell插件</h2><p>打开Gnome软件中心，选择附加组件，</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232130975.png" alt="14"></p><p>已安装：</p><ul><li>Bing wallpaper</li><li>Workspace indicator</li><li>NetSpeed</li></ul><p>在这里进行管理，</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232130925.png" alt="15"></p><h2 id="屏蔽邮件服务程序的开机自启"><a href="#屏蔽邮件服务程序的开机自启" class="headerlink" title="屏蔽邮件服务程序的开机自启"></a>屏蔽邮件服务程序的开机自启</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl --user mask evolution-addressbook-factory.service evolution-calendar-factory.service evolution-source-registry.service</span><br></pre></td></tr></table></figure><h2 id="查看dpkg安装日志"><a href="#查看dpkg安装日志" class="headerlink" title="查看dpkg安装日志"></a>查看dpkg安装日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;\ install\ &quot; /var/log/dpkg.log</span><br></pre></td></tr></table></figure><h2 id="安装Windows字体"><a href="#安装Windows字体" class="headerlink" title="安装Windows字体"></a>安装Windows字体</h2><p>从Windows系统中找到相应字体文件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/fonts/truetype/windows-font</span><br></pre></td></tr></table></figure><p>拷贝字体到Windows目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 777  /usr/share/fonts/truetype/windows-font</span><br><span class="line">cd /usr/share/fonts/truetype/windows-font</span><br><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="配置科学上网（科技熊、光速云）"><a href="#配置科学上网（科技熊、光速云）" class="headerlink" title="配置科学上网（科技熊、光速云）"></a>配置科学上网（科技熊、光速云）</h2><blockquote><p><a href="https://kejibearstudio.tk/">https://kejibearstudio.tk/</a></p></blockquote><blockquote><p><a href="https://kejibearstudio.tk/user/tutorial?os=linux&amp;client=clash">https://kejibearstudio.tk/user/tutorial?os=linux&amp;client=clash</a></p></blockquote><p>下载clash的二进制文件</p><p><a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p><p>下载机场的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">光速云</span><br><span class="line">wget -O gsy-config.yaml &quot;https://136900.xyz/link/glLP6b5aqiOxa6Xg?clash=1&amp;log-level=info&quot;</span><br><span class="line"></span><br><span class="line">科技熊</span><br><span class="line">wget -O kjx-config.yaml &quot;https://service-6wrorr47-1254266595.sh.apigw.tencentcs.com/link/MKKO2wk7drvLpKrp?clash=1&amp;log-level=info&quot;</span><br></pre></td></tr></table></figure><p>对于光速云</p><p>需要修改<code>gsy-config.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除 trojan 测试 项</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clash  -d .  -f gsy-config.yaml</span><br></pre></td></tr></table></figure><blockquote><p>Usage of .&#x2F;clash:<br>  -d string<br>        set configuration directory<br>  -ext-ctl string<br>        override external controller address<br>  -ext-ui string<br>        override external ui directory<br>  -f string<br>        specify configuration file<br>  -secret string<br>        override secret for RESTful API<br>  -ttest configuration and exit<br>  -vshow current version of clash</p></blockquote><p>使用浏览器访问</p><p><a href="http://clash.razord.top/#/proxies">http://clash.razord.top/#/proxies</a></p><p>打开系统代理</p><p>打开系统设置，选择网络，点击网络代理右边的 ⚙ 按钮，选择手动，填写 HTTP 和 HTTPS 代理为 <code>127.0.0.1:7890</code>，填写 Socks 主机为 <code>127.0.0.1:7891</code>，即可启用系统代理。</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232130527.png" alt="16"></p><p>设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;(sleep 15 &amp;&amp; cd /home/kopera/Tools/ &amp;&amp; clash -d . -f gsy-config.yaml)&quot;</span><br></pre></td></tr></table></figure><h2 id="GNOME3安装主题与图标包"><a href="#GNOME3安装主题与图标包" class="headerlink" title="GNOME3安装主题与图标包"></a>GNOME3安装主题与图标包</h2><p><strong>theme</strong>：控制窗口样式</p><p><strong>shell theme</strong>：控制顶栏样式（可以不启用）</p><blockquote><p><a href="https://www.pling.com/p/1334194/">https://www.pling.com/p/1334194/</a></p></blockquote><p>在<code>home</code>下建立<code>.themes</code>文件夹，放入下载的主题包后，从gnome-tweak-tool中选择</p><p><strong>icon theme</strong>：控制图标样式</p><blockquote><p><a href="https://www.pling.com/p/1279924/">https://www.pling.com/p/1279924/</a></p></blockquote><p>在<code>home</code>下建立<code>.icons</code>文件夹，放入下载的图标包后，从gnome-tweak-tool中选择</p><h2 id="安装Foxit-Reader阅读器"><a href="#安装Foxit-Reader阅读器" class="headerlink" title="安装Foxit Reader阅读器"></a>安装Foxit Reader阅读器</h2><blockquote><p><a href="https://www.foxitsoftware.cn/">https://www.foxitsoftware.cn/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232131679.png" alt="17"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232131998.png" alt="18"></p><p>下载<code>.run</code>文件，使用sudo权限安装至<code>/opt/Foxit</code>下</p><h2 id="安装CopyTranslator"><a href="#安装CopyTranslator" class="headerlink" title="安装CopyTranslator"></a>安装CopyTranslator</h2><blockquote><p><a href="https://github.com/CopyTranslator/CopyTranslator/releases">https://github.com/CopyTranslator/CopyTranslator/releases</a></p></blockquote><h2 id="安装balenaEtcher"><a href="#安装balenaEtcher" class="headerlink" title="安装balenaEtcher"></a>安装balenaEtcher</h2><blockquote><p><a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p><p><a href="https://github.com/balena-io/etcher/releases">https://github.com/balena-io/etcher/releases</a></p></blockquote><h2 id="安装Free-Download-Manager"><a href="#安装Free-Download-Manager" class="headerlink" title="安装Free Download Manager"></a>安装Free Download Manager</h2><blockquote><p><a href="https://www.freedownloadmanager.org/zh/download-fdm-for-linux.htm">https://www.freedownloadmanager.org/zh/download-fdm-for-linux.htm</a></p></blockquote><h2 id="基于VScode-Vivado的HDL仿真环境"><a href="#基于VScode-Vivado的HDL仿真环境" class="headerlink" title="基于VScode+Vivado的HDL仿真环境"></a>基于VScode+Vivado的HDL仿真环境</h2><p>安装插件：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232133836.png" alt="19"></p><p>配置插件：</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232133328.png" alt="20"></p><p>修改插件源码（以支持linux并且去掉无效功能）</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232133204.png" alt="21"></p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232133260.png" alt="22"></p><p>修改插件源码（修改生成样式）</p><p><img src="https://cdn.jsdelivr.net/gh/XduDavid/Blog_Img@main/img/202303232133268.png" alt="23"></p><p>Makefile</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定综合的顶层模块</span></span><br><span class="line">SYNTH_TOP = pc</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定仿真的顶层模块</span></span><br><span class="line">SIM_TOP = <span class="variable">$(SYNTH_TOP)</span>_tb</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定新建工程的序号</span></span><br><span class="line">INDEX = <span class="variable">$(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定坚果云同步目录</span></span><br><span class="line">Cur_Dir = <span class="variable">$(<span class="built_in">shell</span> <span class="built_in">basename</span> `pwd`)</span></span><br><span class="line">Nut_Path = /home/wg/Nutstore\ Files/我的坚果云/Coding/Verilog</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建文件</span></span><br><span class="line"><span class="section">create:</span></span><br><span class="line">touch src/<span class="variable">$(SIM_TOP)</span>.v</span><br><span class="line">touch src/<span class="variable">$(SYNTH_TOP)</span>.v</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">mkdir batch_sim</span><br><span class="line">cd batch_sim &amp;&amp; xvlog --work mylib ../src/*.v</span><br><span class="line">cd batch_sim &amp;&amp; xelab --debug typical -s simTest mylib.<span class="variable">$(SIM_TOP)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首次仿真（Batch Mode）</span></span><br><span class="line"><span class="section">first:</span></span><br><span class="line">cd batch_sim &amp;&amp; xsim simTest -gui -wdb wave_data.wdb</span><br><span class="line"></span><br><span class="line"><span class="comment">#仿真（带波形配置）</span></span><br><span class="line"><span class="section">test:</span></span><br><span class="line">cd batch_sim &amp;&amp; xsim simTest -gui -wdb wave_data.wdb -view ../wave_config.wcfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空输出</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -r batch_sim vvd_prj</span><br><span class="line"></span><br><span class="line"><span class="comment">#调试（Project Mode）</span></span><br><span class="line"><span class="section">debug:</span></span><br><span class="line">mkdir vvd_prj</span><br><span class="line">cd ./vvd_prj &amp;&amp; vivado -mode tcl -source ../run_sim.tcl -tclargs <span class="variable">$(SIM_TOP)</span> <span class="variable">$(SYNTH_TOP)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Vivado工程</span></span><br><span class="line"><span class="section">launch:</span></span><br><span class="line">cd ./vvd_prj &amp;&amp; vivado debug_prj.xpr</span><br><span class="line"></span><br><span class="line"><span class="comment">#另存工作空间</span></span><br><span class="line"><span class="section">new_prj:</span></span><br><span class="line">mkdir ../demoT_<span class="variable">$(INDEX)</span></span><br><span class="line">cp -r src ../demoT_<span class="variable">$(INDEX)</span></span><br><span class="line">cp Makefile run_sim.tcl ../demoT_<span class="variable">$(INDEX)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#推送坚果云</span></span><br><span class="line"><span class="section">push_Nut:</span></span><br><span class="line">mkdir <span class="variable">$(Nut_Path)</span>/<span class="variable">$(Cur_Dir)</span></span><br><span class="line">cp -r src <span class="variable">$(Nut_Path)</span>/<span class="variable">$(Cur_Dir)</span></span><br><span class="line">cp Makefile run_sim.tcl <span class="variable">$(Nut_Path)</span>/<span class="variable">$(Cur_Dir)</span></span><br></pre></td></tr></table></figure><p>Tcl脚本</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> sim_top [<span class="keyword">lindex</span> <span class="variable">$argv</span> <span class="number">0</span>]</span><br><span class="line"><span class="keyword">set</span> synth_top [<span class="keyword">lindex</span> <span class="variable">$argv</span> <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">create_project debug_prj</span><br><span class="line"></span><br><span class="line">add_files -fileset sources_1 -norecurse [<span class="keyword">glob</span> ../src/*.v]</span><br><span class="line"></span><br><span class="line">set_property top <span class="variable">$synth_top</span> [current_fileset]</span><br><span class="line">update_compile_order -fileset [current_fileset]</span><br><span class="line"></span><br><span class="line">set_property top <span class="variable">$sim_top</span> [get_filesets sim_1]</span><br><span class="line">update_compile_order -fileset sim_1</span><br><span class="line"></span><br><span class="line">set_property -name &#123;xsim.simulate.runtime&#125; -value &#123;<span class="number">30</span>ns&#125; -objects [get_filesets sim_1]</span><br><span class="line">launch_simulation -mode behavioral</span><br><span class="line">start_gui</span><br></pre></td></tr></table></figure><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢舍友老王的倾力支持</p>]]></content>
    
    
    <summary type="html">Ubuntu开发环境打造</summary>
    
    
    
    <category term="Misc" scheme="http://david-luge.cn/categories/Misc/"/>
    
    <category term="Ubuntu" scheme="http://david-luge.cn/categories/Misc/Ubuntu/"/>
    
    
    <category term="Ubuntu" scheme="http://david-luge.cn/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
